{"id":"src/main.js","dependencies":[{"name":"./scenes/LoadScene","loc":{"line":2,"column":24},"parent":"/Users/marloncard/projects/evolution-simulator/src/main.js","resolved":"/Users/marloncard/projects/evolution-simulator/src/scenes/LoadScene.js"},{"name":"./scenes/MenuScene","loc":{"line":3,"column":24},"parent":"/Users/marloncard/projects/evolution-simulator/src/main.js","resolved":"/Users/marloncard/projects/evolution-simulator/src/scenes/MenuScene.js"},{"name":"./scenes/PlayScene","loc":{"line":4,"column":24},"parent":"/Users/marloncard/projects/evolution-simulator/src/main.js","resolved":"/Users/marloncard/projects/evolution-simulator/src/scenes/PlayScene.js"}],"generated":{"js":"\"use strict\";\n\nvar _LoadScene = require(\"./scenes/LoadScene\");\n\nvar _MenuScene = require(\"./scenes/MenuScene\");\n\nvar _PlayScene = require(\"./scenes/PlayScene\");\n\n/** @types {import(\"../typings/phaser\")} */\nvar game = new Phaser.Game({\n  width: 800,\n  height: 600,\n  scene: [_LoadScene.LoadScene, _MenuScene.MenuScene, _PlayScene.PlayScene],\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      debug: true\n    }\n  }\n});\n/*\n//import Life from './life.js';\nconst gameState = {}\nconst config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    backgroundColor: '#ababab',\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: 100,\n            debug: true\n        }\n    },\n\n    scene: {\n        preload,\n        create,\n        update\n    }\n\n\n};\nconst game = new Phaser.Game(config);\n\nlet slime = \"\";\nlet timer = 0;\nconst healthbar = 100;\n\nfunction preload () {\n    // preload images, sounds & other assets\n    //this.load.json('map', 'assets/grass.json')\n    this.load.image('tileset', 'assets/TilesetGrass/overworld_tileset_grass.png');\n    this.load.tilemapTiledJSON('map', 'assets/TilesetGrass/evo-tileset.json');\n    //this.load.spritesheet('tiles', 'assets/grass.png', {frameWidth: 64, frameHeight: 64})\n    this.load.multiatlas('slime', 'assets/slime.json', 'assets')\n    this.load.spritesheet('slime_back', 'assets/slime1_back.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_front', 'assets/slime1_front.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_side', 'assets/slime1_side.png', {frameWidth: 16, frameHeight: 16})\n    this.load.spritesheet('slime_explode', 'assets/slime_explode.png', {frameWidth: 16, frameHeight: 16})\n};\nfunction create () {\n\n\n    // Layers\n\n\n    // Add organism to scene (full spritesheet) -- .setBounce(10).setFriction(0)\n    this.slime = this.physics.add.sprite(400, 330,'slime', 'slime-05.png');\n    // label(this.slime)\n\n    // Create animations\n    this.anims.create({\n        key: 'idle',\n        frames: this.anims.generateFrameNames('slime', {prefix: 'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:5,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'north',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 1, end: 4, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'south',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'west',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-', start: 9, end: 12, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n\n    //Group of organisms\n    this.organisms = this.physics.add.group({\n        key: 'slime',\n        repeat: 4,\n        setXY: {\n            x: 400,\n            y: 300,\n            stepX: 80,\n            stepY: 20\n        }\n    });\n\n    //scale organism\n    // Phaser.Actions.ScaleXY(this.organisms.getChildren(), -0.10,-0.10);\n\n    // Takes an array of objects and passes each of them to the given callback.\n    Phaser.Actions.Call(this.organisms.getChildren(), function(organism) {\n        organism.speed = Math.random() * 2 + 1;\n        // make item interactive\n        organism.setInteractive();\n\n    }, this);\n\n    let locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n    this.orgLocations = this.add.group({\n        //\n    })\n\n    this.slime.speed = 2;\n    this.physics.world.bounds.width = map.widthInPixels-10;\n    this.physics.world.bounds.height = map.heightInPixels-10;\n    this.slime.setCollideWorldBounds(true);\n\n\n    \n\n\n    // Collision debugging (remove in production)\n    // const debugGraphics = this.add.graphics().setAlpha(0.75);\n    // treeLayer.renderDebug(debugGraphics, {\n    //     tileColor: null,\n    //     collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255),\n    //     faceColor: new Phaser.Display.Color(40, 39, 37, 255)\n    // });\n    \n    \n    \n};\nfunction update () {\n\n    // Slime movement\n    this.slime.setVelocityX(-64)\n    movementAnim(this.slime)\n\n        // Organism movement\n        let organisms = this.organisms.getChildren();\n        let numOrganisms = organisms.length;\n    \n        for (let i = 0; i < numOrganisms; i++) {\n\n            // movement\n            movementAnim(organisms[i]);\n  \n            if (timer < 10) {\n                if (i === 0 || i === 1) {\n                    organisms[i].setVelocityY(64);  \n                } else if (i === 2 || i === 3) {\n                    organisms[i].setVelocityX(64)\n                } else if (i === 5) {\n                    organisms[i].setVelocity(0,0)\n                }\n            }\n\n\n                if (organisms[i].y >= 599) {\n                    organisms[i].setVelocityY(-64)\n                    //organisms[i].anims.play('north', true);\n                } else if (organisms[i].y <= 1) {\n                    organisms[i].setVelocityY(64);\n                    //organisms[i].anims.play('south', true);\n                } else if (organisms[i].x >= 799) {\n                    organisms[i].setVelocityX(-64);\n                    //organisms[i].anims.play('west', true)\n                } else if (organisms[i].x <= 1) {\n                    organisms[i].setVelocityX(64);\n                    //organisms[i].anims.play('west', true)\n                    //organisms[i].flipX = true;\n                } else {\n                    randomMovement(organisms[i])\n                }\n                \n    // if (organisms[i].x >= this.organismMaxX && organisms[i].speed > 0) {\n            //     organisms[i].speed *= -0.25;\n            // } else if (organisms[i].x <= this.organismMinX && organisms[i].speed < 0) {\n            //     organisms[i].speed *= -0.25;\n            // }\n            timer++\n        };\n\n    //this.slime.y -= this.slime.speed\n    //this.slime.anims.play('north', true);\n\n}; \n\n\n\n\n\n\n// function label(obj) {\n//     const style = { font: \"10px Arial\", fill: \"#ffffff\"};\n//     obj.label_score = this.add.text(20, 20, \"0\", style);\n//     obj.hello_sprite.addChild(this.label_score)\n// }\n\n//locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n\n*/"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"src/main.js","original":{"line":2,"column":0}},{"generated":{"line":5,"column":0},"source":"src/main.js","original":{"line":3,"column":0}},{"generated":{"line":7,"column":0},"source":"src/main.js","original":{"line":4,"column":0}},{"generated":{"line":9,"column":0},"source":"src/main.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"src/main.js","original":{"line":6,"column":0}},{"name":"game","generated":{"line":10,"column":4},"source":"src/main.js","original":{"line":6,"column":4}},{"generated":{"line":10,"column":8},"source":"src/main.js","original":{"line":6,"column":8}},{"generated":{"line":10,"column":11},"source":"src/main.js","original":{"line":6,"column":11}},{"name":"Phaser","generated":{"line":10,"column":15},"source":"src/main.js","original":{"line":6,"column":15}},{"generated":{"line":10,"column":21},"source":"src/main.js","original":{"line":6,"column":21}},{"name":"Game","generated":{"line":10,"column":22},"source":"src/main.js","original":{"line":6,"column":22}},{"generated":{"line":10,"column":26},"source":"src/main.js","original":{"line":6,"column":11}},{"generated":{"line":10,"column":27},"source":"src/main.js","original":{"line":6,"column":27}},{"name":"width","generated":{"line":11,"column":0},"source":"src/main.js","original":{"line":7,"column":4}},{"name":"width","generated":{"line":11,"column":2},"source":"src/main.js","original":{"line":7,"column":4}},{"generated":{"line":11,"column":7},"source":"src/main.js","original":{"line":7,"column":9}},{"generated":{"line":11,"column":9},"source":"src/main.js","original":{"line":7,"column":11}},{"generated":{"line":11,"column":12},"source":"src/main.js","original":{"line":6,"column":27}},{"name":"height","generated":{"line":12,"column":0},"source":"src/main.js","original":{"line":8,"column":4}},{"name":"height","generated":{"line":12,"column":2},"source":"src/main.js","original":{"line":8,"column":4}},{"generated":{"line":12,"column":8},"source":"src/main.js","original":{"line":8,"column":10}},{"generated":{"line":12,"column":10},"source":"src/main.js","original":{"line":8,"column":12}},{"generated":{"line":12,"column":13},"source":"src/main.js","original":{"line":6,"column":27}},{"name":"scene","generated":{"line":13,"column":0},"source":"src/main.js","original":{"line":9,"column":4}},{"name":"scene","generated":{"line":13,"column":2},"source":"src/main.js","original":{"line":9,"column":4}},{"generated":{"line":13,"column":7},"source":"src/main.js","original":{"line":9,"column":9}},{"generated":{"line":13,"column":9},"source":"src/main.js","original":{"line":9,"column":10}},{"name":"LoadScene","generated":{"line":13,"column":10},"source":"src/main.js","original":{"line":10,"column":8}},{"generated":{"line":13,"column":30},"source":"src/main.js","original":{"line":9,"column":10}},{"name":"MenuScene","generated":{"line":13,"column":32},"source":"src/main.js","original":{"line":11,"column":8}},{"generated":{"line":13,"column":52},"source":"src/main.js","original":{"line":9,"column":10}},{"name":"PlayScene","generated":{"line":13,"column":54},"source":"src/main.js","original":{"line":12,"column":8}},{"generated":{"line":13,"column":74},"source":"src/main.js","original":{"line":9,"column":10}},{"generated":{"line":13,"column":75},"source":"src/main.js","original":{"line":6,"column":27}},{"name":"physics","generated":{"line":14,"column":0},"source":"src/main.js","original":{"line":14,"column":4}},{"name":"physics","generated":{"line":14,"column":2},"source":"src/main.js","original":{"line":14,"column":4}},{"generated":{"line":14,"column":9},"source":"src/main.js","original":{"line":14,"column":11}},{"generated":{"line":14,"column":11},"source":"src/main.js","original":{"line":14,"column":13}},{"name":"default","generated":{"line":15,"column":0},"source":"src/main.js","original":{"line":15,"column":8}},{"name":"default","generated":{"line":15,"column":4},"source":"src/main.js","original":{"line":15,"column":8}},{"generated":{"line":15,"column":11},"source":"src/main.js","original":{"line":15,"column":15}},{"generated":{"line":15,"column":13},"source":"src/main.js","original":{"line":15,"column":17}},{"generated":{"line":15,"column":21},"source":"src/main.js","original":{"line":14,"column":13}},{"name":"arcade","generated":{"line":16,"column":0},"source":"src/main.js","original":{"line":16,"column":8}},{"name":"arcade","generated":{"line":16,"column":4},"source":"src/main.js","original":{"line":16,"column":8}},{"generated":{"line":16,"column":10},"source":"src/main.js","original":{"line":16,"column":14}},{"generated":{"line":16,"column":12},"source":"src/main.js","original":{"line":16,"column":16}},{"name":"debug","generated":{"line":17,"column":0},"source":"src/main.js","original":{"line":17,"column":12}},{"name":"debug","generated":{"line":17,"column":6},"source":"src/main.js","original":{"line":17,"column":12}},{"generated":{"line":17,"column":11},"source":"src/main.js","original":{"line":17,"column":17}},{"generated":{"line":17,"column":13},"source":"src/main.js","original":{"line":17,"column":19}},{"generated":{"line":18,"column":0},"source":"src/main.js","original":{"line":16,"column":16}},{"generated":{"line":19,"column":0},"source":"src/main.js","original":{"line":14,"column":13}},{"generated":{"line":20,"column":0},"source":"src/main.js","original":{"line":6,"column":27}},{"generated":{"line":20,"column":1},"source":"src/main.js","original":{"line":6,"column":11}},{"generated":{"line":20,"column":2},"source":"src/main.js","original":{"line":6,"column":0}},{"generated":{"line":21,"column":0},"source":"src/main.js","original":{"line":25,"column":0}}],"sources":{"src/main.js":"/** @types {import(\"../typings/phaser\")} */\nimport {LoadScene} from \"./scenes/LoadScene\";\nimport {MenuScene} from \"./scenes/MenuScene\";\nimport {PlayScene} from \"./scenes/PlayScene\";\n\nlet game = new Phaser.Game({\n    width: 800,\n    height: 600,\n    scene:[\n        LoadScene,\n        MenuScene,\n        PlayScene\n    ],\n    physics: {\n        default: \"arcade\",\n        arcade: {\n            debug: true\n        }\n    }\n});\n\n\n\n\n/*\n//import Life from './life.js';\nconst gameState = {}\nconst config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    backgroundColor: '#ababab',\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: 100,\n            debug: true\n        }\n    },\n\n    scene: {\n        preload,\n        create,\n        update\n    }\n\n\n};\nconst game = new Phaser.Game(config);\n\nlet slime = \"\";\nlet timer = 0;\nconst healthbar = 100;\n\nfunction preload () {\n    // preload images, sounds & other assets\n    //this.load.json('map', 'assets/grass.json')\n    this.load.image('tileset', 'assets/TilesetGrass/overworld_tileset_grass.png');\n    this.load.tilemapTiledJSON('map', 'assets/TilesetGrass/evo-tileset.json');\n    //this.load.spritesheet('tiles', 'assets/grass.png', {frameWidth: 64, frameHeight: 64})\n    this.load.multiatlas('slime', 'assets/slime.json', 'assets')\n    this.load.spritesheet('slime_back', 'assets/slime1_back.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_front', 'assets/slime1_front.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_side', 'assets/slime1_side.png', {frameWidth: 16, frameHeight: 16})\n    this.load.spritesheet('slime_explode', 'assets/slime_explode.png', {frameWidth: 16, frameHeight: 16})\n};\nfunction create () {\n\n\n    // Layers\n\n\n    // Add organism to scene (full spritesheet) -- .setBounce(10).setFriction(0)\n    this.slime = this.physics.add.sprite(400, 330,'slime', 'slime-05.png');\n    // label(this.slime)\n\n    // Create animations\n    this.anims.create({\n        key: 'idle',\n        frames: this.anims.generateFrameNames('slime', {prefix: 'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:5,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'north',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 1, end: 4, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'south',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'west',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-', start: 9, end: 12, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n\n    //Group of organisms\n    this.organisms = this.physics.add.group({\n        key: 'slime',\n        repeat: 4,\n        setXY: {\n            x: 400,\n            y: 300,\n            stepX: 80,\n            stepY: 20\n        }\n    });\n\n    //scale organism\n    // Phaser.Actions.ScaleXY(this.organisms.getChildren(), -0.10,-0.10);\n\n    // Takes an array of objects and passes each of them to the given callback.\n    Phaser.Actions.Call(this.organisms.getChildren(), function(organism) {\n        organism.speed = Math.random() * 2 + 1;\n        // make item interactive\n        organism.setInteractive();\n\n    }, this);\n\n    let locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n    this.orgLocations = this.add.group({\n        //\n    })\n\n    this.slime.speed = 2;\n    this.physics.world.bounds.width = map.widthInPixels-10;\n    this.physics.world.bounds.height = map.heightInPixels-10;\n    this.slime.setCollideWorldBounds(true);\n\n\n    \n\n\n    // Collision debugging (remove in production)\n    // const debugGraphics = this.add.graphics().setAlpha(0.75);\n    // treeLayer.renderDebug(debugGraphics, {\n    //     tileColor: null,\n    //     collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255),\n    //     faceColor: new Phaser.Display.Color(40, 39, 37, 255)\n    // });\n    \n    \n    \n};\nfunction update () {\n\n    // Slime movement\n    this.slime.setVelocityX(-64)\n    movementAnim(this.slime)\n\n        // Organism movement\n        let organisms = this.organisms.getChildren();\n        let numOrganisms = organisms.length;\n    \n        for (let i = 0; i < numOrganisms; i++) {\n\n            // movement\n            movementAnim(organisms[i]);\n  \n            if (timer < 10) {\n                if (i === 0 || i === 1) {\n                    organisms[i].setVelocityY(64);  \n                } else if (i === 2 || i === 3) {\n                    organisms[i].setVelocityX(64)\n                } else if (i === 5) {\n                    organisms[i].setVelocity(0,0)\n                }\n            }\n\n\n                if (organisms[i].y >= 599) {\n                    organisms[i].setVelocityY(-64)\n                    //organisms[i].anims.play('north', true);\n                } else if (organisms[i].y <= 1) {\n                    organisms[i].setVelocityY(64);\n                    //organisms[i].anims.play('south', true);\n                } else if (organisms[i].x >= 799) {\n                    organisms[i].setVelocityX(-64);\n                    //organisms[i].anims.play('west', true)\n                } else if (organisms[i].x <= 1) {\n                    organisms[i].setVelocityX(64);\n                    //organisms[i].anims.play('west', true)\n                    //organisms[i].flipX = true;\n                } else {\n                    randomMovement(organisms[i])\n                }\n                \n    // if (organisms[i].x >= this.organismMaxX && organisms[i].speed > 0) {\n            //     organisms[i].speed *= -0.25;\n            // } else if (organisms[i].x <= this.organismMinX && organisms[i].speed < 0) {\n            //     organisms[i].speed *= -0.25;\n            // }\n            timer++\n        };\n\n    //this.slime.y -= this.slime.speed\n    //this.slime.anims.play('north', true);\n\n}; \n\n\n\n\n\n\n// function label(obj) {\n//     const style = { font: \"10px Arial\", fill: \"#ffffff\"};\n//     obj.label_score = this.add.text(20, 20, \"0\", style);\n//     obj.hello_sprite.addChild(this.label_score)\n// }\n\n//locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n\n*/"},"lineCount":null}},"error":null,"hash":"5b911ce8f7d2c4b874e27399f4f01147","cacheData":{"env":{}}}