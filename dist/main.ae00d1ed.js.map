{"version":3,"sources":["src/CST.js","src/scenes/LoadScene.js","src/scenes/MenuScene.js","src/Sprite.js","src/scenes/PlayScene.js","src/main.js"],"names":["CST","SCENES","LOAD","MENU","PLAY","IMAGE","START","TITLE","AUDIO","SPRITE","SLIME","TEXT","INPUT","Scene","LoadScene","Phaser","key","window","chart","options","dataPacket","creatures","avgVision","avgSpeed","time","prop","load","setPath","image","audio","frameConfig","spritesheet","html","atlas","loadSprites","frameHeight","frameWidth","loadImages","loadHTML","loadingBar","add","graphics","fillStyle","color","on","percent","fillRect","game","renderer","height","width","console","log","file","src","scene","start","MenuScene","setOrigin","setDepth","text","fontFamily","fontSize","element","dom","createFromCache","addListener","slimeCount","mutationRate","treeCount","event","target","name","getChildByName","value","removeListener","Sprite","Physics","Arcade","x","y","texture","frame","sys","updateList","displayList","setScale","physics","world","enableBody","timeArray","timedAgeArray","generation","vision","maxHP","hp","speed","age","includes","push","nameCounter","offspring","organisms","create","food","rate","PlayScene","data","anims","frames","generateFrameNames","prefix","end","suffix","frameRate","repeat","tilemapTiledJSON","map","tilemap","tileset","addTilesetImage","createStaticLayer","trees","group","i","Math","RND","between","getChildren","setSize","gameTime","classType","Between","Actions","Call","organism","setInteractive","setBounce","setCollideWorldBounds","timerText","fill","playButton","addEvent","delay","callback","setText","callbackScope","alpha","clearAlpha","orgText","visible","orgLabel","setVisible","updateLabel","updateText","setAlpha","regrowTrees","overlap","collectTree","collider","org","randomMovement","updateOutput","timedUpdate","shift","loop","graphUpdate","pushGraph","delta","seconds","Date","getUTCSeconds","slimeOutput","numOrganisms","length","movementAnim","metabolise","senescense","cloneSprite","body","velocity","tree","distanceToObject","accelerateToObject","destroy","round","colorSlimes","pointer","gameObject","obj","active","play","flipX","d","setVelocityY","setVelocityX","setVelocity","sprite","disableBody","numtrees","ceil","obj1","obj2","distanceX","abs","setTint","mutate","random","orgArray","visionArray","speedArray","reduce","a","b","Game","parent","createContainer","default","arcade"],"mappings":"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","file":"main.ae00d1ed.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENES: {\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        PLAY: \"PLAY\"\r\n    },\r\n    IMAGE: {\r\n        START: \"button_info.png\",\r\n        TITLE: \"title_bg800.jpg\"\r\n    },\r\n    AUDIO: {\r\n        TITLE: \"tbd.mp3\"\r\n    },\r\n    SPRITE: {\r\n        SLIME: \"slime.png\"\r\n\r\n    },\r\n    TEXT: {\r\n        INPUT: \"inputs.html\"\r\n    }\r\n}\r\n","import { CST } from \"../CST\";\r\n\r\nexport class LoadScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.LOAD\r\n        })\r\n    }\r\n    init() {\r\n        window.chart = null;\r\n        window.options = null;\r\n        window.dataPacket = {\r\n            creatures : [],\r\n            avgVision : [],\r\n            avgSpeed : [],\r\n            time: []\r\n        }\r\n    }\r\n    loadImages() {\r\n        this.load.setPath(\"./assets/image\");\r\n\r\n        for (let prop in CST.IMAGE) {\r\n            this.load.image(CST.IMAGE[prop], CST.IMAGE[prop]);\r\n        }\r\n    }\r\n    loadAudio() {\r\n        this.load.setPath(\"./assets/audio\");\r\n\r\n        for (let prop in CST.AUDIO) {\r\n            this.load.audio(CST.AUDIO[prop], CST.AUDIO[prop]);\r\n        }\r\n    }\r\n    loadSprites(frameConfig) {\r\n        this.load.setPath(\"./assets/sprite\");\r\n\r\n        for (let prop in CST.SPRITE) {\r\n            this.load.spritesheet(CST.SPRITE[prop], CST.SPRITE[prop], frameConfig);\r\n        }\r\n    }\r\n    loadHTML() {\r\n        this.load.setPath(\"./assets/text\");\r\n\r\n        for (let prop in CST.TEXT) {\r\n            this.load.html(CST.TEXT[prop], CST.TEXT[prop]);\r\n        }\r\n    }\r\n    preload() {\r\n        // load image, spritesheet, sound\r\n        // this.loadAudio();\r\n        //this.load.spritesheet(\"slime\", \"./assets/sprite/slime.png\", {frameHeight: 16, frameWidth: 16});\r\n        //load atlases\r\n        this.load.atlas(\"slime\", \"./assets/sprite/slime.png\", \"./assets/sprite/slime.json\")\r\n\r\n        this.loadSprites({\r\n            frameHeight: 16,\r\n            frameWidth: 16\r\n        });\r\n        this.loadImages();\r\n        this.loadHTML();\r\n\r\n        // this.load.image(\"title_bg\", \"./assets/title_bg800.jpg\");\r\n\r\n        //this.load.audio(\"title_music\", \"./assets/some-song.mp3\")\r\n\r\n        // create loading bar\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff //white\r\n            }\r\n        })\r\n\r\n        /* \r\n        Loader Events:\r\n            complete - when done loading everything\r\n            progress - loader number progress in decimal\r\n        */\r\n\r\n        //simulate large load\r\n        /*\r\n        for (let i = 0; i < 100; i++) {\r\n            this.load.spritesheet(\"grass_tile\" + i, \"./assets/grass_tile.png\", {\r\n                frameHeight: 32,\r\n                frameWidth: 32\r\n            });\r\n        }\r\n        */\r\n        \r\n        this.load.on(\"progress\", (percent) => {\r\n            loadingBar.fillRect(0, this.game.renderer.height / 2, this.game.renderer.width * percent, 50);\r\n            console.log(percent);\r\n        })\r\n\r\n        this.load.on(\"complete\", () => {\r\n            //this.scene.start(CST.SCENES.MENU, \"Hello from Load Scene\")\r\n        });\r\n\r\n        this.load.on(\"load\", (file) => {\r\n            console.log(file.src)\r\n        })\r\n\r\n    }\r\n    create() {\r\n\r\n            this.scene.start(CST.SCENES.MENU)\r\n            \r\n    }\r\n\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class MenuScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.MENU\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n    preload() {\r\n        //this.load.html('infoform', './assets/text/inputs.html');\r\n    }\r\n    create() {\r\n        // Add title image\r\n        this.add.image(0,0, CST.IMAGE.TITLE).setOrigin(0).setDepth;\r\n        \r\n        let text = this.add.text(10, 10, '', { color: 'black', fontFamily: 'Arial', fontSize: '32px '});\r\n        \r\n        // Render input elements\r\n        let element = this.add.dom(this.game.renderer.width / 2, this.game.renderer.height / 2 + 150).createFromCache(CST.TEXT.INPUT).setDepth(2)\r\n        element.addListener('click');\r\n        this.slimeCount = \"\";\r\n        this.mutationRate = \"\";\r\n        this.treeCount = \"\";\r\n\r\n        // Create \"on click\" event to pass form settings to variables\r\n        element.on('click', function (event) {\r\n            if (event.target.name === 'submitButton') {\r\n\r\n                this.slimeCount = element.getChildByName('slimeCount').value;\r\n                this.mutationRate = element.getChildByName('mutationRate').value;\r\n                this.treeCount = element.getChildByName('treeCount').value;\r\n                \r\n                if (this.slimeCount.value !== '' && this.mutationRate.value !== '' && this.treeCount.value !== '') {\r\n                    element.removeListener('click');\r\n                    // Start \"PLAY\" scene and pass it form variables\r\n                    this.scene.start(CST.SCENES.PLAY, \r\n                        {\r\n                            slimeCount: this.slimeCount, \r\n                            mutationRate: this.mutationRate,\r\n                            treeCount: this.treeCount\r\n                        })\r\n                }\r\n            }  \r\n        }, this);\r\n\r\n        // // create audio\r\n        // this.sound.pauseOnBlur = false;\r\n        // this.sound.play(\"title_music\", {\r\n        //     loop: true\r\n        // })\r\n\r\n        /*\r\n            PointerEvents:\r\n                pointerover - hovering\r\n                pointerout - not hovering\r\n                pointerup - click and release\r\n                pointerdown - just  click\r\n\r\n        */\r\n\r\n    }\r\n\r\n}\r\n","export class Sprite extends Phaser.Physics.Arcade.Sprite {\r\n    /**\r\n     * \r\n     */\r\n    constructor(scene, x, y, texture, frame) {\r\n        super(scene, x, y, texture, frame);\r\n        scene.sys.updateList.add(this);\r\n        scene.sys.displayList.add(this);\r\n        this.setScale(1);\r\n        this.setOrigin(0, 0);\r\n        scene.physics.world.enableBody(this);\r\n\r\n        this.timeArray = [];\r\n        this.timedAgeArray = [];\r\n        this.generation = 1;\r\n        \r\n        this.vision = 0\r\n        this.maxHP = 150;\r\n        this.hp = 100;\r\n        this.speed = 0;\r\n        this.age = 0;\r\n        this.name = \"\"\r\n\r\n    };\r\n\r\n    senescense(time) {\r\n        // Organism aging; modifies life\r\n        if (time % 30 === 0 && this.timedAgeArray.includes(time) === false) {\r\n            this.timedAgeArray.push(time)\r\n            this.age += 1\r\n            //console.log(this.name + \" is now age: \" + this.age)\r\n            this.hp -= this.age\r\n            //this.maxHP -=5\r\n\r\n            // Lose 5 max health per \"year\" after age 5\r\n            if (this.age > 5) {\r\n                this.maxHP -= 10\r\n            }\r\n        }\r\n    };\r\n\r\n    reproduce(nameCounter, key ) {\r\n        // Modifies life; creates new instance of organism\r\n        if (this.age >= 2 && this.hp > 100) {\r\n            //let offspring = Object.assign(Object.create(Object.getPrototypeOf(this)), this)\r\n            let offspring = organisms.create(this.x, this.y, key)\r\n            this.hp = this.hp / 2;\r\n            offspring.hp = this.hp / 2;\r\n            offspring.name = \"Org\" + nameCounter;\r\n            \r\n            return offspring;\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n        \r\n    };\r\n\r\n    consume(food) {\r\n        // Restores health; chance increased by speed\r\n        // 80% base chance, each point of speed + 2%; 20% max\r\n    };\r\n\r\n    metabolise(rate, time) {\r\n        // Daily process which lowers health\r\n        // Increased by speed\r\n\r\n        if (time % 2 === 0 && this.timeArray.includes(time) === false) {\r\n            this.timeArray.push(time);\r\n            this.hp = this.hp - rate\r\n            //console.log(this.hp + \" HP Remaining for: \" + this.name)\r\n        }\r\n        \r\n    };\r\n\r\n}","import { CST } from \"../CST\";\r\nimport { Sprite } from \"../Sprite\";\r\n\r\nexport class PlayScene extends Phaser.Scene {\r\n \r\n    constructor() {\r\n        super({ \r\n            key: CST.SCENES.PLAY,\r\n         });\r\n    }\r\n\r\n    init(data) {\r\n        console.log('init', data);\r\n        this.slimeCount = data.slimeCount;\r\n        this.mutationRate = data.mutationRate\r\n        this.treeCount = data.treeCount\r\n        \r\n    }\r\n    preload() {\r\n\r\n    // Create animations\r\n    // -- Idle Animation\r\n    this.anims.create({\r\n        key: 'idle',\r\n        frames: this.anims.generateFrameNames('slime', {prefix: 'slime-0', start: 5, end: 8, suffix: '.png'}),\r\n        frameRate:5,\r\n        repeat: -1\r\n    })\r\n    // -- North Animation\r\n    this.anims.create({\r\n        key: 'north',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 1, end: 4, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    // -- South Animation\r\n    this.anims.create({\r\n        key: 'south',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 5, end: 8, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    // -- West Animation\r\n    this.anims.create({\r\n        key: 'west',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-', start: 9, end: 12, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    // Load map tiles\r\n    this.load.image('tileset', './assets/maps/overworld_tileset_grass.png');\r\n    this.load.tilemapTiledJSON('map', './assets/maps/evo-tileset.json');\r\n    this.load.image('tree', './assets/image/overworld-92.png');\r\n\r\n    // Ouput files loaded to console\r\n    // this.load.on(\"load\", (file) => {\r\n    //     console.log(file.src)\r\n    // })\r\n    \r\n    }\r\n    create() {\r\n        // Initialize map\r\n        let map = this.add.tilemap('map');\r\n        // Initialize tileset\r\n        let tileset = map.addTilesetImage('evo-default', 'tileset')\r\n\r\n        // Layers\r\n        let baseLayer = map.createStaticLayer(\"Base\", tileset, 0, 0).setDepth(-1);\r\n        //this.treeLayer = map.createStaticLayer(\"Trees\", tileset, 0, 0);\r\n        //let waterLayer = map.createStaticLayer(\"Water\", tileset, 0, 0);\r\n        //const structureLayer = map.createStaticLayer(\"Structures\", tileset, 0, 0).setDepth(0);\r\n\r\n        // Create empty physics group for trees\r\n        this.trees = this.physics.add.group()\r\n\r\n        // Add trees group to the window object to make accessible globally\r\n        window.trees = this.trees;\r\n\r\n        // Create n number of trees at random locations troughout the grid;\r\n        for (let i = 0; i < this.treeCount; i++) { // Default 120\r\n\r\n            let x = Phaser.Math.RND.between(0, 800);\r\n            let y = Phaser.Math.RND.between(0, 600);\r\n\r\n            this.trees.create(x, y, 'tree')\r\n        };\r\n\r\n        // Set tree hitbox size\r\n        for (let tree of this.trees.getChildren()) {\r\n            tree.setSize(10, 10)\r\n        };\r\n\r\n        this.gameTime = 0;\r\n        this.nameCounter = 0;\r\n        // Create organisms physics group and populate using this.slimeCount\r\n        this.organisms = this.physics.add.group({classType: Sprite})\r\n        for (let i = 0; i < this.slimeCount; i++) {\r\n            let x = Phaser.Math.RND.between(100, 500);\r\n            let y = Phaser.Math.RND.between(100, 300);\r\n\r\n            this.organisms.create(x, y, 'slime')\r\n            this.organisms.getChildren()[i].name = \"Org\" + this.nameCounter\r\n            this.organisms.getChildren()[i].speed = Phaser.Math.Between(0, 20)\r\n            this.organisms.getChildren()[i].vision = Phaser.Math.Between(0, 50)\r\n            this.nameCounter++ \r\n        };\r\n        // Add organisms group to the window object to make accessible globally\r\n        window.organisms = this.organisms\r\n\r\n        // Takes an array of objects and passes each of them to the given callback.\r\n        Phaser.Actions.Call(this.organisms.getChildren(), function(organism) {\r\n        // Make organisms interactive\r\n        organism.setInteractive();\r\n        // Set organism bounce\r\n        organism.setBounce(0.5,0.5)\r\n        // Set organism collision with world bounds\r\n        organism.setCollideWorldBounds(true);\r\n        }, this);\r\n\r\n        // Create world timer text object\r\n        let timerText = this.add.text(16, 16, 'Timer: ' + 0, { fontSize: '12px', fill: '#fff' })\r\n        let timer = this.time.addEvent({\r\n            delay:1000,\r\n            callback: () => {this.gameTime++; timerText.setText('Timer: ' + this.gameTime);},\r\n            callbackScope: this,\r\n            repeat: -1\r\n        });\r\n        \r\n        // Create button to show or hide organism text **FIX**\r\n        let playButton = this.add.image(150, 22, CST.IMAGE.START).setDepth(1).setScale(0.75);\r\n        playButton.alpha = 0.9;\r\n\r\n        playButton.setInteractive();\r\n\r\n        playButton.on(\"pointerover\", () => {\r\n            playButton.setScale(0.80)\r\n            playButton.clearAlpha();\r\n        })\r\n\r\n        playButton.on(\"pointerout\", () => {\r\n            playButton.setScale(0.75)\r\n            playButton.alpha = 0.9;\r\n            //this.scene.start();\r\n        })\r\n\r\n        playButton.on(\"pointerup\", (event) => {\r\n\r\n            if (this.orgText.visible) {\r\n                this.orgLabel.setVisible(false);\r\n                this.orgText.setVisible(false);\r\n                this.updateLabel.setVisible(false);\r\n                this.updateText.setVisible(false);\r\n            } else {\r\n                this.orgLabel.setVisible(true);\r\n                this.orgText.setVisible(true);\r\n                this.updateLabel.setVisible(true);\r\n                this.updateText.setVisible(true);  \r\n            }\r\n\r\n            playButton.setScale(0.75);\r\n            playButton.alpha = 0.5;\r\n        })\r\n\r\n        // Create current organisms text object\r\n        this.orgLabel = this.add.text(16, 42, 'THE LIVING', {fontSize: '13px', fill: '#000'}).setDepth(10).setVisible(false);\r\n        this.orgLabel.setAlpha(0.75);\r\n        this.orgText = this.add.text(16, 55, '', {fontSize: '12px', fill: '#fff'}).setDepth(10).setVisible(false);\r\n        this.orgText.setAlpha(0.75);\r\n        // Create organisms update text object\r\n        this.updateLabel = this.add.text(400, 42, 'UPDATES', {fontSize: '13px', fill: '#000'}).setDepth(10).setVisible(false);\r\n        this.updateLabel.setAlpha(0.75);\r\n        this.updateText = this.add.text(400, 55, '', { fontSize: '12px', fill: '#fff' }).setDepth(10).setVisible(false);\r\n        this.updateText.setAlpha(0.75);\r\n\r\n        // Respawn trees\r\n        let treeTimer = this.time.addEvent({\r\n            delay: 20000,\r\n            callback: this.regrowTrees,\r\n            callbackScope: this,\r\n            repeat: -1\r\n        });\r\n\r\n        // Map Collisions\r\n        //this.physics.add.collider(slime, this.treeLayer);\r\n        //this.physics.add.collider(slime, waterLayer);\r\n        //this.physics.add.collider(this.organisms, this.treeLayer);\r\n        this.physics.add.overlap(this.organisms, this.trees, this.collectTree, null, this);\r\n        //this.physics.add.collider(this.organisms, waterLayer);\r\n        this.physics.add.collider(this.organisms, this.organisms, ()=> {\r\n            for (let org of this.organisms.getChildren()) {\r\n                this.randomMovement(org);\r\n            }\r\n        });\r\n\r\n        // this.physics.add.collider(this.organisms, this.organisms, ()=> {\r\n        //     for (let org of this.organisms.getChildren()) {\r\n        //         this.randomMovement(org);\r\n        //     }\r\n        // });\r\n\r\n        // Create array to hold organism update data\r\n        this.updateOutput = [];\r\n        // Create timer that removes first item from array every 3 seconds \r\n        this.timedUpdate = this.time.addEvent({\r\n            delay: 3000,\r\n            callback: () => {this.updateOutput.shift()},\r\n            callbackScope: this,\r\n            loop: true\r\n        });\r\n        // Create timer that pushes graph data every 30 seconds\r\n        this.graphUpdate = this.time.addEvent({\r\n            delay: 30000,\r\n            callback: this.pushGraph,\r\n            callbackScope: this,\r\n            loop: true\r\n        })\r\n\r\n        /*\r\n        gameobject events:\r\n            animationstart\r\n            animationrepeat\r\n            animationupdate\r\n            animationcomplete\r\n        */\r\n\r\n    }\r\n    update(time, delta) { //delta 16.666 @ 60fps -- delta is fps in milliseconds\r\n        // this.physics.world.collide(slime, slime, (slime) => {\r\n        //     slime.destroy();\r\n        // })\r\n        this.seconds = new Date().getUTCSeconds();\r\n        this.slimeOutput = [];\r\n\r\n\r\n        this.timerText;\r\n        // this.movementAnim(slime);\r\n        // this.randomMovement(slime);\r\n\r\n        let organisms = this.organisms.getChildren();\r\n        // apply collision to group\r\n        //this.physics.world.collide(organisms)\r\n\r\n        // apply collision to group & slime\r\n        // this.physics.world.collide(organisms, slime, (organisms, slime)=>{\r\n        //     organisms.destroy()\r\n        //     slime.destroy()\r\n        // })\r\n\r\n        //console.log(slime.hp)\r\n        let numOrganisms = organisms.length;\r\n    \r\n        for (let i = 0; i < numOrganisms; i++) {\r\n            \r\n            if (organisms[i].hp <= 50) {\r\n                organisms[i].setScale(0.5);\r\n            } else if (organisms[i].hp > 50 && organisms[i].hp <= 75 ) {\r\n                organisms[i].setScale(0.75);\r\n            } else if (organisms[i].hp > 75 && organisms[i].hp <= 100 ) {\r\n                organisms[i].setScale(1.0);\r\n            } else if (organisms[i].hp > 100 && organisms[i].hp <= 125) {\r\n                organisms[i].setScale(1.25);\r\n            } else if (organisms[i].hp > 125 && organisms[i].hp <= 150) {\r\n                organisms[i].setScale(1.50);\r\n            }\r\n            \r\n            // if (slime.active === true) {\r\n            //     //this.physics.accelerateToObject(organisms[i], slime)\r\n            // }\r\n            //console.log(organisms[i].hp)\r\n\r\n            // movement\r\n            this.movementAnim(organisms[i]);\r\n            organisms[i].metabolise(2, this.gameTime)\r\n            organisms[i].senescense(this.gameTime)\r\n            this.cloneSprite(organisms[i])\r\n\r\n\r\n            if (organisms[i].body.velocity.x === 0 && organisms[i].body.velocity.y === 0 ) {\r\n                this.randomMovement(organisms[i]);\r\n            } else {\r\n                for (let tree of this.trees.getChildren()) {\r\n                    if (this.distanceToObject(organisms[i], tree) <= organisms[i].vision && tree.visible) {\r\n                        //organisms[i].setVelocity(0, 0)\r\n                        //console.log(this.distanceToObject(organisms[i], tree))\r\n                        //console.log(organisms[i].vision)\r\n                        this.physics.accelerateToObject(organisms[i], tree, 60, 25+organisms[i].speed, 25+organisms[i].speed)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        // Death loop\r\n        for (let org of this.organisms.getChildren()) {\r\n            if (org.hp <= 0) {\r\n                //console.log(org.name + \" is dead :( at age \" + org.age + \"| Vision: \" + org.vision + \"| Speed: \" + org.speed)\r\n                this.updateOutput.push(org.name + \" died at age \" + org.age)\r\n                org.destroy()\r\n                numOrganisms = organisms.length\r\n            }\r\n        };\r\n\r\n        // Update Organism list\r\n        for (let org of this.organisms.getChildren()) {\r\n            this.slimeOutput.push(org.name + ' Age: ' + org.age  + ' Gen: ' + org.generation + ' HP: ' + Math.round(org.hp) + ' Vision: ' + org.vision + ' Speed: ' + org.speed)\r\n        }\r\n        this.orgText.setText(this.slimeOutput);\r\n        this.updateText.setText(this.updateOutput);\r\n        if(this.updateOutput.length > 8) {\r\n            this.updateOutput.shift()\r\n        }\r\n        this.colorSlimes()\r\n\r\n    }\r\n\r\n    onObjectClicked(pointer, gameObject) {\r\n        gameObject.setScale(1.5);\r\n    }\r\n\r\n    movementAnim(obj) {\r\n        if (obj.active === true) {\r\n            if(obj.body.velocity.y > 0) {\r\n                obj.anims.play('south', true);\r\n            } else if (obj.body.velocity.y < 0) {\r\n                obj.anims.play('north', true);\r\n            } else if (obj.body.velocity.x < 0) {\r\n                obj.anims.play('west', true);\r\n                obj.flipX = false;\r\n            } else if (obj.body.velocity.x > 0) {\r\n                obj.anims.play('west', true);\r\n                obj.flipX = true;\r\n            } else {\r\n                obj.anims.play('idle', true);\r\n            }\r\n        }\r\n    }\r\n\r\n    randomMovement(obj) {\r\n            if (obj.active === true) {\r\n                const d = Phaser.Math.Between(0, 500)\r\n                if (d < 100 && d > 95) {\r\n                    obj.setVelocityY(35+obj.speed);\r\n                } else if (d < 95 && d > 90) {\r\n                    obj.setVelocityY(-35)-obj.speed;\r\n                } else if (d < 90 && d > 85) {\r\n                    obj.setVelocityX(35+obj.speed);\r\n                } else if (d < 85 && d > 80) {\r\n                    obj.setVelocityX(-35-obj.speed);\r\n                } else if (d < 80 && d > 75) {\r\n                    obj.setVelocity(0,0);\r\n                }\r\n            }\r\n    }\r\n\r\n    collectTree(sprite, tree) {\r\n        tree.disableBody(true, true);\r\n        sprite.hp += 10;\r\n        if (sprite.hp > 150) {\r\n            sprite.hp = 150;\r\n        }\r\n    };\r\n\r\n    regrowTrees() {\r\n        let trees = this.trees.getChildren()\r\n        let numtrees = trees.length\r\n\r\n        for (let i = 0; i < numtrees; i++) {\r\n            if (this.seconds < 20 && i <= Math.ceil(this.treeCount / 3)) {\r\n                trees[i].enableBody(false, trees[i].x, trees[i].y, true, true);\r\n            } else if (this.seconds > 20 && this.seconds < 40 && i > Math.ceil(this.treeCount/3) && i < Math.ceil(this.treeCount/1.5)) {\r\n                trees[i].enableBody(false, trees[i].x, trees[i].y, true, true);\r\n            } else if (this.seconds > 40 && i > Math.ceil(this.treeCount/1.5)) {\r\n                trees[i].enableBody(false, trees[i].x, trees[i].y, true, true);\r\n            }\r\n\r\n            //console.log(\"**Spring has sprung**\")\r\n        }\r\n    };\r\n\r\n    distanceToObject(obj1, obj2) {\r\n        let distanceX = Math.abs(obj1.x - obj2.x)\r\n        let distanceY = Math.abs(obj1.y - obj2.y)\r\n\r\n        return distanceX + distanceY\r\n    };\r\n\r\n    colorSlimes() {\r\n        for (let org of this.organisms.getChildren()) {\r\n            if (org.speed > 9 && org.speed < 20) {\r\n                org.setTint(0xff0000,0xffe600,0xffe600,0xffe600);\r\n            } else if (org.speed > 19) {\r\n                org.setTint(0xf75482)\r\n            }\r\n        }\r\n    }\r\n\r\n    cloneSprite(org) {\r\n        if (org.age >= 2 && org.hp > 100) {\r\n            let offspring = this.organisms.create(org.x, org.y, 'slime')\r\n            org.hp = org.hp / 2;\r\n            offspring.hp = org.hp / 2;\r\n            offspring.name = \"Org\" + this.nameCounter;\r\n            offspring.age = 0;\r\n            offspring.vision = org.vision\r\n            offspring.generation = org.generation + 1;\r\n            this.updateOutput.push(offspring.name + \" was born\")\r\n            let mutate = Math.random()\r\n            if ( mutate < (this.mutationRate*0.01)) { // 20% chance of mutation\r\n                if (mutate < 0.10) {\r\n                    offspring.vision -= 3;\r\n                    //console.log(\"**Vision Mutation -3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' vision mutation -3');\r\n                } else if (mutate > 0.10 && mutate < 0.21) {\r\n                    offspring.vision += 3;\r\n                    //console.log(\"**Vision Mutation +3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' vision mutation +3')\r\n                }\r\n            };\r\n            offspring.speed = org.speed\r\n            mutate = Math.random()\r\n            if ( mutate < (this.mutationRate*0.01)) { // Chance of mutation\r\n                if (mutate < 0.10) {\r\n                    offspring.speed -= 3;\r\n                    //console.log(\"**Speed Mutation -3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' speed mutation -3');\r\n                } else if (mutate > 0.10 && mutate < 0.21) {\r\n                    offspring.speed += 3;\r\n                    //console.log(\"**Speed Mutation +3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' speed mutation +3');\r\n                }\r\n            };\r\n            if (offspring.speed < 0) {\r\n                offspring.speed = 0;\r\n            }\r\n            if (offspring.vision < 0) {\r\n                offspring.vision = 0;\r\n            }\r\n            this.nameCounter++;\r\n            offspring.setInteractive()\r\n            offspring.setCollideWorldBounds(true);\r\n        }\r\n    }\r\n\r\n    pushGraph() {\r\n        let orgArray = this.organisms.getChildren()\r\n        let visionArray = [];\r\n        let speedArray = [];\r\n        for (let org of orgArray) {\r\n            visionArray.push(org.vision)\r\n            speedArray.push(org.speed)\r\n        }\r\n        window.dataPacket.avgVision.push(Math.round(visionArray.reduce((a,b)=>{return a+b})/visionArray.length))\r\n        window.dataPacket.avgSpeed.push(Math.round(speedArray.reduce((a,b)=>{return a+b})/speedArray.length))\r\n        window.dataPacket.creatures.push(orgArray.length)\r\n        window.dataPacket.time.push(this.gameTime)\r\n        if (window.dataPacket.time.length > 20) {\r\n            window.dataPacket.avgVision.shift()\r\n            window.dataPacket.avgSpeed.shift()\r\n            window.dataPacket.creatures.shift()\r\n            window.dataPacket.time.shift()\r\n        }\r\n        \r\n    }\r\n\r\n}\r\n","/** @types {import(\"../typings/phaser\")} */\nimport {LoadScene} from \"./scenes/LoadScene\";\nimport {MenuScene} from \"./scenes/MenuScene\";\nimport {PlayScene} from \"./scenes/PlayScene\";\n\nlet game = new Phaser.Game({\n    parent: 'phaser-tag',\n    width: 800,\n    height: 600,\n    dom: {\n        createContainer: true\n    },\n    scene:[\n        LoadScene,\n        MenuScene,\n        PlayScene\n    ],\n    physics: {\n        default: \"arcade\",\n        arcade: {\n            //debug: true\n        }\n    }\n});\n\n\n\n\n/*\n//import Life from './life.js';\nconst gameState = {}\nconst config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    backgroundColor: '#ababab',\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: 100,\n            debug: true\n        }\n    },\n\n    scene: {\n        preload,\n        create,\n        update\n    }\n\n\n};\nconst game = new Phaser.Game(config);\n\nlet slime = \"\";\nlet timer = 0;\nconst healthbar = 100;\n\nfunction preload () {\n    // preload images, sounds & other assets\n    //this.load.json('map', 'assets/grass.json')\n    this.load.image('tileset', 'assets/TilesetGrass/overworld_tileset_grass.png');\n    this.load.tilemapTiledJSON('map', 'assets/TilesetGrass/evo-tileset.json');\n    //this.load.spritesheet('tiles', 'assets/grass.png', {frameWidth: 64, frameHeight: 64})\n    this.load.multiatlas('slime', 'assets/slime.json', 'assets')\n    this.load.spritesheet('slime_back', 'assets/slime1_back.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_front', 'assets/slime1_front.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_side', 'assets/slime1_side.png', {frameWidth: 16, frameHeight: 16})\n    this.load.spritesheet('slime_explode', 'assets/slime_explode.png', {frameWidth: 16, frameHeight: 16})\n};\nfunction create () {\n\n\n    // Layers\n\n\n    // Add organism to scene (full spritesheet) -- .setBounce(10).setFriction(0)\n    this.slime = this.physics.add.sprite(400, 330,'slime', 'slime-05.png');\n    // label(this.slime)\n\n    // Create animations\n    this.anims.create({\n        key: 'idle',\n        frames: this.anims.generateFrameNames('slime', {prefix: 'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:5,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'north',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 1, end: 4, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'south',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'west',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-', start: 9, end: 12, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n\n    //Group of organisms\n    this.organisms = this.physics.add.group({\n        key: 'slime',\n        repeat: 4,\n        setXY: {\n            x: 400,\n            y: 300,\n            stepX: 80,\n            stepY: 20\n        }\n    });\n\n    //scale organism\n    // Phaser.Actions.ScaleXY(this.organisms.getChildren(), -0.10,-0.10);\n\n    // Takes an array of objects and passes each of them to the given callback.\n    Phaser.Actions.Call(this.organisms.getChildren(), function(organism) {\n        organism.speed = Math.random() * 2 + 1;\n        // make item interactive\n        organism.setInteractive();\n\n    }, this);\n\n    let locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n    this.orgLocations = this.add.group({\n        //\n    })\n\n    this.slime.speed = 2;\n    this.physics.world.bounds.width = map.widthInPixels-10;\n    this.physics.world.bounds.height = map.heightInPixels-10;\n    this.slime.setCollideWorldBounds(true);\n\n\n    \n\n\n    // Collision debugging (remove in production)\n    // const debugGraphics = this.add.graphics().setAlpha(0.75);\n    // treeLayer.renderDebug(debugGraphics, {\n    //     tileColor: null,\n    //     collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255),\n    //     faceColor: new Phaser.Display.Color(40, 39, 37, 255)\n    // });\n    \n    \n    \n};\nfunction update () {\n\n    // Slime movement\n    this.slime.setVelocityX(-64)\n    movementAnim(this.slime)\n\n        // Organism movement\n        let organisms = this.organisms.getChildren();\n        let numOrganisms = organisms.length;\n    \n        for (let i = 0; i < numOrganisms; i++) {\n\n            // movement\n            movementAnim(organisms[i]);\n  \n            if (timer < 10) {\n                if (i === 0 || i === 1) {\n                    organisms[i].setVelocityY(64);  \n                } else if (i === 2 || i === 3) {\n                    organisms[i].setVelocityX(64)\n                } else if (i === 5) {\n                    organisms[i].setVelocity(0,0)\n                }\n            }\n\n\n                if (organisms[i].y >= 599) {\n                    organisms[i].setVelocityY(-64)\n                    //organisms[i].anims.play('north', true);\n                } else if (organisms[i].y <= 1) {\n                    organisms[i].setVelocityY(64);\n                    //organisms[i].anims.play('south', true);\n                } else if (organisms[i].x >= 799) {\n                    organisms[i].setVelocityX(-64);\n                    //organisms[i].anims.play('west', true)\n                } else if (organisms[i].x <= 1) {\n                    organisms[i].setVelocityX(64);\n                    //organisms[i].anims.play('west', true)\n                    //organisms[i].flipX = true;\n                } else {\n                    randomMovement(organisms[i])\n                }\n                \n    // if (organisms[i].x >= this.organismMaxX && organisms[i].speed > 0) {\n            //     organisms[i].speed *= -0.25;\n            // } else if (organisms[i].x <= this.organismMinX && organisms[i].speed < 0) {\n            //     organisms[i].speed *= -0.25;\n            // }\n            timer++\n        };\n\n    //this.slime.y -= this.slime.speed\n    //this.slime.anims.play('north', true);\n\n}; \n\n\n\n\n\n\n// function label(obj) {\n//     const style = { font: \"10px Arial\", fill: \"#ffffff\"};\n//     obj.label_score = this.add.text(20, 20, \"0\", style);\n//     obj.hello_sprite.addChild(this.label_score)\n// }\n\n//locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n\n*/"]}