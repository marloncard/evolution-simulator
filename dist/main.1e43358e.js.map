{"version":3,"sources":["src/CST.js","src/scenes/LoadScene.js","src/scenes/MenuScene.js","src/Sprite.js","src/scenes/PlayScene.js","src/main.js"],"names":["CST","SCENES","LOAD","MENU","PLAY","IMAGE","START","TITLE","AUDIO","SPRITE","SLIME","TEXT","INPUT","LoadScene","key","window","dataPacket","creatures","avgVision","avgSpeed","time","load","setPath","prop","image","audio","frameConfig","spritesheet","html","atlas","loadSprites","frameHeight","frameWidth","loadImages","loadHTML","loadingBar","add","graphics","fillStyle","color","on","percent","fillRect","game","renderer","height","width","console","log","file","src","scene","start","Phaser","Scene","MenuScene","setOrigin","setDepth","playButton","setScale","alpha","text","fontFamily","fontSize","element","dom","createFromCache","addListener","slimeCount","mutationRate","treeCount","event","target","name","constructor","getChildByName","value","removeListener","setInteractive","clearAlpha","Sprite","x","y","texture","frame","sys","updateList","displayList","physics","world","enableBody","timeArray","timedAgeArray","generation","vision","maxHP","hp","speed","age","includes","push","nameCounter","offspring","organisms","create","food","rate","Physics","Arcade","PlayScene","data","anims","frames","generateFrameNames","prefix","end","suffix","frameRate","repeat","tilemapTiledJSON","map","tilemap","tileset","addTilesetImage","baseLayer","createStaticLayer","trees","group","i","Math","RND","between","getChildren","tree","setSize","gameTime","classType","Between","Actions","Call","organism","setBounce","setCollideWorldBounds","timerText","fill","timer","addEvent","delay","callback","setText","callbackScope","orgLabel","setAlpha","orgText","updateLabel","updateText","treeTimer","regrowTrees","overlap","collectTree","collider","org","randomMovement","updateOutput","timedUpdate","shift","loop","delta","seconds","Date","getUTCSeconds","slimeOutput","numOrganisms","length","movementAnim","metabolise","senescense","cloneSprite","body","velocity","distanceToObject","visible","accelerateToObject","destroy","round","colorSlimes","pointer","gameObject","obj","active","play","flipX","d","setVelocityY","setVelocityX","setVelocity","sprite","disableBody","numtrees","ceil","obj1","obj2","distanceX","abs","distanceY","setTint","mutate","random","Game","parent","createContainer","default","arcade","debug"],"mappings":";;AKCA;;AACA;;ALFO,AKGP,ILHaA,GAAG,GAAG;AACfC,ACDJ,ACAA,AEAA,EJCIA,MAAM,EAAE;AACJC,AKFR,ILEQA,IAAI,EAAE,MADF;AAEJC,AKER,ADJA,IJEQA,AKEJwC,ILFQ,AKEJ,ELFM,CKEH,IAAIU,CLJH,KKIS,CAAC2J,IAAX,CAAgB;ALDnB5M,AKEJ6M,EAAAA,ELFI7M,IAAI,AKEF,ELFI,AKEF,YADe;ALJf,AKMR0C,EAAAA,CLPe,IKOV,EAAE,GAFgB;ALCvBzC,AKEAwC,ELFAxC,AKEAwC,KLFK,CKEC,CLFC,CKEC,GAHe;ALEnBvC,AKEJ2D,EAAAA,ELFI3D,CKED,EAAE,ELFI,EAAE,WADJ;AAEHC,AKEA2M,ILFA3M,AKEA2M,KLFK,EAAE,QKEQ,EAAE;ALJd,AKGF,GLTU,AKKQ;ALKvB1M,AKEA2C,ELFA3C,AKEA2C,KLFK,AKEA,ELFE,AKED,CACFtC,oBADE,EAEF0C,oBAFE,EAGFsD,oBAHE,CAPiB;ALMnBtG,AKMJiF,EAAAA,ELNIjF,KAAK,AKMF,ELNI,AKMF;ALPF,AKQH4M,GLlBW,CKkBXA,OAAO,EAAE,QADJ;ALJT1M,AKMI2M,ELNJ3M,EKMI2M,ILNE,EAAE,AKME,EAAE;ALLR1M,AKMI2M,ILNJ3M,EKMI2M,GLNC,EAAE,AKME,EAAE;ALPP,AKMI,GLnBG;AAiBf1M,AKAS,ELATA,IAAI,EAAE;AACFC,AKbmB,CAAhB,CAAX,ELaQA,KAAK,EAAE;AADL,AKWV;AL5BmB,CAAZ,GGAMoE;;IFEAnE,ACAA0C;;IECAsD;ADFT;;AFEA,ACAA,uBDAc,ACAA;ACCd,AFDc,ACAA,kBCCF1D,KAAZ,EAAmB8B,CAAnB,EAAsBC,CAAtB,EAAyBC,OAAzB,EAAkCC,KAAlC,EAAyC;AAAA,ACCzC,uBAAc;AHFA,ACAA,AEEA,kFHDJ,ACAA;ACA+B,AFCjCtE,ACAAA,MDAAA,ACAAA,GDAG,ACAA,EDAEd,ACAAA,SDAIC,ACAAA,MDAJ,ACAA,CDAWC,ACAAC;ADDd,ACAA,AECI,KHFA,ACAA,6EEGJ;ADDN,AFEH,ACAA,AEAOW,MAAAA,GAAG,EAAEd,SAAIC,MAAJ,CAAWG,qDDFd+C,KAAN,EAAa8B,CAAb,EAAgBC,CAAhB,EAAmBC,OAAnB,EAA4BC,KAA5B;AACAjC,ACAM,IDANA,CCDU,IDCL,CAACkC,GAAN,CAAUC,UAAV,CAAqBlD,GAArB;AACAe,ACEH,IDFGA,KAAK,CAACkC,GAAN,CAAUE,WAAV,CAAsBnD,GAAtB;;AACA,UAAKuB,QAAL,CAAc,CAAd,OFAG,ACAA,CAEN;ADDG5C,MAAAA,MAAM,CAACC,UAAP,GAAoB;AEApB,AFCIC,QAAAA,EEDCuC,OFCQ,EEDb,AFCgB,CEDD,AFCE,CEDjB,CFCgB,CEDE,CAAlB,AFCoB,CGCnBsD,CHDe,EAAO,EAAP,CADI,AGEb;AHAH5F,AGCJ6B,MAAAA,EHDI7B,KGCG,CAAC8B,GHDK,AGCb,CAAY,CHDI,CAAC,CAAD,EAAG,CGCnB,CHDgB,CGCI8D,CHDE,EAAN,CAFI,ACEd,AECN,CFAA;ACFA3D,AFEIhC,ACCP,AEAG,IDHAgC,IFEIhC,CEFC,CAACqE,CCGDpB,KHDO,CEFZ,CAAcqB,AFEC,CAAC,EAAD,AGCf,EDHA,AFEmB,CEFCC,ACGFoB,CHDH,EAAO,CGCA,CHDP,AGCQ1C,CHJH,IECpB,KCGA;ADDA,AFCIhD,AGCJ,QHDIA,EEDCuE,CCEAtB,CHDG,EAAE,CAAC,GAAD,CEDV,CFCgB,EEDC,CFCP,AGCV,CDFA,CFCqB,CGCDyC,EHDV,EGCc,CAACzC,YAAzB;ADDA,AFJoB,AGMpB,OHNA,GEIKuB,CCEAtB,SAAL,GDFA,ACEiBwC,GDFI,CCEA,CDFrB,ACEsBxC,SAAtB;ADDA,AFCH,AGEGvD,MAAAA,IDHK8E,ECGC,CAAC7E,ODHP,GAAkB,ACGlB,CDHA,ECGoB,GFHf;ACEL,ADFK,AEIDC,QAAAA,EDFC6E,MAAL,CCEa,EDFC,ACEE,CDFhB,ACEiB,EAAD,EAAI,EAAJ,EAAO,EAAP,CADI;ADApB,ACEI5E,QAAAA,EDFC6E,KAAL,ECEa,CDFA,CCEG,CAAC,CDFjB,ACEgB,EAAG,EAAH,EAAM,EAAN,CAFI;ADCpB,ADHA,AEKI5E,QAAAA,EDFC6E,CDHA5D,CCGL,EDHA,CCGU,ADHDZ,CEKG,EDFZ,ACEe,CAAC,CFLhB,CAAe,AEKA,CFLf,CEKmB,CFLF,CAAjB,AEKe,EFLKxB,AEKE,EAAP,CAHK,GHDX,GCDeK,KAAJ,CAAUE,KAA9B,EAAqCiD,SAArC,CAA+C,CAA/C,EAAkDC,QAAlD;ACIA,AFFA,ACCA,AEGIrC,QAAAA,EDFC6E,ADDDvC,CDDCrC,CGIG,EAAE,CDFV,AFFA,AGIW,CHJDC,EEEG,ACEH,CDFV,CDDc,AEGE,GHJhB,ACCiB,AEGP,CHJQ,CGIG,GFHCc,AEGZ,GFHO,CAASZ,KAAT,CAAe,EDDhC,GCCqCmB,IAAL,CAAUC,QAAV,CAAmBE,KAAnB,GAA2B,CAA1C,EAA6C,KAAKH,IAAL,CAAUC,QAAV,CAAmBC,MAAnB,GAA4B,CAA5B,GAAgC,EAA7E,EAAiF7C,SAAIK,KAAJ,CAAUC,KAA3F,EAAkGmD,QAAlG,CAA2G,CAA3G,EAA8GE,QAA9G,CAAuH,IAAvH,CAAjB;ACEA,ADDAD,AEFoB,MFEpBA,CEFA,GDGKwC,GAAL,GAAW,ADDD,CCCV,ADDWtC,KAAX,GAAmB,GAAnB;ACEA,AFFA,ACCA,AEGH,UDFQa,ADDDZ,CDDC,GEEL,ADDQ,CDDCtC,EEEG,ADDD,ECCX,AFFA,GCCgBa,CDDCpC,ECCN,CAAS6D,IAAT,CAAc,CDDJxD,CCCV,EAAkB,EDD7B,ACCW,EDDiB,ACCK,qBAAtB,EAA6C;AChBnB,AFgBjC,ACAsDkC,QAAAA,KDAjDlB,ACAsD,EAAE,EDA7D,CAAUG,ICA0C,CDApD,CAAgBxB,SAAIK,KAAJ,CAAUkB,IAAV,CAAhB,EAAiCvB,SAAIK,KAAJ,CAAUkB,IAAV,CAAjC;AEGP,AFFI,ACDyEuC,QAAAA,UAAU,EAAE,OAA9B;ADE3D,ACFkGC,QAAAA,QAAQ,EAAE,YEInG;AFJkD,AEM5D,OFNe,CAAX,CANK,CAQL;AEKJ,WAAKgD,KAAL,CAAWP,MAAX,CAAkB;AFJd,AEKA1F,QAAAA,EFLIkD,CEKD,EAAE,IFLM,EEIG,CFJA,KAAK5B,GAAL,CAAS6B,ECEpB7C,CFFK,ACAM,CAAa,ICElB,CDFuBuB,IAAL,CAAUC,QAAV,CAAmBE,KAAnB,GAA2B,CAAxC,EAA2C,KAAKH,IAAL,CAAUC,QAAV,CAAmBC,MAAnB,GAA4B,CAA5B,GAAgC,GAA3E,EAAgFqB,eAAhF,CAAgGlE,SAAIW,IAAJ,CAASC,KAAzG,EAAgH6C,QAAhH,CAAyH,CAAzH,CAAd;ACGJ,AFFI,ACAAO,AEKAgD,MFLAhD,EEKAgD,GHLK3F,ECAE,CAAC8C,AEKF,CHLN,CAAU7C,AGKF,KAAKyF,EHLb,CAAkB,CCAlB,CAAoB,AEKZ,CAAWE,MFLnB,ODAA,KGKQ,CAA8B,OAA9B,EAAuC;ADFnD,ADFI,AEIgDC,UDFhD9F,ACEgD8F,CFJ3C9C,GCED,ECEkD,CDF/C,CCEiD,CDFxD,EDFA,GCEc,ADFI,CCElB,CDFA,CEI+C,EDF5B,KAAKwB,aAAL,CAAmBO,QAAnB,CAA4B/E,IAA5B,MAAsC,KAA7D,EAAoE;AAChE,AFFA,ACAA,AEGmEgC,UAAAA,CHH9D,ACAAiB,ECEAuB,EFFIrE,AGG+D,EAAE,CAA3B,CHH/C,IAAiBvB,ACAjB,GCEA,ADFoB,CCEDoG,CDFnB,GCEA,CAAwBhF,AFFHZ,IEErB,CFFA,EAA4B;AEG5B,AFFI,ACAJ,AEE6E2G,UAAAA,CFFxE7C,ECEA4B,AFFI7E,AGEuE,EAAE,CDAlF,ACA+C,CHF3C,CAAUI,EEEF,ADFZ,CCEA,CAFgE,CAGhE,AFHI,ACAa,CDAGzB,CCApB,QDAwBQ,KAAJ,CAAUe,IAAV,CAAhB,EAAiCvB,SAAIQ,KAAJ,CAAUe,IAAV,CAAjC;AACH,ACEDyC,AEDqFoD,MFCrFpD,IEDqFoD,GFC9E,CAAC5E,EAAR,AED2F,CFChF,CEDkF,MFC7F,EAAoB,UAAU+B,KAAV,EAAiB;ACCrC,AFFH,ACEO,AEF2C,SAAvC,CAFM,EFINA,CCAHyB,EAAL,EDAa,CAACxB,CCAH,KAAK0B,ADAR,CAAazB,ECArB,CAJgE,CAKhE,ADDQ,KAAsB,cAA1B,EAA0C;ACG9C,ADFQ1B,AEFRsE,QAAAA,EFEQtE,OAAO,AEFN,CFEOC,CEFN,CAHI,CFKN,CAAY,SAASgB,OAArB;AACAjB,AEFRuE,QAAAA,EFEQvE,IEFF,EAAE,CFEO,AEFN,CFEOC,GAAR,CAAY,KAAK0B,WAAL,CAAiBD,IAA7B;ACER,ADDQ1B,AEPM,OAAlB,GFOYA,ECCJ,KAAKmD,ADDM,CAAClD,ECCZ,CDDI,CAAYuB,CCCL,CAAf,EAAkB,CDDO,CAACC,IDJlB9C,ECIY,CAAagD,UDJZ,CCID,CAAyBD,IAArC;ACEJ,AFLJ,ACIQ,AEFZ,WHFSpD,AGEJ0F,IDGQhB,AFLT,ACIa3B,CDJH9C,AGEd,CAAWkF,GDGH,GFLJ,AGEJ,CDGsB,AFLA,AGEJ,CFEN,CCCJ,EDDsBxC,OAAO,CAACW,KDJlC,SCI0B,CAAuB,YAAvB,EAAqCC,KAAvD;ACEP,ADDO,AEFR9D,QAAAA,GAAG,EAAE,EFEQuD,KEHC,OFGN,GAAoBL,OAAO,CAACW,cAAR,CAAuB,cAAvB,EAAuCC,KAA3D;ACEX,AFLG,ACIQ,AEFRoC,QAAAA,GHFK,GGEC,CHFGzF,ACII+C,CEFL,GHFR,EGEayC,EHFI/G,CCIT,EEFA,CFEiBgE,AEFNiD,KHFExG,ECIW,CAACkE,GDJjC,EAA6B,KGErB,CAA8B,GFEb,CAAuB,GEFxC,EAAuC,MFEtB,EAAoCC,KAArD;ACEf,AFLW,ACII7B,AEHwCmE,UFGxCnE,AEHwCmE,GHDvC7F,GGC6C,CHDlD,ACIW,CDJDM,ACIEqB,AEHuC,GFG/C,CAAY,KAAKoB,AEHsB,EHD3C,CAAsBpE,OCIlB,EDJsBS,MAAJ,CAAWc,IAAX,CAAtB,EAAwCvB,SAAIS,MAAJ,CAAWc,IAAX,CAAxC,EAA0DG,WAA1D;AACH,AGAiE0B,UAAAA,KAAK,EAAE,CAA1B;AHClD,ACIW,AELoE+D,UAAAA,GAAG,CFKnE,CELqE,CAAlC,GFK9B/C,UAAL,CAAgBQ,KAAhB,KAA0B,EAA1B,IAAgC,KAAKP,YAAL,CAAkBO,KAAlB,KAA4B,EAA5D,IAAkE,KAAKN,SAAL,CAAeM,KAAf,KAAyB,EAA/F,EAAmG;AAC/FZ,AENwEoD,UAAAA,EFMxEpD,IEN8E,EAAE,CFMzE,CAACa,UCAlBwB,IDAU,CAAuB,OAAvB,CCAGvF,KAAM;AACzB,ADAgBiC,AEPmC,SAAvC,CAFM,EFSFA,OAAO,CAACC,GAAR,CAAY,KAAKoB,UAAjB;ACChB,ADAgBrB,AEPZsE,QAAAA,EDOA,EDAYtE,GCAPmD,ECPI,CDOT,CDAmB,AEPT,CFOUlD,CEVN,CDUF,CAAZ,ADAY,CAAY,GCAP,IFNV,CEMegD,EAAL,GAAU,GAA/B,CDAgB,CCAoB;AAChC,AFNA,ACMYjD,AEPZuE,QAAAA,GHCKjG,CCMO0B,EEPN,CHCN,CAAUzB,AGDF,CAAC,EFOU,CAAC0B,GDNpB,ACMY,CDNM,ACMM,SAASgB,MDNjC,CCMY;ACCZ,ADAYjB,AEZE,OAAlB,KDYQuD,ADAQvD,OAAO,CAACC,CCAP,EDAD,CCAIuD,ADAQ,KAAK7B,ICAJ,CAAC8B,MAAV,ADAQ,CCAS,ADAQ/B,IAA7B,CCA0BQ,CAAtB,EAAyB,KAAKC,CAA9B,EAAiCpE,GAAjC,CAAhB;AACA,AFNA,ACOY,AERhB,WHCS,AGDJiG,EDOIf,EAAL,AFNSzE,CGDb,CFQqB4B,AERVqD,CDOG,CFNV,GCOY,CCDGR,AFNEhG,ACOMoD,AER3B,CAAkB,CDOJ,GAAU,ADCR,CCDZ,ADC6BpD,GDPRW,IAArB,EAA2B,ACOMV,MAAJ,CAAWG,IAA5B,EACI;ACDhBkG,AFNI,ACQgBlC,AETpBtD,QDOAwF,ACPAxF,GAAG,EHCMO,AGDJ,CFSe+C,GCFX,AFNL,CEMM4B,AFNIpE,EEMd,ACRc,EHEV,CEMW,AFNI5B,CCQW,EAAE,ECFZgG,EAAL,CDEsB5B,CDRdzD,CEME,CAAzB,EFNmB,CAASY,IAAT,ACOH,CDPZ,EAA+BvB,SAAIW,IAAJ,CAASY,IAAT,CAA/B;AEOJ+E,AFNC,ACQmBjC,AETpB2C,QDOAV,ACPAU,MFSoB3C,AETd,EAAE,CDOC,CAACI,GCPGsC,CDOb,GAAiB,CDEe,AETxB,CAAWE,CFSe,KCFTZ,ADEchC,WCFvC,CDAgB,AEPR,CAA8B,OAA9B,EAAuC;ADS/C,AFPH,ACQuBC,AEV4B4C,UAAAA,IFU5B5C,CCDbgC,CCT+C,EAAC,KFU1B,CCD7B,CDC+B,EEVgB,GFUXhC;ACAvC,ADHmB,AEPkDlB,ODEtE,GCFsEA,GDU/D,ADJS,EEN2D,EAAE,CAA1B;ADW/C,ADGS,AEdmE+D,UAAAA,GAAG,EDWxE,ACX0E,CAAlC,GDW/C;AACH,ADIQ,AE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","file":"main.1e43358e.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENES: {\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        PLAY: \"PLAY\"\r\n    },\r\n    IMAGE: {\r\n        START: \"start.png\",\r\n        TITLE: \"title_bg800.jpg\"\r\n    },\r\n    AUDIO: {\r\n        TITLE: \"tbd.mp3\"\r\n    },\r\n    SPRITE: {\r\n        SLIME: \"slime.png\"\r\n\r\n    },\r\n    TEXT: {\r\n        INPUT: \"inputs.html\"\r\n    }\r\n}\r\n","import { CST } from \"../CST\";\r\n\r\nexport class LoadScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.LOAD\r\n        })\r\n    }\r\n    init() {\r\n        window.dataPacket = {\r\n            creatures : [10,20,30],\r\n            avgVision : [7,11,15],\r\n            avgSpeed : [10,11,19],\r\n            time: [100, 200, 300]\r\n        }\r\n    }\r\n    loadImages() {\r\n        this.load.setPath(\"./assets/image\");\r\n\r\n        for (let prop in CST.IMAGE) {\r\n            this.load.image(CST.IMAGE[prop], CST.IMAGE[prop]);\r\n        }\r\n    }\r\n    loadAudio() {\r\n        this.load.setPath(\"./assets/audio\");\r\n\r\n        for (let prop in CST.AUDIO) {\r\n            this.load.audio(CST.AUDIO[prop], CST.AUDIO[prop]);\r\n        }\r\n    }\r\n    loadSprites(frameConfig) {\r\n        this.load.setPath(\"./assets/sprite\");\r\n\r\n        for (let prop in CST.SPRITE) {\r\n            this.load.spritesheet(CST.SPRITE[prop], CST.SPRITE[prop], frameConfig);\r\n        }\r\n    }\r\n    loadHTML() {\r\n        this.load.setPath(\"./assets/text\");\r\n\r\n        for (let prop in CST.TEXT) {\r\n            this.load.html(CST.TEXT[prop], CST.TEXT[prop]);\r\n        }\r\n    }\r\n    preload() {\r\n        // load image, spritesheet, sound\r\n        // this.loadAudio();\r\n        //this.load.spritesheet(\"slime\", \"./assets/sprite/slime.png\", {frameHeight: 16, frameWidth: 16});\r\n        //load atlases\r\n        this.load.atlas(\"slime\", \"./assets/sprite/slime.png\", \"./assets/sprite/slime.json\")\r\n\r\n        this.loadSprites({\r\n            frameHeight: 16,\r\n            frameWidth: 16\r\n        });\r\n        this.loadImages();\r\n        this.loadHTML();\r\n\r\n        // this.load.image(\"title_bg\", \"./assets/title_bg800.jpg\");\r\n        // this.load.image(\"play_button\", \"./assets/start.png\")\r\n\r\n        //this.load.audio(\"title_music\", \"./assets/some-song.mp3\")\r\n\r\n        // create loading bar\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff //white\r\n            }\r\n        })\r\n\r\n        /* \r\n        Loader Events:\r\n            complete - when done loading everything\r\n            progress - loader number progress in decimal\r\n        */\r\n\r\n        //simulate large load\r\n        /*\r\n        for (let i = 0; i < 100; i++) {\r\n            this.load.spritesheet(\"grass_tile\" + i, \"./assets/grass_tile.png\", {\r\n                frameHeight: 32,\r\n                frameWidth: 32\r\n            });\r\n        }\r\n        */\r\n        \r\n\r\n\r\n        this.load.on(\"progress\", (percent) => {\r\n            loadingBar.fillRect(0, this.game.renderer.height / 2, this.game.renderer.width * percent, 50);\r\n            console.log(percent);\r\n        })\r\n\r\n        this.load.on(\"complete\", () => {\r\n            //this.scene.start(CST.SCENES.MENU, \"Hello from Load Scene\")\r\n        });\r\n\r\n        this.load.on(\"load\", (file) => {\r\n            console.log(file.src)\r\n        })\r\n\r\n    }\r\n    create() {\r\n\r\n            this.scene.start(CST.SCENES.MENU)\r\n            \r\n    }\r\n\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class MenuScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.MENU\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n    preload() {\r\n        //this.load.html('infoform', './assets/text/inputs.html');\r\n    }\r\n    create() {\r\n        this.add.image(0,0, CST.IMAGE.TITLE).setOrigin(0).setDepth;\r\n        \r\n\r\n        let playButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2 + 20, CST.IMAGE.START).setDepth(1).setScale(0.10);\r\n        playButton.alpha = 0.9;\r\n        let text = this.add.text(10, 10, 'Evolution Simulator', { color: 'black', fontFamily: 'Arial', fontSize: '32px '});\r\n        \r\n        // Input elements\r\n        let element = this.add.dom(this.game.renderer.width / 2, this.game.renderer.height / 2 + 100).createFromCache(CST.TEXT.INPUT).setDepth(2)\r\n        element.addListener('click');\r\n        this.slimeCount = \"\";\r\n        this.mutationRate = \"\";\r\n        this.treeCount = \"\";\r\n\r\n\r\n        element.on('click', function (event) {\r\n            if (event.target.name === 'submitButton') {\r\n                console.log(this === element)\r\n                console.log(this.constructor.name)\r\n                console.log(event.target.constructor.name)\r\n                this.slimeCount = element.getChildByName('slimeCount').value;\r\n                this.mutationRate = element.getChildByName('mutationRate').value;\r\n                this.treeCount = element.getChildByName('treeCount').value;\r\n                console.log(this.slimeCount)\r\n                \r\n                if (this.slimeCount.value !== '' && this.mutationRate.value !== '' && this.treeCount.value !== '') {\r\n                    element.removeListener('click');\r\n                    console.log(this.slimeCount)\r\n                    console.log(\"clickety click!\")\r\n                    console.log(this === element)\r\n                    console.log(this.constructor.name)\r\n         \r\n                    this.scene.start(CST.SCENES.PLAY, \r\n                        {\r\n                            slimeCount: this.slimeCount, \r\n                            mutationRate: this.mutationRate,\r\n                            treeCount: this.treeCount\r\n                        })\r\n        \r\n                    \r\n                }\r\n\r\n            }\r\n            \r\n        }, this);\r\n\r\n\r\n\r\n\r\n        // // create audio\r\n        // this.sound.pauseOnBlur = false;\r\n        // this.sound.play(\"title_music\", {\r\n        //     loop: true\r\n        // })\r\n\r\n        /*\r\n            PointerEvents:\r\n                pointerover - hovering\r\n                pointerout - not hovering\r\n                pointerup - click and release\r\n                pointerdown - just  click\r\n\r\n        */\r\n\r\n        playButton.setInteractive();\r\n\r\n        playButton.on(\"pointerover\", () => {\r\n            playButton.setScale(0.12)\r\n            playButton.clearAlpha();\r\n        })\r\n\r\n        playButton.on(\"pointerout\", () => {\r\n            playButton.setScale(0.10)\r\n            playButton.alpha = 0.9;\r\n            //this.scene.start();\r\n        })\r\n\r\n        playButton.on(\"pointerup\", (event) => {\r\n\r\n\r\n            console.log(this.constructor.name)\r\n            this.scene.start(CST.SCENES.PLAY, \r\n                {\r\n                    slimeCount: this.slimeCount, \r\n                    mutationRate: this.mutationRate,\r\n                    treeCount: this.treeCount\r\n                })\r\n            playButton.setScale(0.10);\r\n            playButton.clearAlpha();\r\n        })\r\n    }\r\n\r\n    // update () {\r\n        \r\n    //     console.log(this.slimeCount.value)\r\n    // }\r\n}\r\n","export class Sprite extends Phaser.Physics.Arcade.Sprite {\r\n    /**\r\n     * \r\n     */\r\n    constructor(scene, x, y, texture, frame) {\r\n        super(scene, x, y, texture, frame);\r\n        scene.sys.updateList.add(this);\r\n        scene.sys.displayList.add(this);\r\n        this.setScale(1);\r\n        this.setOrigin(0, 0);\r\n        scene.physics.world.enableBody(this);\r\n\r\n        this.timeArray = [];\r\n        this.timedAgeArray = [];\r\n        this.generation = 1;\r\n        \r\n        this.vision = 0\r\n        this.maxHP = 150;\r\n        this.hp = 100;\r\n        this.speed = 0;\r\n        this.age = 0;\r\n        this.name = \"\"\r\n\r\n    }\r\n\r\nsenescense(time) {\r\n    // Organism aging; modifies life\r\n    if (time % 30 === 0 && this.timedAgeArray.includes(time) === false) {\r\n        this.timedAgeArray.push(time)\r\n        this.age += 1\r\n        //console.log(this.name + \" is now age: \" + this.age)\r\n        this.hp -= this.age\r\n        //this.maxHP -=5\r\n\r\n        // Lose 5 max health per \"year\" after age 5\r\n        if (this.age > 5) {\r\n            this.maxHP -= 10\r\n        }\r\n    }\r\n}\r\n\r\nreproduce(nameCounter, key ) {\r\n    // Modifies life; creates new instance of organism\r\n    if (this.age >= 2 && this.hp > 100) {\r\n        //let offspring = Object.assign(Object.create(Object.getPrototypeOf(this)), this)\r\n        let offspring = organisms.create(this.x, this.y, key)\r\n        this.hp = this.hp / 2;\r\n        offspring.hp = this.hp / 2;\r\n        offspring.name = \"Org\" + nameCounter;\r\n        \r\n        return offspring;\r\n    } else {\r\n        return null;\r\n    }\r\n\r\n    \r\n}\r\n\r\nconsume(food) {\r\n    // Restores health; chance increased by speed\r\n    // 80% base chance, each point of speed + 2%; 20% max\r\n}\r\n\r\nmetabolise(rate, time) {\r\n    // Daily process which lowers health\r\n    // Increased by speed\r\n\r\n    if (time % 2 === 0 && this.timeArray.includes(time) === false) {\r\n        this.timeArray.push(time);\r\n        this.hp = this.hp - rate\r\n        //console.log(this.hp + \" HP Remaining for: \" + this.name)\r\n    }\r\n    \r\n}\r\n\r\n}","import { CST } from \"../CST\";\r\nimport { Sprite } from \"../Sprite\";\r\n\r\nexport class PlayScene extends Phaser.Scene {\r\n \r\n    constructor() {\r\n        super({ \r\n            key: CST.SCENES.PLAY,\r\n         });\r\n    }\r\n\r\n    init(data) {\r\n        console.log('init', data);\r\n        this.slimeCount = data.slimeCount;\r\n        this.mutationRate = data.mutationRate\r\n        this.treeCount = data.treeCount\r\n        \r\n        window.dataPacket = {\r\n            creatures : [10,20,30],\r\n            avgVision : [7,11,15],\r\n            avgSpeed : [10,11,19],\r\n            time: [100, 200, 300]\r\n        }\r\n    }\r\n    preload() {\r\n\r\n    // Create animations\r\n    this.anims.create({\r\n        key: 'idle',\r\n        frames: this.anims.generateFrameNames('slime', {prefix: 'slime-0', start: 5, end: 8, suffix: '.png'}),\r\n        frameRate:5,\r\n        repeat: -1\r\n    })\r\n    this.anims.create({\r\n        key: 'north',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 1, end: 4, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    this.anims.create({\r\n        key: 'south',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 5, end: 8, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    this.anims.create({\r\n        key: 'west',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-', start: 9, end: 12, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    // Load map tiles\r\n    this.load.image('tileset', './assets/maps/overworld_tileset_grass.png');\r\n    this.load.tilemapTiledJSON('map', './assets/maps/evo-tileset.json');\r\n    this.load.image('tree', './assets/image/overworld-92.png');\r\n\r\n    // Ouput files loaded to console\r\n    this.load.on(\"load\", (file) => {\r\n        console.log(file.src)\r\n    })\r\n    \r\n    }\r\n    create() {\r\n        \r\n        //const map = this.make.tilemap({ key: 'map'});\r\n        let map = this.add.tilemap('map');\r\n        //const tileset = map.addTilesetImage('evo-default', 'tileset');\r\n        let tileset = map.addTilesetImage('evo-default', 'tileset')\r\n\r\n        // Layers\r\n        let baseLayer = map.createStaticLayer(\"Base\", tileset, 0, 0).setDepth(-1);\r\n        //this.treeLayer = map.createStaticLayer(\"Trees\", tileset, 0, 0);\r\n        //let waterLayer = map.createStaticLayer(\"Water\", tileset, 0, 0);\r\n        //const structureLayer = map.createStaticLayer(\"Structures\", tileset, 0, 0).setDepth(0);\r\n\r\n        this.trees = this.physics.add.group()\r\n\r\n        // Add trees group to the window object to make accessible in console\r\n        window.trees = this.trees;\r\n\r\n        // Create n number of trees at random locations troughout the grid;\r\n        for (let i = 0; i < this.treeCount; i++) { // Default 120\r\n\r\n            let x = Phaser.Math.RND.between(0, 800);\r\n            let y = Phaser.Math.RND.between(0, 600);\r\n\r\n            this.trees.create(x, y, 'tree')\r\n        };\r\n\r\n        // Set tree hitbox size\r\n        for (let tree of this.trees.getChildren()) {\r\n            tree.setSize(10, 10)\r\n        };\r\n\r\n\r\n        this.gameTime = 0;\r\n        this.nameCounter = 0;\r\n        //let slime = this.physics.add.sprite(100, 330,'slime', 'slime-05.png');\r\n\r\n        //let slime = new Sprite(this, 100, 100, CST.SPRITE.SLIME)\r\n        //this.physics.add.existing() //manual add\r\n        //window.slime = slime; // Add slime to window object to access from console.\r\n        //slime.setInteractive().setAlpha(0.5)\r\n        //this.input.on(\"gameobjectdown\", this.onObjectClicked);\r\n        \r\n\r\n        this.organisms = this.physics.add.group({classType: Sprite})\r\n        for (let i = 0; i < this.slimeCount; i++) {\r\n            let x = Phaser.Math.RND.between(100, 500);\r\n            let y = Phaser.Math.RND.between(100, 300);\r\n\r\n            this.organisms.create(x, y, 'slime')\r\n            this.organisms.getChildren()[i].name = \"Org\" + this.nameCounter\r\n            this.organisms.getChildren()[i].speed = Phaser.Math.Between(0, 20)\r\n            this.organisms.getChildren()[i].vision = Phaser.Math.Between(0, 50)\r\n            this.nameCounter++ \r\n        };\r\n\r\n        window.organisms = this.organisms\r\n\r\n        // Takes an array of objects and passes each of them to the given callback.\r\n        Phaser.Actions.Call(this.organisms.getChildren(), function(organism) {\r\n        // make item interactive\r\n        organism.setInteractive();\r\n        organism.setBounce(0.5,0.5)\r\n        organism.setCollideWorldBounds(true);\r\n        \r\n        }, this);\r\n\r\n        //this.body.onWorldBounds = true;\r\n        // this.physics.arcade.collide(this.organisms), (organism) => {\r\n        //     organism.destroy();\r\n        // }\r\n        //slime.setCollideWorldBounds(true);\r\n\r\n\r\n        // Text objects\r\n        let timerText = this.add.text(16, 16, 'Timer: ' + 0, { fontSize: '12px', fill: '#fff' })\r\n        let timer = this.time.addEvent({\r\n            delay:1000,\r\n            callback: () => {this.gameTime++; timerText.setText('Timer: ' + this.gameTime);},\r\n            callbackScope: this,\r\n            repeat: -1\r\n        });\r\n        this.orgLabel = this.add.text(16, 42, 'THE LIVING', {fontSize: '13px', fill: '#000'}).setDepth(10);\r\n        this.orgLabel.setAlpha(0.75);\r\n        this.orgText = this.add.text(16, 55, '', {fontSize: '12px', fill: '#fff'}).setDepth(10);\r\n        this.orgText.setAlpha(0.75);\r\n\r\n        this.updateLabel = this.add.text(400, 42, 'UPDATES', {fontSize: '13px', fill: '#000'}).setDepth(10);\r\n        this.updateLabel.setAlpha(0.75);\r\n        this.updateText = this.add.text(400, 55, '', { fontSize: '12px', fill: '#fff' }).setDepth(10);\r\n        this.updateText.setAlpha(0.75);\r\n\r\n        // Respawn trees\r\n        let treeTimer = this.time.addEvent({\r\n            delay: 20000,\r\n            callback: this.regrowTrees,\r\n            callbackScope: this,\r\n            repeat: -1\r\n        });\r\n\r\n        // Map Collisions\r\n        //this.physics.add.collider(slime, this.treeLayer);\r\n        //this.physics.add.collider(slime, waterLayer);\r\n        //this.physics.add.collider(this.organisms, this.treeLayer);\r\n        this.physics.add.overlap(this.organisms, this.trees, this.collectTree, null, this);\r\n        //this.physics.add.collider(this.organisms, waterLayer);\r\n        this.physics.add.collider(this.organisms, this.organisms, ()=> {\r\n            for (let org of this.organisms.getChildren()) {\r\n                this.randomMovement(org);\r\n            }\r\n        });\r\n\r\n        // this.physics.add.collider(this.organisms, this.organisms, ()=> {\r\n        //     for (let org of this.organisms.getChildren()) {\r\n        //         this.randomMovement(org);\r\n        //     }\r\n        // });\r\n\r\n        this.updateOutput = [];\r\n        this.timedUpdate = this.time.addEvent({\r\n            delay: 3000,\r\n            callback: () => {this.updateOutput.shift()},\r\n            callbackScope: this,\r\n            loop: true\r\n        });\r\n\r\n        // Specify property\r\n        //this.treeLayer.setCollisionByProperty({collide:true});\r\n        //waterLayer.setCollisionByProperty({collide:true});\r\n        \r\n        // Map events \r\n            //by index\r\n        // this.treeLayer.setTileIndexCallback([96], (Sprite) => {\r\n        //     //console.log(Sprite.x, Sprite.y)\r\n        //     Sprite.hp += 10\r\n        // }, this)\r\n\r\n\r\n\r\n            //treeLayer.removeTileAt(tile.x, tile.y)\r\n\r\n        //this.treeLayer.renderDebug(this.add.graphics)\r\n         /*\r\n        gameobject events:\r\n            animationstart\r\n            animationrepeat\r\n            animationupdate\r\n            animationcomplete\r\n        */\r\n        //    slime.on(\"animationupdate\", () => {\r\n        //        console.log(\"ahhhhh\")\r\n        //    });\r\n        //    slime.on(\"animationupdate\", () => {\r\n        //     console.log(\"LEVELUP\")\r\n        // });\r\n        \r\n\r\n    }\r\n    update(time, delta) { //delta 16.666 @ 60fps -- delta is fps in milliseconds\r\n        // this.physics.world.collide(slime, slime, (slime) => {\r\n        //     slime.destroy();\r\n        // })\r\n        this.seconds = new Date().getUTCSeconds();\r\n        this.slimeOutput = [];\r\n\r\n\r\n        this.timerText;\r\n        // this.movementAnim(slime);\r\n        // this.randomMovement(slime);\r\n\r\n        let organisms = this.organisms.getChildren();\r\n        // apply collision to group\r\n        //this.physics.world.collide(organisms)\r\n\r\n        // apply collision to group & slime\r\n        // this.physics.world.collide(organisms, slime, (organisms, slime)=>{\r\n        //     organisms.destroy()\r\n        //     slime.destroy()\r\n        // })\r\n\r\n        //console.log(slime.hp)\r\n        let numOrganisms = organisms.length;\r\n    \r\n        for (let i = 0; i < numOrganisms; i++) {\r\n            \r\n            if (organisms[i].hp <= 50) {\r\n                organisms[i].setScale(0.5);\r\n            } else if (organisms[i].hp > 50 && organisms[i].hp <= 75 ) {\r\n                organisms[i].setScale(0.75);\r\n            } else if (organisms[i].hp > 75 && organisms[i].hp <= 100 ) {\r\n                organisms[i].setScale(1.0);\r\n            } else if (organisms[i].hp > 100 && organisms[i].hp <= 125) {\r\n                organisms[i].setScale(1.25);\r\n            } else if (organisms[i].hp > 125 && organisms[i].hp <= 150) {\r\n                organisms[i].setScale(1.50);\r\n            }\r\n            \r\n            // if (slime.active === true) {\r\n            //     //this.physics.accelerateToObject(organisms[i], slime)\r\n            // }\r\n            //console.log(organisms[i].hp)\r\n\r\n            // movement\r\n            this.movementAnim(organisms[i]);\r\n            organisms[i].metabolise(2, this.gameTime)\r\n            organisms[i].senescense(this.gameTime)\r\n            this.cloneSprite(organisms[i])\r\n            // if (weeBabe != null) {\r\n            //     weeBabe.setInteractive();\r\n\r\n            // }\r\n\r\n            if (organisms[i].body.velocity.x === 0 && organisms[i].body.velocity.y === 0 ) {\r\n                this.randomMovement(organisms[i]);\r\n            } else {\r\n                for (let tree of this.trees.getChildren()) {\r\n                    if (this.distanceToObject(organisms[i], tree) <= organisms[i].vision && tree.visible) {\r\n                        //organisms[i].setVelocity(0, 0)\r\n                        //console.log(this.distanceToObject(organisms[i], tree))\r\n                        //console.log(organisms[i].vision)\r\n                        this.physics.accelerateToObject(organisms[i], tree, 60, 25+organisms[i].speed, 25+organisms[i].speed)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        // Death loop\r\n        for (let org of this.organisms.getChildren()) {\r\n            if (org.hp <= 0) {\r\n                //console.log(org.name + \" is dead :( at age \" + org.age + \"| Vision: \" + org.vision + \"| Speed: \" + org.speed)\r\n                this.updateOutput.push(org.name + \" died at age \" + org.age)\r\n                org.destroy()\r\n                numOrganisms = organisms.length\r\n            }\r\n        };\r\n\r\n        // Update Organism list\r\n        for (let org of this.organisms.getChildren()) {\r\n            this.slimeOutput.push(org.name + ' Age: ' + org.age  + ' Gen: ' + org.generation + ' HP: ' + Math.round(org.hp) + ' Vision: ' + org.vision + ' Speed: ' + org.speed)\r\n        }\r\n        this.orgText.setText(this.slimeOutput);\r\n        this.updateText.setText(this.updateOutput);\r\n        if(this.updateOutput.length > 8) {\r\n            this.updateOutput.shift()\r\n        }\r\n        this.colorSlimes()\r\n\r\n    }\r\n\r\n    onObjectClicked(pointer, gameObject) {\r\n        gameObject.setScale(1.5);\r\n    }\r\n\r\n    movementAnim(obj) {\r\n        if (obj.active === true) {\r\n            if(obj.body.velocity.y > 0) {\r\n                obj.anims.play('south', true);\r\n            } else if (obj.body.velocity.y < 0) {\r\n                obj.anims.play('north', true);\r\n            } else if (obj.body.velocity.x < 0) {\r\n                obj.anims.play('west', true);\r\n                obj.flipX = false;\r\n            } else if (obj.body.velocity.x > 0) {\r\n                obj.anims.play('west', true);\r\n                obj.flipX = true;\r\n            } else {\r\n                obj.anims.play('idle', true);\r\n            }\r\n        }\r\n    }\r\n\r\n    randomMovement(obj) {\r\n            if (obj.active === true) {\r\n                const d = Phaser.Math.Between(0, 500)\r\n                if (d < 100 && d > 95) {\r\n                    obj.setVelocityY(35+obj.speed);\r\n                } else if (d < 95 && d > 90) {\r\n                    obj.setVelocityY(-35)-obj.speed;\r\n                } else if (d < 90 && d > 85) {\r\n                    obj.setVelocityX(35+obj.speed);\r\n                } else if (d < 85 && d > 80) {\r\n                    obj.setVelocityX(-35-obj.speed);\r\n                } else if (d < 80 && d > 75) {\r\n                    obj.setVelocity(0,0);\r\n                }\r\n            }\r\n    }\r\n\r\n    collectTree(sprite, tree) {\r\n        tree.disableBody(true, true);\r\n        sprite.hp += 10;\r\n        if (sprite.hp > 150) {\r\n            sprite.hp = 150;\r\n        }\r\n    };\r\n\r\n    regrowTrees() {\r\n        let trees = this.trees.getChildren()\r\n        let numtrees = trees.length\r\n\r\n        for (let i = 0; i < numtrees; i++) {\r\n            if (this.seconds < 20 && i <= Math.ceil(this.treeCount / 3)) {\r\n                trees[i].enableBody(false, trees[i].x, trees[i].y, true, true);\r\n            } else if (this.seconds > 20 && this.seconds < 40 && i > Math.ceil(this.treeCount/3) && i < Math.ceil(this.treeCount/1.5)) {\r\n                trees[i].enableBody(false, trees[i].x, trees[i].y, true, true);\r\n            } else if (this.seconds > 40 && i > Math.ceil(this.treeCount/1.5)) {\r\n                trees[i].enableBody(false, trees[i].x, trees[i].y, true, true);\r\n            }\r\n\r\n            //console.log(\"**Spring has sprung**\")\r\n        }\r\n    };\r\n\r\n    distanceToObject(obj1, obj2) {\r\n        let distanceX = Math.abs(obj1.x - obj2.x)\r\n        let distanceY = Math.abs(obj1.y - obj2.y)\r\n\r\n        return distanceX + distanceY\r\n    };\r\n\r\n    colorSlimes() {\r\n        for (let org of this.organisms.getChildren()) {\r\n            if (org.speed > 9 && org.speed < 20) {\r\n                org.setTint(0xff0000,0xffe600,0xffe600,0xffe600);\r\n            } else if (org.speed > 19) {\r\n                org.setTint(0xf75482)\r\n            }\r\n        }\r\n    }\r\n\r\n    cloneSprite(org) {\r\n        if (org.age >= 2 && org.hp > 100) {\r\n            let offspring = this.organisms.create(org.x, org.y, 'slime')\r\n            org.hp = org.hp / 2;\r\n            offspring.hp = org.hp / 2;\r\n            offspring.name = \"Org\" + this.nameCounter;\r\n            offspring.age = 0;\r\n            offspring.vision = org.vision\r\n            offspring.generation = org.generation + 1;\r\n            this.updateOutput.push(offspring.name + \" was born\")\r\n            let mutate = Math.random()\r\n            if ( mutate < (this.mutationRate*0.01)) { // 20% chance of mutation\r\n                if (mutate < 0.10) {\r\n                    offspring.vision -= 3;\r\n                    //console.log(\"**Vision Mutation -3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' vision mutation -3');\r\n                } else if (mutate > 0.10 && mutate < 0.21) {\r\n                    offspring.vision += 3;\r\n                    //console.log(\"**Vision Mutation +3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' vision mutation +3')\r\n                }\r\n            };\r\n            offspring.speed = org.speed\r\n            mutate = Math.random()\r\n            if ( mutate < (this.mutationRate*0.01)) { // Chance of mutation\r\n                if (mutate < 0.10) {\r\n                    offspring.speed -= 3;\r\n                    //console.log(\"**Speed Mutation -3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' speed mutation -3');\r\n                } else if (mutate > 0.10 && mutate < 0.21) {\r\n                    offspring.speed += 3;\r\n                    //console.log(\"**Speed Mutation +3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' speed mutation +3');\r\n                }\r\n            };\r\n            if (offspring.speed < 0) {\r\n                offspring.speed = 0;\r\n            }\r\n            if (offspring.vision < 0) {\r\n                offspring.vision = 0;\r\n            }\r\n            this.nameCounter++;\r\n            offspring.setInteractive()\r\n            offspring.setCollideWorldBounds(true);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n}\r\n","/** @types {import(\"../typings/phaser\")} */\nimport {LoadScene} from \"./scenes/LoadScene\";\nimport {MenuScene} from \"./scenes/MenuScene\";\nimport {PlayScene} from \"./scenes/PlayScene\";\n\nlet game = new Phaser.Game({\n    parent: 'phaser-tag',\n    width: 800,\n    height: 600,\n    dom: {\n        createContainer: true\n    },\n    scene:[\n        LoadScene,\n        MenuScene,\n        PlayScene\n    ],\n    physics: {\n        default: \"arcade\",\n        arcade: {\n            debug: true\n        }\n    }\n});\n\n\n\n\n/*\n//import Life from './life.js';\nconst gameState = {}\nconst config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    backgroundColor: '#ababab',\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: 100,\n            debug: true\n        }\n    },\n\n    scene: {\n        preload,\n        create,\n        update\n    }\n\n\n};\nconst game = new Phaser.Game(config);\n\nlet slime = \"\";\nlet timer = 0;\nconst healthbar = 100;\n\nfunction preload () {\n    // preload images, sounds & other assets\n    //this.load.json('map', 'assets/grass.json')\n    this.load.image('tileset', 'assets/TilesetGrass/overworld_tileset_grass.png');\n    this.load.tilemapTiledJSON('map', 'assets/TilesetGrass/evo-tileset.json');\n    //this.load.spritesheet('tiles', 'assets/grass.png', {frameWidth: 64, frameHeight: 64})\n    this.load.multiatlas('slime', 'assets/slime.json', 'assets')\n    this.load.spritesheet('slime_back', 'assets/slime1_back.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_front', 'assets/slime1_front.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_side', 'assets/slime1_side.png', {frameWidth: 16, frameHeight: 16})\n    this.load.spritesheet('slime_explode', 'assets/slime_explode.png', {frameWidth: 16, frameHeight: 16})\n};\nfunction create () {\n\n\n    // Layers\n\n\n    // Add organism to scene (full spritesheet) -- .setBounce(10).setFriction(0)\n    this.slime = this.physics.add.sprite(400, 330,'slime', 'slime-05.png');\n    // label(this.slime)\n\n    // Create animations\n    this.anims.create({\n        key: 'idle',\n        frames: this.anims.generateFrameNames('slime', {prefix: 'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:5,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'north',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 1, end: 4, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'south',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'west',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-', start: 9, end: 12, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n\n    //Group of organisms\n    this.organisms = this.physics.add.group({\n        key: 'slime',\n        repeat: 4,\n        setXY: {\n            x: 400,\n            y: 300,\n            stepX: 80,\n            stepY: 20\n        }\n    });\n\n    //scale organism\n    // Phaser.Actions.ScaleXY(this.organisms.getChildren(), -0.10,-0.10);\n\n    // Takes an array of objects and passes each of them to the given callback.\n    Phaser.Actions.Call(this.organisms.getChildren(), function(organism) {\n        organism.speed = Math.random() * 2 + 1;\n        // make item interactive\n        organism.setInteractive();\n\n    }, this);\n\n    let locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n    this.orgLocations = this.add.group({\n        //\n    })\n\n    this.slime.speed = 2;\n    this.physics.world.bounds.width = map.widthInPixels-10;\n    this.physics.world.bounds.height = map.heightInPixels-10;\n    this.slime.setCollideWorldBounds(true);\n\n\n    \n\n\n    // Collision debugging (remove in production)\n    // const debugGraphics = this.add.graphics().setAlpha(0.75);\n    // treeLayer.renderDebug(debugGraphics, {\n    //     tileColor: null,\n    //     collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255),\n    //     faceColor: new Phaser.Display.Color(40, 39, 37, 255)\n    // });\n    \n    \n    \n};\nfunction update () {\n\n    // Slime movement\n    this.slime.setVelocityX(-64)\n    movementAnim(this.slime)\n\n        // Organism movement\n        let organisms = this.organisms.getChildren();\n        let numOrganisms = organisms.length;\n    \n        for (let i = 0; i < numOrganisms; i++) {\n\n            // movement\n            movementAnim(organisms[i]);\n  \n            if (timer < 10) {\n                if (i === 0 || i === 1) {\n                    organisms[i].setVelocityY(64);  \n                } else if (i === 2 || i === 3) {\n                    organisms[i].setVelocityX(64)\n                } else if (i === 5) {\n                    organisms[i].setVelocity(0,0)\n                }\n            }\n\n\n                if (organisms[i].y >= 599) {\n                    organisms[i].setVelocityY(-64)\n                    //organisms[i].anims.play('north', true);\n                } else if (organisms[i].y <= 1) {\n                    organisms[i].setVelocityY(64);\n                    //organisms[i].anims.play('south', true);\n                } else if (organisms[i].x >= 799) {\n                    organisms[i].setVelocityX(-64);\n                    //organisms[i].anims.play('west', true)\n                } else if (organisms[i].x <= 1) {\n                    organisms[i].setVelocityX(64);\n                    //organisms[i].anims.play('west', true)\n                    //organisms[i].flipX = true;\n                } else {\n                    randomMovement(organisms[i])\n                }\n                \n    // if (organisms[i].x >= this.organismMaxX && organisms[i].speed > 0) {\n            //     organisms[i].speed *= -0.25;\n            // } else if (organisms[i].x <= this.organismMinX && organisms[i].speed < 0) {\n            //     organisms[i].speed *= -0.25;\n            // }\n            timer++\n        };\n\n    //this.slime.y -= this.slime.speed\n    //this.slime.anims.play('north', true);\n\n}; \n\n\n\n\n\n\n// function label(obj) {\n//     const style = { font: \"10px Arial\", fill: \"#ffffff\"};\n//     obj.label_score = this.add.text(20, 20, \"0\", style);\n//     obj.hello_sprite.addChild(this.label_score)\n// }\n\n//locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n\n*/"]}