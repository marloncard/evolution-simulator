{"version":3,"sources":["src/CST.js","src/scenes/LoadScene.js","src/scenes/MenuScene.js","src/Sprite.js","src/scenes/PlayScene.js","src/main.js"],"names":["CST","SCENES","LOAD","MENU","PLAY","IMAGE","START","TITLE","AUDIO","SPRITE","SLIME","LoadScene","key","load","setPath","prop","image","audio","frameConfig","spritesheet","atlas","loadSprites","frameHeight","frameWidth","loadImages","loadingBar","add","graphics","fillStyle","color","on","percent","fillRect","game","renderer","height","width","console","log","file","src","scene","start","Phaser","Scene","MenuScene","setOrigin","playButton","setDepth","setScale","alpha","setInteractive","clearAlpha","Sprite","x","y","texture","frame","sys","updateList","displayList","physics","world","enableBody","timeArray","timedAgeArray","generation","vision","maxHP","hp","speed","age","name","time","includes","push","nameCounter","offspring","organisms","create","food","rate","Physics","Arcade","PlayScene","anims","frames","generateFrameNames","prefix","end","suffix","frameRate","repeat","tilemapTiledJSON","map","tilemap","tileset","addTilesetImage","baseLayer","createStaticLayer","trees","group","window","i","Math","RND","between","gameTime","classType","getChildren","Between","Actions","Call","organism","setBounce","setCollideWorldBounds","timerText","text","fontSize","fill","timer","addEvent","delay","callback","setText","callbackScope","orgLabel","setAlpha","orgText","updateLabel","updateText","treeTimer","regrowTrees","overlap","collectTree","collider","org","randomMovement","updateOutput","timedUpdate","shift","loop","delta","slimeOutput","numOrganisms","length","movementAnim","metabolise","senescense","cloneSprite","body","velocity","tree","distanceToObject","visible","accelerateToObject","destroy","round","colorSlimes","pointer","gameObject","obj","active","play","flipX","d","setVelocityY","setVelocityX","setVelocity","sprite","disableBody","obj1","obj2","distanceX","abs","distanceY","setTint","mutate","random","Game","default","arcade"],"mappings":";;AKCA;;AACA;;ALFO,AKGP,ILHaA,GAAG,GAAG;AACfC,ACDJ,ACAA,AEAA,EJCIA,MAAM,EAAE;AACJC,AKFR,ILEQA,IAAI,EAAE,MADF;AAEJC,AKER,ADJA,IJEQA,AKEJ8B,ILFQ,AKEJ,ELFM,CKEH,IAAIU,CLJH,KKIS,CAACwI,IAAX,CAAgB;ALDnB/K,AKEJgC,EAAAA,ELFIhC,GKEC,CLFG,CKED,CLFG,EKCa;ALJf,AKMR+B,EAAAA,CLPe,KKOT,EAAE,GAFe;ALCvB9B,AKEAoC,ELFApC,AKEAoC,KLFK,AKEA,ELFE,AKED,CACF9B,oBADE,EAEFkC,oBAFE,EAGFuC,oBAHE,CAHiB;ALEnB9E,AKMJuD,EAAAA,ELNIvD,KAAK,AKMF,ELNI,AKMF,WLPF;AAEHC,AKMA6K,ILNA7K,AKMA6K,KLNK,EAAE,AKMA,EAAE,QADJ;ALPF,AKSHC,GLfW,CKeXA,MAAM,EAAE,CACJ;ALNR7K,AKKY,ELLZA,KAAK,EAAE;AACHD,AKEK,ILFLA,KAAK,EAAE;AADJ,AKLgB,CAAhB,CAAX,CLLmB;AAafE,AKWJ,ELXIA,MAAM,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH;AAbO,CAAZ;;;IGAM2C;;IFEA1C,ACAAkC;;IECAuC;ADFT;;AFEA,ACAA,uBDAc,ACAA;ACCd,AFDc,ACAA,kBCCF3C,KAAZ,EAAmBa,CAAnB,EAAsBC,CAAtB,EAAyBC,OAAzB,EAAkCC,KAAlC,EAAyC;AAAA,ACCzC,uBAAc;AHFA,ACAA,AEEA,kFHDJ,ACAA;ACA+B,AFCjC7C,ACAAA,MDAAA,ACAAA,GDAG,ACAA,EDAEZ,ACAAA,SDAIC,ACAAA,MDAJ,ACAA,CDAWC,ACAAC;ADDd,ACAA,AECI,KHFA,ACAA,6EEGJ;ADDN,AFEH,ACAA,AEAOS,MAAAA,GAAG,EAAEZ,SAAIC,MAAJ,CAAWG,qDDFdqC,KAAN,EAAaa,CAAb,EAAgBC,CAAhB,EAAmBC,OAAnB,EAA4BC,KAA5B;AACAhB,ACAM,IDANA,CCDU,IDCL,CAACiB,GAAN,CAAUC,UAAV,CAAqBjC,GAArB;AACAe,ACEH,IDFGA,KAAK,CAACiB,GAAN,CAAUE,WAAV,CAAsBlC,GAAtB;;AACA,UAAKuB,QAAL,CAAc,CAAd,OFAG,ACAA,CDEN,ACAA;;ACDG,UAAKH,SAAL,CAAe,CAAf,EAAkB,CAAlB,MCEM;AAEV,6BFFS,IDAI;AEDTL,AFEA,ACDK,AEGT,IDJIA,KAAK,CAACoB,CFEDhD,AGEJwE,IHFD,CAAUvE,AGEd,CDJI,ACIOiE,CDJOjB,KAAd,AFEA,AGEJ,CDJwBC,AFEF,AGEJ,UDJd,MFEA;AEAA,ACGAnD,QAAAA,EDHKoD,CCGF,EAAE,MDHL,ACEc,GDFG,EAAjB;AACA,AFCA,ACFA,AEIAsB,QAAAA,EDHKrB,CFCA,ACFAvC,GAAL,AEIM,CHFGX,ACFAC,CEID,GHFR,CCFA,CAAe,AEIFqE,CFJb,CCCA,AFCiBrF,CCFA,CAAjB,CCCqB,ACGb,CFJYA,AEIDuF,CDHnB,IFCqBlF,ICFGA,CDExB,EAA4B,ECFR,CAAUE,GEItB,CAA8B,CFJtC,EAAqCuC,IEI7B,EAAuC,GFJ/C,CAA+C,CAA/C;ACEA,AFCI,ACDJ,AEEgD0C,UDF3CtB,ADADnB,AEE4CyC,GHDvC3E,GGC6C,CHDlD,CAAUG,AGC0C,EDFxD,ADAc,GCAI,AFCd,ACDa,CCAjB,AFCoBhB,GGC2B,CFFzB0B,GAAL,CAASV,CDCFX,ICDP,CDCG,ACDY,CDCFU,IAAV,ACDiBkB,CDCjC,EAAiCjC,CCDL,CAAUkC,ODCD7B,CCDT,CAAmB+B,GDCd,CAAUrB,CCDf,GDCK,ACDsB,CDCvD,ACDa,EAA6C,KAAKkB,IAAL,CAAUC,QAAV,CAAmBC,MAAnB,GAA4B,CAA5B,GAAgC,EAA7E,EAAiFnC,SAAIK,KAAJ,CAAUC,KAA3F,EAAkG0C,QAAlG,CAA2G,CAA3G,EAA8GC,QAA9G,CAAuH,IAAvH,CAAjB;ACEA,AFAC,ACDDF,AECmEL,MFDnEK,ICCKoB,ACA8DzB,KAAK,CDAxE,ADDU,CAACQ,AEC+D,CAA3B,CDAjC,CAAd,EDDA,GAAmB,GAAnB,CAJK,CAML;ACAA,AFAH,ACCG,AEF6EuC,UDCxErB,ACDwEqB,GAAG,EDChF,ACDkF,CAAnC,EDClC,GAAb;AACA,ADCA,AEHqFC,UDEhFrB,ACFgFqB,EDErF,GAAU,CCFiF,EDE3F,ACF6F;ADG7F,ADCA,AEJ+C,SAAvC,CDGHpB,ACLS,KDKd,GAAa,CAAb;AACA,ADCA,AEJAqB,QAAAA,EDGKpB,GAAL,GAAW,CAAX,ACHS,EAAC,CAHI,YHIN;AEGR,AFFA,AGDAqB,QAAAA,EDGKpB,CFFA3D,GEEL,ACHM,CHCN,CAAUC,AGDF,CDGI,ACHH,EDGT,IFFA,CAAkB,gBAAlB;AEfqC,ADoBrC,AEVc,OAAlB;ADSC,AFFG,AGDJ,WHCS,AGDJuE,IHCQtE,CGDb,CAAWgE,EHCP,IAAiB/E,AGDrB,CAAkB,QHCOQ,KAArB,EAA4B;AACxB,AGDJI,QAAAA,GAAG,EHCMC,AGDJ,IHCD,CAAUI,EGFA,GHEV,CAAgBjB,SAAIQ,KAAJ,CAAUO,IAAV,CAAhB,EAAiCf,SAAIQ,KAAJ,CAAUO,IAAV,CAAjC;AACH,AGDDuE,QAAAA,MAAM,EAAE,KAAKD,KAAL,CAAWE,kBAAX,CAA8B,OAA9B,EAAuC;AHElD,AGFmDC,UAAAA,MAAM,EAAC,SAAR;AAAmB9C,UAAAA,KAAK,EAAE,CAA1B,aDG5C+B,MAAM;AACb,ACJgFgB,UAAAA,GAAG,EAAE,CAAlC;ADKnD,ACLwFC,UDKpFjB,ACLoFiB,IDKhF,ECLsF,CDKnF,CCLqF,CDK5F,KAAc,CAAd,IAAmB,GFFXxE,EEEgB+C,WFFH,EEEF,CAAmBS,QAAnB,CAA4BD,IAA5B,MAAsC,KAA7D,EAAoE;AAChE,AFFA,ACOA1B,AEX+C,MFW/CA,GEXQ,CAFM,CHMTlC,EEEAoD,EFFL,CAAUnD,ACOA,CAACqC,MDPX,CAAkB,EEElB,CAAmBwB,IAAnB,ADKA,CCLwBF,IAAxB,KFFA;AEGA,ADMA1B,AEZA4C,MFYA5C,EEZA4C,KDMKpB,GAAL,ADMU,CAACzC,AEZF,EFYT,AEZU,CDME,ADME,CCNd,ACTc,CDOkD,CAGhE,UDKA,EAA6B,YAAM;ADPnC,ACQIiB,AEZJ6C,QFYI7C,AEZJ6C,GHIK,GGJC,CHIG7E,CGJD,CAAC,CFYK,CDRd,ACQekC,IDREjD,ICQb,CAAoB,IDRHS,ACQjB,MDRJ,EAA6B;AEG7B,AFFI,ACQAsC,AEjBU,OAAlB,CFiBQA,KCNCsB,AFFIxD,EEET,EFFI,CAAUM,ACQA,CCNH,ADMIiC,KCNCmB,GAAhB,CAJgE,CAKhE,AFHI,ACQA,CDRsBvE,SAAIS,MAAJ,CAAWM,IAAX,CAAtB,EAAwCf,SAAIS,MAAJ,CAAWM,IAAX,CAAxC,EAA0DG,WAA1D;AEKJ,AFJC,ACQA,AEZL,OFSI,IETCmE,KAAL,CAAWN,MAAX,CAAkB;AHKjB,ACSGhC,AEbAnC,MFaAmC,EEbAnC,GAAG,EAAE,GFaK,CAACkB,EAAX,CAAc,AEdA,YFcd,EAA4B,YAAM;ACLlC,ADMIiB,AEbJuC,QFaIvC,AEbJuC,IDOI,ECPE,EAAE,CDOCf,CDMK,CAACtB,CCNX,CCPSoC,EDOE,CAAf,EAAkB,ACPV,CFaJ,AEbeE,CFaK,IAApB,aEbI,CAA8B,OAA9B,EAAuC;ADQ3C,ADMAxC,AEd4CyC,QFc5CzC,EEd4CyC,KDQvCpB,CCR6C,EFcxC,AEdyC,CFcxClB,CCNX,IAAc,ADMd,ECNA,CDMmB,AEdwB,GFc3C,CAF8B,CAG9B;ACNH,ADOA,AEhBiER,OFYlE,GEZkEA,KAAK,EAAE,CAA1B,YHIzC;AEMT,AFNS,ACcNK,AElB4E0C,MFkB5E1C,IElB4E0C,GAAG,EAAE,CFkBvE,AElBqC,CFkBpC3D,EAAX,CAAc,WAAd,EAA2B,YAAM;ACPxC,ADQW,AEnBgF4D,QFmBhF,EEnBgFA,GFmB5E,CAACjD,EEnBiF,EAAE,CFmBxF,CAAWC,KAAX,CAAiB1C,SAAIC,MAAJ,CAAWG,IAA5B;ADdJ,AGL+C,SAAvC,CAFM;AHQd,ACcI2C,AEnBJ4C,QFmBI5C,AEnBJ4C,SAAS,CFmBK,CAAC1C,AEnBL,EAHI,MFsBV,CAAoB,IAApB;ADbJ,ACcIF,AEnBJ6C,QFmBI7C,AEnBJ6C,MAAM,EAAE,CAAC,CFmBK,CAACxC,UAAX,CCRFwB,aAAahE,KAAM;AACzB,AFNI,ACcC,AExBa,OFoBd,AEpBJ;ADiBA,AFNI,ACcH,AEnBD,UDWI,CFNKC,AGLJwE,IDWId,AFNL,CAAUnD,AGLd,CAAW2D,CDWP,GFNA,CEMY,AFNI,CEMhB,ACXJ,CAAkB,GDWG,EFNjB,EAAyB,CEMHV,EAAL,GAAU,GAA/B,EAAoC,gBFNhC,EAAsD,4BAAtD;AEOA,AFLA,AGNAzD,QAAAA,GHMKS,AGNF,EAAE,MADS,GHOd,CAAiB;AEMjB,AFLIC,AGNJgE,QHMIhE,AGNJgE,IDWIT,ECXE,EAAE,GHMO,EEKF,AFLI,AGNJQ,EHKI,CEMDP,ECXR,CAAWS,MDWM,CAACR,MAAV,CAAiB,ICXzB,CDW8BzB,ACXA,CDWtB,EAAyB,ICXjC,CDWsCC,CAA9B,ACX+B,EDWE3C,GAAjC,CAAhB;AACA,AFLIW,AGP4CiE,QHO5CjE,EGP4CiE,GDY3CnB,EAAL,CCZsD,EDY5C,AFLI,AGPyC,EHOvC,GEKDA,EAAL,CCZqC,EDY3B,CAApB;AACAQ,AFRiB,AGLgDnC,EFhC1CC,KDqCvB,CEQAkC,AD7C6B,CAACjC,CEgCmCF,KAAK,EDa7D,ACb+D,CDa9D2B,ACbqC,EDa/C,GAAe,KAAKA,EAAL,GAAU,CAAzB;AACAQ,AFLA,AGT2EY,QDc3EZ,ECd2EY,CHStEjE,EGTyE,EAAE,EDcvE,ACdsC,CDcrCgD,GFLV,CEKA,EFhBM,CEgBW,AFHjB,QEGyBI,WAAzB;AAEA,AFJA,AGZoFc,UAAAA,KDgB7Eb,CChBmF,EAAE,MDgB5F;AACH,AFHG,AGd+C,ODSnD,ECTY,CAFM,GDmBX;AACH,AFFA,AGfAc,QAAAA,ODiBO,ECjBE,EDiBT,ACjBU,EAHI;ADqBjB,ACjBGC,QAAAA,MAAM,EAAE,CAAC;ADoBhB,AFLO,AGnBc,OAAlB,EArBU,CHwCFnE,AGbR,UHakB,GAAG,KAAKC,GAAL,CAASC,QAAT,CAAkB;AAC/BC,QAAAA,SAAS,EAAE;AACPC,AGdZ,UHcYA,CGdPhB,IHcY,AGdjB,CAAUG,CHcS,IGdnB,CAAgB,GHaG,CACS,KGd5B,EAA2B,2CAA3B;AACA,WAAKH,IAAL,CAAUgF,YDkBNb,IClBJ,CAA2B,CDkBjB,CACV,GCnBA,EAAkC,gCAAlC;ADoBA,AFRmB,AGVnB,WAAKnE,IAAL,CAAUG,KAAV,CAAgB,MAAhB,EAAwB,iCAAxB,EA/BU,CAiCV;ADiBH,AFV0C,OAAlB,CAAjB;AAMA,AGZJ,WAAKH,I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","file":"main.1e43358e.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENES: {\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        PLAY: \"PLAY\"\r\n    },\r\n    IMAGE: {\r\n        START: \"start.png\",\r\n        TITLE: \"title_bg800.jpg\"\r\n    },\r\n    AUDIO: {\r\n        TITLE: \"tbd.mp3\"\r\n    },\r\n    SPRITE: {\r\n        SLIME: \"slime.png\"\r\n\r\n    }\r\n}\r\n","import { CST } from \"../CST\";\r\n\r\nexport class LoadScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.LOAD\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n    loadImages() {\r\n        this.load.setPath(\"./assets/image\");\r\n\r\n        for (let prop in CST.IMAGE) {\r\n            this.load.image(CST.IMAGE[prop], CST.IMAGE[prop]);\r\n        }\r\n    }\r\n    loadAudio() {\r\n        this.load.setPath(\"./assets/audio\");\r\n\r\n        for (let prop in CST.AUDIO) {\r\n            this.load.audio(CST.AUDIO[prop], CST.AUDIO[prop]);\r\n        }\r\n    }\r\n    loadSprites(frameConfig) {\r\n        this.load.setPath(\"./assets/sprite\");\r\n\r\n        for (let prop in CST.SPRITE) {\r\n            this.load.spritesheet(CST.SPRITE[prop], CST.SPRITE[prop], frameConfig);\r\n        }\r\n    }\r\n    preload() {\r\n        // load image, spritesheet, sound\r\n        // this.loadAudio();\r\n        //this.load.spritesheet(\"slime\", \"./assets/sprite/slime.png\", {frameHeight: 16, frameWidth: 16});\r\n        //load atlases\r\n        this.load.atlas(\"slime\", \"./assets/sprite/slime.png\", \"./assets/sprite/slime.json\")\r\n\r\n        this.loadSprites({\r\n            frameHeight: 16,\r\n            frameWidth: 16\r\n        });\r\n        this.loadImages();\r\n\r\n        // this.load.image(\"title_bg\", \"./assets/title_bg800.jpg\");\r\n        // this.load.image(\"play_button\", \"./assets/start.png\")\r\n\r\n        //this.load.audio(\"title_music\", \"./assets/some-song.mp3\")\r\n\r\n        // create loading bar\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff //white\r\n            }\r\n        })\r\n\r\n        /* \r\n        Loader Events:\r\n            complete - when done loading everything\r\n            progress - loader number progress in decimal\r\n        */\r\n\r\n        //simulate large load\r\n        /*\r\n        for (let i = 0; i < 100; i++) {\r\n            this.load.spritesheet(\"grass_tile\" + i, \"./assets/grass_tile.png\", {\r\n                frameHeight: 32,\r\n                frameWidth: 32\r\n            });\r\n        }\r\n        */\r\n        \r\n\r\n\r\n        this.load.on(\"progress\", (percent) => {\r\n            loadingBar.fillRect(0, this.game.renderer.height / 2, this.game.renderer.width * percent, 50);\r\n            console.log(percent);\r\n        })\r\n\r\n        this.load.on(\"complete\", () => {\r\n            //this.scene.start(CST.SCENES.MENU, \"Hello from Load Scene\")\r\n        });\r\n\r\n        this.load.on(\"load\", (file) => {\r\n            console.log(file.src)\r\n        })\r\n\r\n    }\r\n    create() {\r\n\r\n            this.scene.start(CST.SCENES.MENU)\r\n            \r\n    }\r\n\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class MenuScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.MENU\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n    create() {\r\n        this.add.image(0,0, CST.IMAGE.TITLE).setOrigin(0);\r\n        \r\n        let playButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2 + 20, CST.IMAGE.START).setDepth(1).setScale(0.10);\r\n        playButton.alpha = 0.9;\r\n\r\n        // // create audio\r\n        // this.sound.pauseOnBlur = false;\r\n        // this.sound.play(\"title_music\", {\r\n        //     loop: true\r\n        // })\r\n\r\n\r\n        /*\r\n            PointerEvents:\r\n                pointerover - hovering\r\n                pointerout - not hovering\r\n                pointerup - click and release\r\n                pointerdown - just  click\r\n\r\n        */\r\n\r\n        playButton.setInteractive();\r\n\r\n        playButton.on(\"pointerover\", () => {\r\n            playButton.setScale(0.12)\r\n            playButton.clearAlpha();\r\n        })\r\n\r\n        playButton.on(\"pointerout\", () => {\r\n            playButton.setScale(0.10)\r\n            playButton.alpha = 0.9;\r\n            //this.scene.start();\r\n        })\r\n\r\n        playButton.on(\"pointerup\", () => {\r\n            this.scene.start(CST.SCENES.PLAY)\r\n            playButton.setScale(0.10);\r\n            playButton.clearAlpha();\r\n        })\r\n    }\r\n\r\n}","export class Sprite extends Phaser.Physics.Arcade.Sprite {\r\n    /**\r\n     * \r\n     */\r\n    constructor(scene, x, y, texture, frame) {\r\n        super(scene, x, y, texture, frame);\r\n        scene.sys.updateList.add(this);\r\n        scene.sys.displayList.add(this);\r\n        this.setScale(1);\r\n        this.setOrigin(0, 0);\r\n        scene.physics.world.enableBody(this);\r\n\r\n        this.timeArray = [];\r\n        this.timedAgeArray = [];\r\n        this.generation = 1;\r\n        \r\n        this.vision = 0\r\n        this.maxHP = 150;\r\n        this.hp = 100;\r\n        this.speed = 0;\r\n        this.age = 0;\r\n        this.name = \"\"\r\n\r\n    }\r\n\r\nsenescense(time) {\r\n    // Organism aging; modifies life\r\n    if (time % 30 === 0 && this.timedAgeArray.includes(time) === false) {\r\n        this.timedAgeArray.push(time)\r\n        this.age += 1\r\n        //console.log(this.name + \" is now age: \" + this.age)\r\n        this.hp -= this.age\r\n        //this.maxHP -=5\r\n\r\n        // Lose 5 max health per \"year\" after age 5\r\n        if (this.age > 5) {\r\n            this.maxHP -= 10\r\n        }\r\n    }\r\n}\r\n\r\nreproduce(nameCounter, key ) {\r\n    // Modifies life; creates new instance of organism\r\n    if (this.age >= 2 && this.hp > 100) {\r\n        //let offspring = Object.assign(Object.create(Object.getPrototypeOf(this)), this)\r\n        let offspring = organisms.create(this.x, this.y, key)\r\n        this.hp = this.hp / 2;\r\n        offspring.hp = this.hp / 2;\r\n        offspring.name = \"Org\" + nameCounter;\r\n        \r\n        return offspring;\r\n    } else {\r\n        return null;\r\n    }\r\n\r\n    \r\n}\r\n\r\nconsume(food) {\r\n    // Restores health; chance increased by speed\r\n    // 80% base chance, each point of speed + 2%; 20% max\r\n}\r\n\r\nmetabolise(rate, time) {\r\n    // Daily process which lowers health\r\n    // Increased by speed\r\n\r\n    if (time % 2 === 0 && this.timeArray.includes(time) === false) {\r\n        this.timeArray.push(time);\r\n        this.hp = this.hp - rate\r\n        //console.log(this.hp + \" HP Remaining for: \" + this.name)\r\n    }\r\n    \r\n}\r\n\r\n}","import { CST } from \"../CST\";\r\nimport { Sprite } from \"../Sprite\";\r\n\r\nexport class PlayScene extends Phaser.Scene {\r\n \r\n    constructor() {\r\n        super({ \r\n            key: CST.SCENES.PLAY,\r\n         });\r\n    }\r\n\r\n    preload() {\r\n\r\n    // Create animations\r\n    this.anims.create({\r\n        key: 'idle',\r\n        frames: this.anims.generateFrameNames('slime', {prefix: 'slime-0', start: 5, end: 8, suffix: '.png'}),\r\n        frameRate:5,\r\n        repeat: -1\r\n    })\r\n    this.anims.create({\r\n        key: 'north',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 1, end: 4, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    this.anims.create({\r\n        key: 'south',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 5, end: 8, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    this.anims.create({\r\n        key: 'west',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-', start: 9, end: 12, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    // Load map tiles\r\n    this.load.image('tileset', './assets/maps/overworld_tileset_grass.png');\r\n    this.load.tilemapTiledJSON('map', './assets/maps/evo-tileset.json');\r\n\r\n    this.load.image('tree', './assets/image/overworld-92.png')\r\n\r\n    // Ouput files loaded to console\r\n    this.load.on(\"load\", (file) => {\r\n        console.log(file.src)\r\n    })\r\n    \r\n    }\r\n    create() {\r\n        //const map = this.make.tilemap({ key: 'map'});\r\n        let map = this.add.tilemap('map');\r\n        //const tileset = map.addTilesetImage('evo-default', 'tileset');\r\n        let tileset = map.addTilesetImage('evo-default', 'tileset')\r\n\r\n        // Layers\r\n        let baseLayer = map.createStaticLayer(\"Base\", tileset, 0, 0).setDepth(-1);\r\n        //this.treeLayer = map.createStaticLayer(\"Trees\", tileset, 0, 0);\r\n        //let waterLayer = map.createStaticLayer(\"Water\", tileset, 0, 0);\r\n        //const structureLayer = map.createStaticLayer(\"Structures\", tileset, 0, 0).setDepth(0);\r\n\r\n        this.trees = this.physics.add.group()\r\n\r\n        // Add trees group to the window object to make accessible in console\r\n        window.trees = this.trees;\r\n\r\n        // Create n number of trees at random locations troughout hte grid;\r\n        for (let i = 0; i < 120; i++) {\r\n\r\n            let x = Phaser.Math.RND.between(0, 800);\r\n            let y = Phaser.Math.RND.between(0, 600);\r\n\r\n            this.trees.create(x, y, 'tree')\r\n        }\r\n\r\n\r\n        this.gameTime = 0;\r\n        this.nameCounter = 0;\r\n        //let slime = this.physics.add.sprite(100, 330,'slime', 'slime-05.png');\r\n\r\n        //let slime = new Sprite(this, 100, 100, CST.SPRITE.SLIME)\r\n        //this.physics.add.existing() //manual add\r\n        //window.slime = slime; // Add slime to window object to access from console.\r\n        //slime.setInteractive().setAlpha(0.5)\r\n        //this.input.on(\"gameobjectdown\", this.onObjectClicked);\r\n        \r\n\r\n        this.organisms = this.physics.add.group({classType: Sprite})\r\n        for (let i = 0; i < 10; i++) {\r\n            let x = Phaser.Math.RND.between(100, 500);\r\n            let y = Phaser.Math.RND.between(100, 300);\r\n\r\n            this.organisms.create(x, y, 'slime')\r\n            this.organisms.getChildren()[i].name = \"Org\" + this.nameCounter\r\n            this.organisms.getChildren()[i].speed = Phaser.Math.Between(0, 20)\r\n            this.organisms.getChildren()[i].vision = Phaser.Math.Between(0, 50)\r\n            this.nameCounter++ \r\n        };\r\n\r\n        window.organisms = this.organisms\r\n\r\n        // Takes an array of objects and passes each of them to the given callback.\r\n        Phaser.Actions.Call(this.organisms.getChildren(), function(organism) {\r\n        // make item interactive\r\n        organism.setInteractive();\r\n        organism.setBounce(0.5,0.5)\r\n        organism.setCollideWorldBounds(true);\r\n        \r\n        }, this);\r\n\r\n        //this.body.onWorldBounds = true;\r\n        // this.physics.arcade.collide(this.organisms), (organism) => {\r\n        //     organism.destroy();\r\n        // }\r\n        //slime.setCollideWorldBounds(true);\r\n\r\n\r\n        // Text objects\r\n        let timerText = this.add.text(16, 16, 'Timer: ' + 0, { fontSize: '12px', fill: '#fff' })\r\n        let timer = this.time.addEvent({\r\n            delay:1000,\r\n            callback: () => {this.gameTime++; timerText.setText('Timer: ' + this.gameTime);},\r\n            callbackScope: this,\r\n            repeat: -1\r\n        });\r\n        this.orgLabel = this.add.text(16, 42, 'THE LIVING', {fontSize: '13px', fill: '#000'}).setDepth(10);\r\n        this.orgLabel.setAlpha(0.75);\r\n        this.orgText = this.add.text(16, 55, '', {fontSize: '12px', fill: '#fff'}).setDepth(10);\r\n        this.orgText.setAlpha(0.75);\r\n\r\n        this.updateLabel = this.add.text(400, 42, 'UPDATES', {fontSize: '13px', fill: '#000'}).setDepth(10);\r\n        this.updateLabel.setAlpha(0.75);\r\n        this.updateText = this.add.text(400, 55, '', { fontSize: '12px', fill: '#fff' }).setDepth(10);\r\n        this.updateText.setAlpha(0.75);\r\n\r\n        // Respawn trees\r\n        let treeTimer = this.time.addEvent({\r\n            delay: 30000,\r\n            callback: this.regrowTrees,\r\n            callbackScope: this,\r\n            repeat: -1\r\n        });\r\n\r\n        // Map Collisions\r\n        //this.physics.add.collider(slime, this.treeLayer);\r\n        //this.physics.add.collider(slime, waterLayer);\r\n        //this.physics.add.collider(this.organisms, this.treeLayer);\r\n        this.physics.add.overlap(this.organisms, this.trees, this.collectTree, null, this);\r\n        //this.physics.add.collider(this.organisms, waterLayer);\r\n        this.physics.add.collider(this.organisms, this.organisms, ()=> {\r\n            for (let org of this.organisms.getChildren()) {\r\n                this.randomMovement(org);\r\n            }\r\n        });\r\n\r\n        // this.physics.add.collider(this.organisms, this.organisms, ()=> {\r\n        //     for (let org of this.organisms.getChildren()) {\r\n        //         this.randomMovement(org);\r\n        //     }\r\n        // });\r\n\r\n        this.updateOutput = [];\r\n        this.timedUpdate = this.time.addEvent({\r\n            delay: 3000,\r\n            callback: () => {this.updateOutput.shift()},\r\n            callbackScope: this,\r\n            loop: true\r\n        });\r\n\r\n        // Specify property\r\n        //this.treeLayer.setCollisionByProperty({collide:true});\r\n        //waterLayer.setCollisionByProperty({collide:true});\r\n        \r\n        // Map events \r\n            //by index\r\n        // this.treeLayer.setTileIndexCallback([96], (Sprite) => {\r\n        //     //console.log(Sprite.x, Sprite.y)\r\n        //     Sprite.hp += 10\r\n        // }, this)\r\n\r\n\r\n\r\n            //treeLayer.removeTileAt(tile.x, tile.y)\r\n\r\n        //this.treeLayer.renderDebug(this.add.graphics)\r\n         /*\r\n        gameobject events:\r\n            animationstart\r\n            animationrepeat\r\n            animationupdate\r\n            animationcomplete\r\n        */\r\n        //    slime.on(\"animationupdate\", () => {\r\n        //        console.log(\"ahhhhh\")\r\n        //    });\r\n        //    slime.on(\"animationupdate\", () => {\r\n        //     console.log(\"LEVELUP\")\r\n        // });\r\n\r\n\r\n    }\r\n    update(time, delta) { //delta 16.666 @ 60fps -- delta is fps in milliseconds\r\n        // this.physics.world.collide(slime, slime, (slime) => {\r\n        //     slime.destroy();\r\n        // })\r\n\r\n        this.slimeOutput = [];\r\n\r\n\r\n        this.timerText;\r\n        // this.movementAnim(slime);\r\n        // this.randomMovement(slime);\r\n\r\n        let organisms = this.organisms.getChildren();\r\n        // apply collision to group\r\n        //this.physics.world.collide(organisms)\r\n\r\n        // apply collision to group & slime\r\n        // this.physics.world.collide(organisms, slime, (organisms, slime)=>{\r\n        //     organisms.destroy()\r\n        //     slime.destroy()\r\n        // })\r\n\r\n        //console.log(slime.hp)\r\n        let numOrganisms = organisms.length;\r\n    \r\n        for (let i = 0; i < numOrganisms; i++) {\r\n            \r\n            if (organisms[i].hp <= 50) {\r\n                organisms[i].setScale(0.5);\r\n            } else if (organisms[i].hp > 50 && organisms[i].hp <= 75 ) {\r\n                organisms[i].setScale(0.75);\r\n            } else if (organisms[i].hp > 75 && organisms[i].hp <= 100 ) {\r\n                organisms[i].setScale(1.0);\r\n            } else if (organisms[i].hp > 100 && organisms[i].hp <= 125) {\r\n                organisms[i].setScale(1.25);\r\n            } else if (organisms[i].hp > 125 && organisms[i].hp <= 150) {\r\n                organisms[i].setScale(1.50);\r\n            }\r\n            \r\n            // if (slime.active === true) {\r\n            //     //this.physics.accelerateToObject(organisms[i], slime)\r\n            // }\r\n            //console.log(organisms[i].hp)\r\n\r\n            // movement\r\n            this.movementAnim(organisms[i]);\r\n            organisms[i].metabolise(2, this.gameTime)\r\n            organisms[i].senescense(this.gameTime)\r\n            this.cloneSprite(organisms[i])\r\n            // if (weeBabe != null) {\r\n            //     weeBabe.setInteractive();\r\n\r\n            // }\r\n\r\n            if (organisms[i].body.velocity.x === 0 && organisms[i].body.velocity.y === 0 ) {\r\n                this.randomMovement(organisms[i]);\r\n            } else {\r\n                for (let tree of this.trees.getChildren()) {\r\n                    if (this.distanceToObject(organisms[i], tree) <= organisms[i].vision && tree.visible) {\r\n                        //organisms[i].setVelocity(0, 0)\r\n                        //console.log(this.distanceToObject(organisms[i], tree))\r\n                        //console.log(organisms[i].vision)\r\n                        this.physics.accelerateToObject(organisms[i], tree, 60, 30+organisms[i].speed, 30+organisms[i].speed)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        // Death loop\r\n        for (let org of this.organisms.getChildren()) {\r\n            if (org.hp <= 0) {\r\n                //console.log(org.name + \" is dead :( at age \" + org.age + \"| Vision: \" + org.vision + \"| Speed: \" + org.speed)\r\n                this.updateOutput.push(org.name + \" died at age \" + org.age)\r\n                org.destroy()\r\n                numOrganisms = organisms.length\r\n            }\r\n        };\r\n\r\n        // Update Organism list\r\n        for (let org of this.organisms.getChildren()) {\r\n            this.slimeOutput.push(org.name + ' Age: ' + org.age  + ' Gen: ' + org.generation + ' HP: ' + Math.round(org.hp) + ' Vision: ' + org.vision + ' Speed: ' + org.speed)\r\n        }\r\n        this.orgText.setText(this.slimeOutput);\r\n        this.updateText.setText(this.updateOutput);\r\n        if(this.updateOutput.length > 8) {\r\n            this.updateOutput.shift()\r\n        }\r\n        this.colorSlimes()\r\n\r\n    }\r\n\r\n    onObjectClicked(pointer, gameObject) {\r\n        gameObject.setScale(1.5);\r\n    }\r\n\r\n    movementAnim(obj) {\r\n        if (obj.active === true) {\r\n            if(obj.body.velocity.y > 0) {\r\n                obj.anims.play('south', true);\r\n            } else if (obj.body.velocity.y < 0) {\r\n                obj.anims.play('north', true);\r\n            } else if (obj.body.velocity.x < 0) {\r\n                obj.anims.play('west', true);\r\n                obj.flipX = false;\r\n            } else if (obj.body.velocity.x > 0) {\r\n                obj.anims.play('west', true);\r\n                obj.flipX = true;\r\n            } else {\r\n                obj.anims.play('idle', true);\r\n            }\r\n        }\r\n    }\r\n\r\n    randomMovement(obj) {\r\n            if (obj.active === true) {\r\n                const d = Phaser.Math.Between(0, 500)\r\n                if (d < 100 && d > 95) {\r\n                    obj.setVelocityY(35+obj.speed);\r\n                } else if (d < 95 && d > 90) {\r\n                    obj.setVelocityY(-35)-obj.speed;\r\n                } else if (d < 90 && d > 85) {\r\n                    obj.setVelocityX(35+obj.speed);\r\n                } else if (d < 85 && d > 80) {\r\n                    obj.setVelocityX(-35-obj.speed);\r\n                } else if (d < 80 && d > 75) {\r\n                    obj.setVelocity(0,0);\r\n                }\r\n            }\r\n    }\r\n\r\n    collectTree(sprite, tree) {\r\n        tree.disableBody(true, true);\r\n        sprite.hp += 10;\r\n        if (sprite.hp > 150) {\r\n            sprite.hp = 150;\r\n        }\r\n    };\r\n\r\n    regrowTrees() {\r\n\r\n        for (let tree of this.trees.getChildren()) {\r\n            tree.enableBody(false, tree.x, tree.y, true, true);\r\n            //console.log(\"**Spring has sprung**\")\r\n        }\r\n    };\r\n\r\n    distanceToObject(obj1, obj2) {\r\n        let distanceX = Math.abs(obj1.x - obj2.x)\r\n        let distanceY = Math.abs(obj1.y - obj2.y)\r\n\r\n        return distanceX + distanceY\r\n    };\r\n\r\n    colorSlimes() {\r\n        for (let org of this.organisms.getChildren()) {\r\n            if (org.speed > 9 && org.speed < 20) {\r\n                org.setTint(0xff0000,0xffe600,0xffe600,0xffe600);\r\n            } else if (org.speed > 19) {\r\n                org.setTint(0xf75482)\r\n            }\r\n        }\r\n    }\r\n\r\n    cloneSprite(org) {\r\n        if (org.age >= 2 && org.hp > 100) {\r\n            let offspring = this.organisms.create(org.x, org.y, 'slime')\r\n            org.hp = org.hp / 2;\r\n            offspring.hp = org.hp / 2;\r\n            offspring.name = \"Org\" + this.nameCounter;\r\n            offspring.age = 0;\r\n            offspring.vision = org.vision\r\n            offspring.generation = org.generation + 1;\r\n            this.updateOutput.push(offspring.name + \" was born\")\r\n            let mutate = Math.random()\r\n            if ( mutate < 0.20) { // 20% chance of mutation\r\n                if (mutate < 0.10) {\r\n                    offspring.vision -= 3;\r\n                    //console.log(\"**Vision Mutation -3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' vision mutation -3');\r\n                } else if (mutate > 0.10 && mutate < 0.21) {\r\n                    offspring.vision += 3;\r\n                    //console.log(\"**Vision Mutation +3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' vision mutation +3')\r\n                }\r\n            };\r\n            offspring.speed = org.speed\r\n            mutate = Math.random()\r\n            if ( mutate < 0.20) { // 20% chance of mutation\r\n                if (mutate < 0.10) {\r\n                    offspring.speed -= 3;\r\n                    //console.log(\"**Speed Mutation -3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' speed mutation -3');\r\n                } else if (mutate > 0.10 && mutate < 0.21) {\r\n                    offspring.speed += 3;\r\n                    //console.log(\"**Speed Mutation +3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' speed mutation +3');\r\n                }\r\n            };\r\n            this.nameCounter++;\r\n            offspring.setInteractive()\r\n            offspring.setCollideWorldBounds(true);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n\r\n}\r\n","/** @types {import(\"../typings/phaser\")} */\nimport {LoadScene} from \"./scenes/LoadScene\";\nimport {MenuScene} from \"./scenes/MenuScene\";\nimport {PlayScene} from \"./scenes/PlayScene\";\n\nlet game = new Phaser.Game({\n    width: 800,\n    height: 600,\n    scene:[\n        LoadScene,\n        MenuScene,\n        PlayScene\n    ],\n    physics: {\n        default: \"arcade\",\n        arcade: {\n            //debug: true\n        }\n    }\n});\n\n\n\n\n/*\n//import Life from './life.js';\nconst gameState = {}\nconst config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    backgroundColor: '#ababab',\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: 100,\n            debug: true\n        }\n    },\n\n    scene: {\n        preload,\n        create,\n        update\n    }\n\n\n};\nconst game = new Phaser.Game(config);\n\nlet slime = \"\";\nlet timer = 0;\nconst healthbar = 100;\n\nfunction preload () {\n    // preload images, sounds & other assets\n    //this.load.json('map', 'assets/grass.json')\n    this.load.image('tileset', 'assets/TilesetGrass/overworld_tileset_grass.png');\n    this.load.tilemapTiledJSON('map', 'assets/TilesetGrass/evo-tileset.json');\n    //this.load.spritesheet('tiles', 'assets/grass.png', {frameWidth: 64, frameHeight: 64})\n    this.load.multiatlas('slime', 'assets/slime.json', 'assets')\n    this.load.spritesheet('slime_back', 'assets/slime1_back.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_front', 'assets/slime1_front.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_side', 'assets/slime1_side.png', {frameWidth: 16, frameHeight: 16})\n    this.load.spritesheet('slime_explode', 'assets/slime_explode.png', {frameWidth: 16, frameHeight: 16})\n};\nfunction create () {\n\n\n    // Layers\n\n\n    // Add organism to scene (full spritesheet) -- .setBounce(10).setFriction(0)\n    this.slime = this.physics.add.sprite(400, 330,'slime', 'slime-05.png');\n    // label(this.slime)\n\n    // Create animations\n    this.anims.create({\n        key: 'idle',\n        frames: this.anims.generateFrameNames('slime', {prefix: 'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:5,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'north',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 1, end: 4, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'south',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'west',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-', start: 9, end: 12, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n\n    //Group of organisms\n    this.organisms = this.physics.add.group({\n        key: 'slime',\n        repeat: 4,\n        setXY: {\n            x: 400,\n            y: 300,\n            stepX: 80,\n            stepY: 20\n        }\n    });\n\n    //scale organism\n    // Phaser.Actions.ScaleXY(this.organisms.getChildren(), -0.10,-0.10);\n\n    // Takes an array of objects and passes each of them to the given callback.\n    Phaser.Actions.Call(this.organisms.getChildren(), function(organism) {\n        organism.speed = Math.random() * 2 + 1;\n        // make item interactive\n        organism.setInteractive();\n\n    }, this);\n\n    let locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n    this.orgLocations = this.add.group({\n        //\n    })\n\n    this.slime.speed = 2;\n    this.physics.world.bounds.width = map.widthInPixels-10;\n    this.physics.world.bounds.height = map.heightInPixels-10;\n    this.slime.setCollideWorldBounds(true);\n\n\n    \n\n\n    // Collision debugging (remove in production)\n    // const debugGraphics = this.add.graphics().setAlpha(0.75);\n    // treeLayer.renderDebug(debugGraphics, {\n    //     tileColor: null,\n    //     collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255),\n    //     faceColor: new Phaser.Display.Color(40, 39, 37, 255)\n    // });\n    \n    \n    \n};\nfunction update () {\n\n    // Slime movement\n    this.slime.setVelocityX(-64)\n    movementAnim(this.slime)\n\n        // Organism movement\n        let organisms = this.organisms.getChildren();\n        let numOrganisms = organisms.length;\n    \n        for (let i = 0; i < numOrganisms; i++) {\n\n            // movement\n            movementAnim(organisms[i]);\n  \n            if (timer < 10) {\n                if (i === 0 || i === 1) {\n                    organisms[i].setVelocityY(64);  \n                } else if (i === 2 || i === 3) {\n                    organisms[i].setVelocityX(64)\n                } else if (i === 5) {\n                    organisms[i].setVelocity(0,0)\n                }\n            }\n\n\n                if (organisms[i].y >= 599) {\n                    organisms[i].setVelocityY(-64)\n                    //organisms[i].anims.play('north', true);\n                } else if (organisms[i].y <= 1) {\n                    organisms[i].setVelocityY(64);\n                    //organisms[i].anims.play('south', true);\n                } else if (organisms[i].x >= 799) {\n                    organisms[i].setVelocityX(-64);\n                    //organisms[i].anims.play('west', true)\n                } else if (organisms[i].x <= 1) {\n                    organisms[i].setVelocityX(64);\n                    //organisms[i].anims.play('west', true)\n                    //organisms[i].flipX = true;\n                } else {\n                    randomMovement(organisms[i])\n                }\n                \n    // if (organisms[i].x >= this.organismMaxX && organisms[i].speed > 0) {\n            //     organisms[i].speed *= -0.25;\n            // } else if (organisms[i].x <= this.organismMinX && organisms[i].speed < 0) {\n            //     organisms[i].speed *= -0.25;\n            // }\n            timer++\n        };\n\n    //this.slime.y -= this.slime.speed\n    //this.slime.anims.play('north', true);\n\n}; \n\n\n\n\n\n\n// function label(obj) {\n//     const style = { font: \"10px Arial\", fill: \"#ffffff\"};\n//     obj.label_score = this.add.text(20, 20, \"0\", style);\n//     obj.hello_sprite.addChild(this.label_score)\n// }\n\n//locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n\n*/"]}