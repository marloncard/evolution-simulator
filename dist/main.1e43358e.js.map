{"version":3,"sources":["src/CST.js","src/scenes/LoadScene.js","src/scenes/MenuScene.js","src/Sprite.js","src/scenes/PlayScene.js","src/main.js"],"names":["CST","SCENES","LOAD","MENU","PLAY","IMAGE","START","TITLE","AUDIO","SPRITE","SLIME","TEXT","INPUT","LoadScene","key","window","chart","options","dataPacket","creatures","avgVision","avgSpeed","time","load","setPath","prop","image","audio","frameConfig","spritesheet","html","atlas","loadSprites","frameHeight","frameWidth","loadImages","loadHTML","loadingBar","add","graphics","fillStyle","color","on","percent","fillRect","game","renderer","height","width","console","log","file","src","scene","start","Phaser","Scene","MenuScene","setOrigin","setDepth","text","fontFamily","fontSize","element","dom","createFromCache","addListener","slimeCount","mutationRate","treeCount","event","target","name","constructor","getChildByName","value","removeListener","Sprite","x","y","texture","frame","sys","updateList","displayList","setScale","physics","world","enableBody","timeArray","timedAgeArray","generation","vision","maxHP","hp","speed","age","includes","push","nameCounter","offspring","organisms","create","food","rate","Physics","Arcade","PlayScene","data","anims","frames","generateFrameNames","prefix","end","suffix","frameRate","repeat","tilemapTiledJSON","map","tilemap","tileset","addTilesetImage","baseLayer","createStaticLayer","trees","group","i","Math","RND","between","getChildren","tree","setSize","gameTime","classType","Between","Actions","Call","organism","setInteractive","setBounce","setCollideWorldBounds","timerText","fill","timer","addEvent","delay","callback","setText","callbackScope","orgLabel","setAlpha","orgText","updateLabel","updateText","treeTimer","regrowTrees","overlap","collectTree","collider","org","randomMovement","updateOutput","timedUpdate","shift","loop","graphUpdate","pushGraph","delta","seconds","Date","getUTCSeconds","slimeOutput","numOrganisms","length","movementAnim","metabolise","senescense","cloneSprite","body","velocity","distanceToObject","visible","accelerateToObject","destroy","round","colorSlimes","pointer","gameObject","obj","active","play","flipX","d","setVelocityY","setVelocityX","setVelocity","sprite","disableBody","numtrees","ceil","obj1","obj2","distanceX","abs","distanceY","setTint","mutate","random","orgArray","visionArray","speedArray","reduce","a","b","Game","parent","createContainer","default","arcade","debug"],"mappings":";;AKCA;;AACA;;ALFO,AKGP,ILHaA,GAAG,GAAG;AACfC,ACDJ,ACAA,AEAA,EJCIA,MAAM,EAAE;AACJC,AKFR,ILEQA,IAAI,EAAE,MADF;AAEJC,AKER,ADJA,IJEQA,AKEJ0C,ILFQ,AKEJ,ELFM,CKEH,IAAIU,CLJH,KKIS,CAACgK,IAAX,CAAgB;ALDnBnN,AKEJoN,EAAAA,ELFIpN,IAAI,AKEF,ELFI,AKEF,YADe;ALJf,AKMR4C,EAAAA,CLPe,IKOV,EAAE,GAFgB;ALCvB3C,AKEA0C,ELFA1C,AKEA0C,KLFK,CKEC,CLFC,CKEC,GAHe;ALEnBzC,AKEJ0D,EAAAA,ELFI1D,CKED,EAAE,ELFI,EAAE,WADJ;AAEHC,AKEAkN,ILFAlN,AKEAkN,KLFK,EAAE,QKEQ,EAAE;ALJd,AKGF,GLTU,AKKQ;ALKvBjN,AKEA6C,ELFA7C,AKEA6C,KLFK,AKEA,ELFE,AKED,CACFxC,oBADE,EAEF4C,oBAFE,EAGFkD,oBAHE,CAPiB;ALMnBpG,AKMJ+E,EAAAA,ELNI/E,KAAK,AKMF,ELNI,AKMF;ALPF,AKQHmN,GLlBW,CKkBXA,OAAO,EAAE,QADJ;ALJTjN,AKMIkN,ELNJlN,EKMIkN,ILNE,EAAE,AKME,EAAE;ALLRjN,AKMIkN,ILNJlN,EKMIkN,GLNC,EAAE,AKME,EAAE;ALPP,AKMI,GLnBG;AAiBfjN,AKAS,ELATA,IAAI,EAAE;AACFC,AKbmB,CAAhB,CAAX,ELaQA,KAAK,EAAE;AADL,AKWV;AL5BmB,CAAZ,GGAMiE;;IFEAhE,ACAA4C;;IECAkD;ADFT;;AFEA,ACAA,uBDAc,ACAA;ACCd,AFDc,ACAA,kBCCFtD,KAAZ,EAAmByB,CAAnB,EAAsBC,CAAtB,EAAyBC,OAAzB,EAAkCC,KAAlC,EAAyC;AAAA,ACCzC,uBAAc;AHFA,ACAA,AEEA,kFHDJ,ACAA;ACA+B,AFCjCnE,ACAAA,MDAAA,ACAAA,GDAG,ACAA,EDAEd,ACAAA,SDAIC,ACAAA,MDAJ,ACAA,CDAWC,ACAAC;ADDd,ACAA,AECI,KHFA,ACAA,6EEGJ;ADDN,AFEH,ACAA,AEAOW,MAAAA,GAAG,EAAEd,SAAIC,MAAJ,CAAWG,qDDFdiD,KAAN,EAAayB,CAAb,EAAgBC,CAAhB,EAAmBC,OAAnB,EAA4BC,KAA5B;AACA5B,ACAM,IDANA,CCDU,IDCL,CAAC6B,GAAN,CAAUC,UAAV,CAAqB7C,GAArB;AACAe,ACEH,IDFGA,KAAK,CAAC6B,GAAN,CAAUE,WAAV,CAAsB9C,GAAtB;;AACA,UAAK+C,QAAL,CAAc,CAAd,OFAG,ACAA,CAEN;ADDGtE,MAAAA,MAAM,CAACC,KAAP,GAAe,IAAf;AEAA,AFCAD,MAAAA,IEDK2C,EFCC,CAACzC,MEDP,CAAe,AFCf,CEDA,EAAkB,AFCD,CEDjB,CCEC2F,EHDD,IGCO;AHAP7F,AGCAkC,MHDAlC,AGCAkC,MHDM,CAAC/B,AGCA,CAACgC,GAAR,CAAY,KHDZ,CGCA,EHDoB,AGCA0D,IFDd,AECN,CFAA;ACFAvD,AFEIlC,ACCP,AEAG,IDHAkC,IFEIlC,CEFC,CAACmE,CCGDnB,MDHL,AFEa,CEFCoB,CFEE,EADI,AGEpB,EDHA,CAAoBC,ACGFoB,IAAI,CAACzC,KDHvB,KCGA;ADDA,AFCI/C,AGCJ,QHDIA,EEDCqE,CCEArB,MHDQ,EEDb,AFCgB,EAFI,CECH,CCEjB,CDFA,ECEoBwC,IAAI,CAACxC,YAAzB;ADDA,AFCI/C,AGCJ,QHDIA,EEDCqE,CCEArB,KHDO,EAAG,EAHK,AGIpB,GDFA,ACEiBuC,GDFI,CCEA,CDFrB,ACEsBvC,SAAtB;ADDA,AFCI/C,AGEP,QHFOA,EEDCqE,EFCG,EAAE,MEDV,GAAkB,CAAlB,KDAK;ACEL,AFLoB,ACIpB,ODJA,GEKKC,CDDAtD,GAAL,CAASZ,CCCT,GAAc,CAAd,ADDA,CAAe,CAAf,EAAiB,CAAjB,EAAoB1B,SAAIK,KAAJ,CAAUE,KAA9B,EAAqCmD,SAArC,CAA+C,CAA/C,EAAkDC,QAAlD,CADK,CAIL;ACDA,AFAH,ACEG,UCFKkC,KAAL,GAAa,GAAb;AACA,UAAKC,EAAL,GAAU,GAAV,YCAM;ADCN,ADCA,AEAJ,UDDSC,ADCDnC,IAAI,CCDR,EDCW,CCDE,CAAb,GDCgBtB,GAAL,CAASsB,IAAT,CAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B;ACArC,ADAuCnB,AEC3C,QFD2CA,ECAlCuD,CCCJa,EDDD,ADA4C,EAAE,CCAnC,ACCf,CDDI,ACCOP,KFD8B,CECzC,CAAkB,SHHL;AEGT,AFFA,ACCuDzC,AEEvD/C,QFFuD+C,AEEvD/C,EDDK0D,CFFAjD,AGGF,EAAE,CDDL,CFFA,CAAUC,CEEE,CDDqD,CCCjE,ACAc,CFDqD,GDDnE,CAAkB,GCCmB,aDDrC;AEfqC,ADgBuCsC,AEG5EgD,QFH4EhD,AEG5EgD,MAAM,EFH8E,AEG5E,EFH8E,GEGzED,KAAL,CAAWE,kBAAX,CAA8B,OAA9B,EAAuC;ADAlD,AFFG,ACDqC,AEGWC,OFHrC,CAAX,CANK,CAQL,AECgDA,CHF3C,IAAIvF,CGE6C,EAAE,CHFxD,IAAiBzB,IGE8B,KHF1BK,KAArB,EAA4B;AACxB,AGC+DiD,UAAAA,GHD1D/B,EGC+D,EHDpE,AGCsE,CHD5DG,AGCiC,KHD3C,CAAgB1B,SAAIK,KAAJ,CAAUoB,IAAV,CAAhB,EAAiCzB,SAAIK,KAAJ,CAAUoB,IAAV,CAAjC;AACH,ACAD,AEA6EwF,UFAzElD,AEAyEkD,GAAG,EAAE,CAAnC,CFApC,GAAG,KAAK3E,GAAL,CAAS0B,GAAT,CAAa,KAAKnB,IAAL,CAAUC,QAAV,CAAmBE,KAAnB,GAA2B,CAAxC,EAA2C,KAAKH,IAAL,CAAUC,QAAV,CAAmBC,MAAnB,GAA4B,CAA5B,GAAgC,GAA3E,EAAgFkB,eAAhF,CAAgGjE,SAAIW,IAAJ,CAASC,KAAzG,EAAgH+C,QAAhH,CAAyH,CAAzH,CAAd;ADCH,ACAGI,AEDqFmD,MFCrFnD,IEDqFmD,GFC9E,CAAChD,EEDmF,EAAE,OFC7F,CAAoB,OAApB;AACA,AEF+C,SAAvC,CAFM,CFITC,UAAL,GAAkB,EAAlB,KCAG7C,MAAM;AACb,ADAI,AEFA6F,QAAAA,GFEK/C,MEFI,EAAC,CAHI,GFKd,GAAoB,EAApB;ACCJ,ADAI,AEFAgD,QAAAA,EDEA9F,CDAK+C,GCAD,ACFE,EAAE,CDED,ACFE,EDET,CDAA,GAAiB,CCAH,CAAd,ADAA,ICAmB,GFFX,EEEgBqB,aAAL,CAAmBO,QAAnB,CAA4B3E,IAA5B,MAAsC,KAA7D,EAAoE;AAChE,AFFA,ACIAyC,AETc,MFSdA,CETJ,IHKSxC,EEEAmE,ADEE,CAAChD,CDJR,CAAUlB,ACIV,CAAW,MDJX,CAAkB,ACIlB,ECFA,ADEoB,CCFD0E,IAAnB,CAAwB5E,IAAxB,ADE8BgD,IDJ9B,CCIoB,EAAiB;ACDrC,ADEI,AEJR,WAAKuC,CFIOvC,CCFH0B,GAAL,ACFJ,CFIiB,AEJNM,CFIO/B,ECFF,CAAZ,CAFgE,CAGhE,ACHJ,CFIY,AEJM,CFIOC,IAAb,KAAsB,cAA1B,EAA0C;ADH9C,ACIQvB,AEJRnC,QAAAA,EFIQmC,CDJH,AGAF,EAAE,EHAIxB,ECIM,CAACyB,CDJhB,CGDc,CFKN,CAAY,CDJHlD,QCIY+D,CDJRvD,KAArB,CCIQ,CDJoB;AEG5B,AFFI,ACIIyC,AEJR6D,QAAAA,EFIQ7D,GCFH6C,AFFIvE,CGAH,CDEN,CCFQ,CHAJ,ACIW,CDJDI,ACIEuB,CCFL,EDEH,AEJK2D,CFIO,CDJhB,CEEYb,AFFIhG,EGAZ,CDER,ADEyByE,AEJNsC,CDF6C,CAKhE,IFHwBvG,KAAJ,ACIA,CDJUiB,ACIO+C,IDJjB,ACIZ,CDJJ,CGAI,CHA6BxE,AGAC,OAA9B,EHAiCQ,AGAM,KHAV,CAAUiB,IAAV,CAAjC;AEKJ,AFJC,ACIOwB,AELwC+D,UFKxC/D,AELwC+D,MAAM,CFKvC,CAAC9D,AELuC,GFK/C,CAAYoB,KAAK,AELsB,CFKrBC,MAAN,CAAaE,WAAb,CAAyBD,IAArC;ADHX,ACIW,AEN0DlB,UAAAA,KFMrDa,AEN0D,EAAE,CAA1B,OFMvC,GAAkBJ,OAAO,CAACW,cAAR,CAAuB,YAAvB,EAAqCC,KAAvD;ACAR,ADCQ,AEPoEsC,UAAAA,EDMxE,CCN2E,EFOlE7C,AEPoE,CAAlC,CDMtC4B,GAAL,GAAW,CAAf,EAAkB,CDCV,GAAoBjC,OAAO,CAACW,cAAR,CAAuB,cAAvB,EAAuCC,KAA3D;ACAJ,ADCI,AER4EuC,UAAAA,KDO3ErB,ADCIxB,CER6E,EAAE,EDOxF,IAAc,ADCV,ECDJ,CDCqBN,OAAO,CAACW,cAAR,CAAuB,WAAvB,EAAoCC,KAArD;ACAP,ADCO1B,AETuC,SAAvC,CFSAA,AEXM,OFWC,CAACC,GAAR,CAAY,KAAKiB,KDNjBvC,KCMA,QDNa;AEMxB,AFLG,AGHAuF,QAAAA,GHGK5F,IAAL,CAAUC,CGHD,EAAC,EAHI,EHMd,CAAkB,iBAAlB;AEMP,ADCe,AETR4F,QAAAA,MFSY,AETN,EAAE,CAAC,EFSQjD,UAAL,CAAgBQ,KAAhB,KAA0B,EAA1B,IAAgC,KAAKP,YAAL,CAAkBO,KAAlB,KAA4B,EAA5D,IAAkE,KAAKN,SAAL,CAAeM,KAAf,KAAyB,EAA/F,EAAmG;ADL3G,ACMYZ,AEdE,OAAlB,IHQS,CCMOA,GDNHtC,IAAT,ACMmB,CAACmD,GDNH5E,SAAIS,ECMT,CAAuB,GDNnC,EAA6B,ECMjB;ADLR,ACMQwC,AEThB,WAAK4D,CFSW5D,CDNH1B,GGHb,CHGQ,AGHG+E,CHGOzE,CCMK,CAACqB,GAAR,AEThB,CFS4B,AETV,KHGV,ACMyBiB,CDNHnE,SAAIS,ACMlB,MDNc,CAAWgB,IAAX,CAAtB,EAAwCzB,SAAIS,MAAJ,CAAWgB,IAAX,CAAxC,EAA0DG,WAA1D;AACH,ACMWqB,AETZnC,QAAAA,GAAG,CFSSmC,CETP,MFSc,CAACC,AEVN,GFUF,CAAY,MCFtBiD,WDEU,ECFGrF,KAAM;AACzB,AFJC,ACMemC,AETZ6D,QAAAA,IFSY7D,EETN,EAAE,GFSW,CAACC,CETP2D,EFSD,CAAY,EEThB,CAAWE,MFSchD,OAArB,KETJ,CAA8B,OAA9B,EAAuC;ADQnD,ADEgBd,AEVoC+D,UDQhD,ACRgDA,EFUpC/D,GCFP+C,CCRiD,EDQtD,ACRuD,CFUpC,CAAC9C,ECFR,CAAZ,ADEY,CAAY,GCFP,ACR8B,EFUlBuB,GCFPqB,EAAL,GAAU,GAA/B,ADE4B,CAAiBtB,CCFT,GDEpB;ACDZ,ADGY,AEZsDlB,UAAAA,KAAK,EFYtDD,AEZwD,CAA1B,IFYnC,CAAWC,KAAX,CAAiBtD,SAAIC,MAAJ,CAAWG,IAA5B,EACI;ACHhB,ADIoB+D,AEdwD8C,UAAAA,EDUxEb,CCV2E,CFc3DjC,CEd6D,CAAlC,KDUlC,GAAGkC,ADIc,EAAE,KDVzB,ACU8BlC,ECJZ,CAACmC,MAAV,CAAiB,ADGjB,KCHsBxB,CAAtB,EAAyB,KAAKC,CAA9B,EAAiCjE,GAAjC,CAAhB;AACA,AFNA,ACUoBsD,AEfgE8C,UAAAA,CHK/E3F,EEMAuE,CDIe1B,CCJpB,AFNA,CAAU5C,AGLgF,EDWhF,ACXkF,KDW7EsE,AFNf,CAAkB,CEMR,CDIsB,ECJZ,ADIc,CCJlC,IDIuC1B,MDVvC,MCQgB;ACDhBgC,ADIoB/B,AEhB2B,QDY/C+B,CCZQ,CAFM,IFkBM/B,GCJX,CAACyB,EAAV,GAAe,ADIc,EAAE,GCJXA,EAAL,ADIqBzB,GCJX,CAAzB;AACA+B,AFNA,ACMgB,AEZhBe,QDYAf,ACZAe,GHMK,ECKO,EDLH1F,EEMA,ACZA,CDYC+C,CFNV,AGNU,EAHI,CDed,CFNiBxE,EEMA,OFNIW,CEMIwF,GFNzB,EAA2B,MEM3B;AAEA,AFPI,ACUK,AEhBTiB,QAAAA,KHMS7F,CGNH,CDaC6E,CCbC,CHMJ,AGNK,CHMKtE,IAAV,CAAe9B,CEOnB,QFPuBW,IAAJ,CAASc,IAAT,CAAf,EAA+BzB,SAAIW,IAAJ,CAASc,IAAT,CAA/B;AEQP,AFPI,ACUI,AErBS,ODUlB,ACVA,MDkBO;AACH,AFPH,ACUI,AEhBL,OFTI,EAyBG,EEhBFoF,EFTD,ECsBO,ADtCF,CA2CL,AElBJ,CAAWP,EDaP,ICbJ,CAAkB;ADcjB,ADKG,AElBAxF,QAAAA,GAAG,EAAE,MADS;ADiBrB,ADGO,AElBAgG,QAAAA,MAAM,EAAE,KAAKD,KAAL,CAAWE,kBAAX,CAA8B,OAA9B,EAAuC;AFmB/C,AEnBgDC,UAAAA,MAAM,EAAC,QAAR,IHKzC;AAAA,ACeN,AEpBiE1D,UAAAA,KAAK,EAAE,CAAzB;AAA4B2D,UAAAA,GAAG,EAAE,EAAjC,WDiB/CV,MAAM,CACV;AACA,AFbI,ACgBA,AEtBoFW,UAAAA,MAAM,EAAE;ADoBnG,AFbO,AGP+C,SAAvC,CAFM;AHUd,AGPAC,QAAAA,SAAS,EAAC,EAHI;AHWd,AGPAC,QAAAA,MAAM,EAAE,CAAC;AHQT,AGZc,OAAlB,EArBU,CA2BV,CHMS7F,IAAL,CAAUQ,KAAV,CAAgB,OAAhB,EEYGyE,AFZsB,MEYhBlF,MAAM,eFZf,EAAsD,4BAAtD;AEaJ,AFXI,WAAKU,WAAL,CAAiB;AEYrB,AFXQC,AGRR,QHQQA,GGRHV,IAAL,CAAUG,GHQS,EAAE,AGRrB,CAAgB,CHOK,QGPrB,EAA2B,2CAA3B;ADqBA,AFZQQ,ACiBJ,AEzBJ,QHQQA,EEYJZ,CCpBCC,GDoBG,CCpBR,CAAU8F,CDoBC,CAAP,AFZc,EAAE,GEYH,CAAb,IAAkB,ICpBtB,CDoB2B5B,ACpBA,KAA3B,EAAkC,EDoBZ,CAAeQ,QAAf,CAAwB3E,IAAxB,MAAkC,KAAxD,EAA+D,GCpB/D;ADqBI,AFfiB,ACqBjB,AE1BJ,OHKI,IGLCC,EDoBIkE,ECpBT,CAAU/D,KAAV,CDoBI,ACpBY,CDoBGwE,IAAf,CAAoB5E,ACpBxB,EAAwB,EDoBpB,+BCpBJ,EA9BU,CAgCV;ADmBI,AFZA,ACkBA,WDlBKa,EEYA2D,EAAL,GAAU,GFZV,EEYeA,EAAL,GAAUU,IAApB,CAF2D,CAG3D;AACH,AFbG,ACkBA,AEzBJ,WHOSpE,AGPJb,IAAL,CAAUmB,EAAV,CHOI,AGPS,GHLH,CAcN,EGTJ,EAAqB,UAACS,IAAD,EAAU;ADsBlC,AFZO,ACgBA,AEzBAF,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,GAAjB;AHWA,ACgBA,AE1BH,OAFD;AHcI,ACeA,AEzBH;AF0BG;ADfA,ACgBA,EClFoBG,MAAM,CAACkD,CFkEvBpE,MElEgB,CAAeqE,GFkErB,GElEM,AFkEH,CElEyB7B,IFkEpBvC,GAAL,CAASC,QAAT,CAAkB;AAC/BC,ACgBJ,QDhBIA,SAAS,EAAE,UGXV;AHYGC,ACiBR,AE7BK,UHYGA,KAAK,EAAE,QADA,CACS;ACoBxB;ADrBe,ACsBf,AE/BA;AHQmC,ACwBnC,AE/BA,OHOiB,CAAjB,EGPI6E,GAAG,GAAG,KAAKhF,GAAL,CAASiF,OAAT,CAAiB,KAAjB,CAAV,CAHK,CAIL;AHYA,ACmBA;AACA,AE/BA,UAAIC,OAAO,GAAGF,GAAG,CAACG,eAAJ,CAAoB,aAApB,EA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","file":"main.1e43358e.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENES: {\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        PLAY: \"PLAY\"\r\n    },\r\n    IMAGE: {\r\n        START: \"start.png\",\r\n        TITLE: \"title_bg800.jpg\"\r\n    },\r\n    AUDIO: {\r\n        TITLE: \"tbd.mp3\"\r\n    },\r\n    SPRITE: {\r\n        SLIME: \"slime.png\"\r\n\r\n    },\r\n    TEXT: {\r\n        INPUT: \"inputs.html\"\r\n    }\r\n}\r\n","import { CST } from \"../CST\";\r\n\r\nexport class LoadScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.LOAD\r\n        })\r\n    }\r\n    init() {\r\n        window.chart = null;\r\n        window.options = null;\r\n        window.dataPacket = {\r\n            creatures : [],\r\n            avgVision : [],\r\n            avgSpeed : [],\r\n            time: []\r\n        }\r\n    }\r\n    loadImages() {\r\n        this.load.setPath(\"./assets/image\");\r\n\r\n        for (let prop in CST.IMAGE) {\r\n            this.load.image(CST.IMAGE[prop], CST.IMAGE[prop]);\r\n        }\r\n    }\r\n    loadAudio() {\r\n        this.load.setPath(\"./assets/audio\");\r\n\r\n        for (let prop in CST.AUDIO) {\r\n            this.load.audio(CST.AUDIO[prop], CST.AUDIO[prop]);\r\n        }\r\n    }\r\n    loadSprites(frameConfig) {\r\n        this.load.setPath(\"./assets/sprite\");\r\n\r\n        for (let prop in CST.SPRITE) {\r\n            this.load.spritesheet(CST.SPRITE[prop], CST.SPRITE[prop], frameConfig);\r\n        }\r\n    }\r\n    loadHTML() {\r\n        this.load.setPath(\"./assets/text\");\r\n\r\n        for (let prop in CST.TEXT) {\r\n            this.load.html(CST.TEXT[prop], CST.TEXT[prop]);\r\n        }\r\n    }\r\n    preload() {\r\n        // load image, spritesheet, sound\r\n        // this.loadAudio();\r\n        //this.load.spritesheet(\"slime\", \"./assets/sprite/slime.png\", {frameHeight: 16, frameWidth: 16});\r\n        //load atlases\r\n        this.load.atlas(\"slime\", \"./assets/sprite/slime.png\", \"./assets/sprite/slime.json\")\r\n\r\n        this.loadSprites({\r\n            frameHeight: 16,\r\n            frameWidth: 16\r\n        });\r\n        this.loadImages();\r\n        this.loadHTML();\r\n\r\n        // this.load.image(\"title_bg\", \"./assets/title_bg800.jpg\");\r\n        // this.load.image(\"play_button\", \"./assets/start.png\")\r\n\r\n        //this.load.audio(\"title_music\", \"./assets/some-song.mp3\")\r\n\r\n        // create loading bar\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff //white\r\n            }\r\n        })\r\n\r\n        /* \r\n        Loader Events:\r\n            complete - when done loading everything\r\n            progress - loader number progress in decimal\r\n        */\r\n\r\n        //simulate large load\r\n        /*\r\n        for (let i = 0; i < 100; i++) {\r\n            this.load.spritesheet(\"grass_tile\" + i, \"./assets/grass_tile.png\", {\r\n                frameHeight: 32,\r\n                frameWidth: 32\r\n            });\r\n        }\r\n        */\r\n        \r\n\r\n\r\n        this.load.on(\"progress\", (percent) => {\r\n            loadingBar.fillRect(0, this.game.renderer.height / 2, this.game.renderer.width * percent, 50);\r\n            console.log(percent);\r\n        })\r\n\r\n        this.load.on(\"complete\", () => {\r\n            //this.scene.start(CST.SCENES.MENU, \"Hello from Load Scene\")\r\n        });\r\n\r\n        this.load.on(\"load\", (file) => {\r\n            console.log(file.src)\r\n        })\r\n\r\n    }\r\n    create() {\r\n\r\n            this.scene.start(CST.SCENES.MENU)\r\n            \r\n    }\r\n\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class MenuScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.MENU\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n    preload() {\r\n        //this.load.html('infoform', './assets/text/inputs.html');\r\n    }\r\n    create() {\r\n        this.add.image(0,0, CST.IMAGE.TITLE).setOrigin(0).setDepth;\r\n        \r\n\r\n        // let playButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2 + 20, CST.IMAGE.START).setDepth(1).setScale(0.10);\r\n        // playButton.alpha = 0.9;\r\n        let text = this.add.text(10, 10, '', { color: 'black', fontFamily: 'Arial', fontSize: '32px '});\r\n        \r\n        // Input elements\r\n        let element = this.add.dom(this.game.renderer.width / 2, this.game.renderer.height / 2 + 150).createFromCache(CST.TEXT.INPUT).setDepth(2)\r\n        element.addListener('click');\r\n        this.slimeCount = \"\";\r\n        this.mutationRate = \"\";\r\n        this.treeCount = \"\";\r\n\r\n\r\n        element.on('click', function (event) {\r\n            if (event.target.name === 'submitButton') {\r\n                console.log(this === element)\r\n                console.log(this.constructor.name)\r\n                console.log(event.target.constructor.name)\r\n                this.slimeCount = element.getChildByName('slimeCount').value;\r\n                this.mutationRate = element.getChildByName('mutationRate').value;\r\n                this.treeCount = element.getChildByName('treeCount').value;\r\n                console.log(this.slimeCount)\r\n                \r\n                if (this.slimeCount.value !== '' && this.mutationRate.value !== '' && this.treeCount.value !== '') {\r\n                    element.removeListener('click');\r\n                    console.log(this.slimeCount)\r\n                    console.log(\"clickety click!\")\r\n                    console.log(this === element)\r\n                    console.log(this.constructor.name)\r\n         \r\n                    this.scene.start(CST.SCENES.PLAY, \r\n                        {\r\n                            slimeCount: this.slimeCount, \r\n                            mutationRate: this.mutationRate,\r\n                            treeCount: this.treeCount\r\n                        })\r\n                }\r\n            }  \r\n        }, this);\r\n\r\n        // // create audio\r\n        // this.sound.pauseOnBlur = false;\r\n        // this.sound.play(\"title_music\", {\r\n        //     loop: true\r\n        // })\r\n\r\n        /*\r\n            PointerEvents:\r\n                pointerover - hovering\r\n                pointerout - not hovering\r\n                pointerup - click and release\r\n                pointerdown - just  click\r\n\r\n        */\r\n\r\n        // playButton.setInteractive();\r\n\r\n        // playButton.on(\"pointerover\", () => {\r\n        //     playButton.setScale(0.12)\r\n        //     playButton.clearAlpha();\r\n        // })\r\n\r\n        // playButton.on(\"pointerout\", () => {\r\n        //     playButton.setScale(0.10)\r\n        //     playButton.alpha = 0.9;\r\n        //     //this.scene.start();\r\n        // })\r\n\r\n        // playButton.on(\"pointerup\", (event) => {\r\n\r\n\r\n        //     console.log(this.constructor.name)\r\n        //     this.scene.start(CST.SCENES.PLAY, \r\n        //         {\r\n        //             slimeCount: this.slimeCount, \r\n        //             mutationRate: this.mutationRate,\r\n        //             treeCount: this.treeCount\r\n        //         })\r\n        //     playButton.setScale(0.10);\r\n        //     playButton.clearAlpha();\r\n        // })\r\n    }\r\n\r\n    // update () {\r\n        \r\n    //     console.log(this.slimeCount.value)\r\n    // }\r\n}\r\n","export class Sprite extends Phaser.Physics.Arcade.Sprite {\r\n    /**\r\n     * \r\n     */\r\n    constructor(scene, x, y, texture, frame) {\r\n        super(scene, x, y, texture, frame);\r\n        scene.sys.updateList.add(this);\r\n        scene.sys.displayList.add(this);\r\n        this.setScale(1);\r\n        this.setOrigin(0, 0);\r\n        scene.physics.world.enableBody(this);\r\n\r\n        this.timeArray = [];\r\n        this.timedAgeArray = [];\r\n        this.generation = 1;\r\n        \r\n        this.vision = 0\r\n        this.maxHP = 150;\r\n        this.hp = 100;\r\n        this.speed = 0;\r\n        this.age = 0;\r\n        this.name = \"\"\r\n\r\n    }\r\n\r\nsenescense(time) {\r\n    // Organism aging; modifies life\r\n    if (time % 30 === 0 && this.timedAgeArray.includes(time) === false) {\r\n        this.timedAgeArray.push(time)\r\n        this.age += 1\r\n        //console.log(this.name + \" is now age: \" + this.age)\r\n        this.hp -= this.age\r\n        //this.maxHP -=5\r\n\r\n        // Lose 5 max health per \"year\" after age 5\r\n        if (this.age > 5) {\r\n            this.maxHP -= 10\r\n        }\r\n    }\r\n}\r\n\r\nreproduce(nameCounter, key ) {\r\n    // Modifies life; creates new instance of organism\r\n    if (this.age >= 2 && this.hp > 100) {\r\n        //let offspring = Object.assign(Object.create(Object.getPrototypeOf(this)), this)\r\n        let offspring = organisms.create(this.x, this.y, key)\r\n        this.hp = this.hp / 2;\r\n        offspring.hp = this.hp / 2;\r\n        offspring.name = \"Org\" + nameCounter;\r\n        \r\n        return offspring;\r\n    } else {\r\n        return null;\r\n    }\r\n\r\n    \r\n}\r\n\r\nconsume(food) {\r\n    // Restores health; chance increased by speed\r\n    // 80% base chance, each point of speed + 2%; 20% max\r\n}\r\n\r\nmetabolise(rate, time) {\r\n    // Daily process which lowers health\r\n    // Increased by speed\r\n\r\n    if (time % 2 === 0 && this.timeArray.includes(time) === false) {\r\n        this.timeArray.push(time);\r\n        this.hp = this.hp - rate\r\n        //console.log(this.hp + \" HP Remaining for: \" + this.name)\r\n    }\r\n    \r\n}\r\n\r\n}","import { CST } from \"../CST\";\r\nimport { Sprite } from \"../Sprite\";\r\n\r\nexport class PlayScene extends Phaser.Scene {\r\n \r\n    constructor() {\r\n        super({ \r\n            key: CST.SCENES.PLAY,\r\n         });\r\n    }\r\n\r\n    init(data) {\r\n        console.log('init', data);\r\n        this.slimeCount = data.slimeCount;\r\n        this.mutationRate = data.mutationRate\r\n        this.treeCount = data.treeCount\r\n        \r\n    }\r\n    preload() {\r\n\r\n    // Create animations\r\n    this.anims.create({\r\n        key: 'idle',\r\n        frames: this.anims.generateFrameNames('slime', {prefix: 'slime-0', start: 5, end: 8, suffix: '.png'}),\r\n        frameRate:5,\r\n        repeat: -1\r\n    })\r\n    this.anims.create({\r\n        key: 'north',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 1, end: 4, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    this.anims.create({\r\n        key: 'south',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 5, end: 8, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    this.anims.create({\r\n        key: 'west',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-', start: 9, end: 12, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    // Load map tiles\r\n    this.load.image('tileset', './assets/maps/overworld_tileset_grass.png');\r\n    this.load.tilemapTiledJSON('map', './assets/maps/evo-tileset.json');\r\n    this.load.image('tree', './assets/image/overworld-92.png');\r\n\r\n    // Ouput files loaded to console\r\n    this.load.on(\"load\", (file) => {\r\n        console.log(file.src)\r\n    })\r\n    \r\n    }\r\n    create() {\r\n        \r\n        //const map = this.make.tilemap({ key: 'map'});\r\n        let map = this.add.tilemap('map');\r\n        //const tileset = map.addTilesetImage('evo-default', 'tileset');\r\n        let tileset = map.addTilesetImage('evo-default', 'tileset')\r\n\r\n        // Layers\r\n        let baseLayer = map.createStaticLayer(\"Base\", tileset, 0, 0).setDepth(-1);\r\n        //this.treeLayer = map.createStaticLayer(\"Trees\", tileset, 0, 0);\r\n        //let waterLayer = map.createStaticLayer(\"Water\", tileset, 0, 0);\r\n        //const structureLayer = map.createStaticLayer(\"Structures\", tileset, 0, 0).setDepth(0);\r\n\r\n        this.trees = this.physics.add.group()\r\n\r\n        // Add trees group to the window object to make accessible in console\r\n        window.trees = this.trees;\r\n\r\n        // Create n number of trees at random locations troughout the grid;\r\n        for (let i = 0; i < this.treeCount; i++) { // Default 120\r\n\r\n            let x = Phaser.Math.RND.between(0, 800);\r\n            let y = Phaser.Math.RND.between(0, 600);\r\n\r\n            this.trees.create(x, y, 'tree')\r\n        };\r\n\r\n        // Set tree hitbox size\r\n        for (let tree of this.trees.getChildren()) {\r\n            tree.setSize(10, 10)\r\n        };\r\n\r\n\r\n        this.gameTime = 0;\r\n        this.nameCounter = 0;\r\n        //let slime = this.physics.add.sprite(100, 330,'slime', 'slime-05.png');\r\n\r\n        //let slime = new Sprite(this, 100, 100, CST.SPRITE.SLIME)\r\n        //this.physics.add.existing() //manual add\r\n        //window.slime = slime; // Add slime to window object to access from console.\r\n        //slime.setInteractive().setAlpha(0.5)\r\n        //this.input.on(\"gameobjectdown\", this.onObjectClicked);\r\n        \r\n\r\n        this.organisms = this.physics.add.group({classType: Sprite})\r\n        for (let i = 0; i < this.slimeCount; i++) {\r\n            let x = Phaser.Math.RND.between(100, 500);\r\n            let y = Phaser.Math.RND.between(100, 300);\r\n\r\n            this.organisms.create(x, y, 'slime')\r\n            this.organisms.getChildren()[i].name = \"Org\" + this.nameCounter\r\n            this.organisms.getChildren()[i].speed = Phaser.Math.Between(0, 20)\r\n            this.organisms.getChildren()[i].vision = Phaser.Math.Between(0, 50)\r\n            this.nameCounter++ \r\n        };\r\n\r\n        window.organisms = this.organisms\r\n\r\n        // Takes an array of objects and passes each of them to the given callback.\r\n        Phaser.Actions.Call(this.organisms.getChildren(), function(organism) {\r\n        // make item interactive\r\n        organism.setInteractive();\r\n        organism.setBounce(0.5,0.5)\r\n        organism.setCollideWorldBounds(true);\r\n        \r\n        }, this);\r\n\r\n        //this.body.onWorldBounds = true;\r\n        // this.physics.arcade.collide(this.organisms), (organism) => {\r\n        //     organism.destroy();\r\n        // }\r\n        //slime.setCollideWorldBounds(true);\r\n\r\n\r\n        // Text objects\r\n        let timerText = this.add.text(16, 16, 'Timer: ' + 0, { fontSize: '12px', fill: '#fff' })\r\n        let timer = this.time.addEvent({\r\n            delay:1000,\r\n            callback: () => {this.gameTime++; timerText.setText('Timer: ' + this.gameTime);},\r\n            callbackScope: this,\r\n            repeat: -1\r\n        });\r\n        this.orgLabel = this.add.text(16, 42, 'THE LIVING', {fontSize: '13px', fill: '#000'}).setDepth(10);\r\n        this.orgLabel.setAlpha(0.75);\r\n        this.orgText = this.add.text(16, 55, '', {fontSize: '12px', fill: '#fff'}).setDepth(10);\r\n        this.orgText.setAlpha(0.75);\r\n\r\n        this.updateLabel = this.add.text(400, 42, 'UPDATES', {fontSize: '13px', fill: '#000'}).setDepth(10);\r\n        this.updateLabel.setAlpha(0.75);\r\n        this.updateText = this.add.text(400, 55, '', { fontSize: '12px', fill: '#fff' }).setDepth(10);\r\n        this.updateText.setAlpha(0.75);\r\n\r\n        // Respawn trees\r\n        let treeTimer = this.time.addEvent({\r\n            delay: 20000,\r\n            callback: this.regrowTrees,\r\n            callbackScope: this,\r\n            repeat: -1\r\n        });\r\n\r\n        // Map Collisions\r\n        //this.physics.add.collider(slime, this.treeLayer);\r\n        //this.physics.add.collider(slime, waterLayer);\r\n        //this.physics.add.collider(this.organisms, this.treeLayer);\r\n        this.physics.add.overlap(this.organisms, this.trees, this.collectTree, null, this);\r\n        //this.physics.add.collider(this.organisms, waterLayer);\r\n        this.physics.add.collider(this.organisms, this.organisms, ()=> {\r\n            for (let org of this.organisms.getChildren()) {\r\n                this.randomMovement(org);\r\n            }\r\n        });\r\n\r\n        // this.physics.add.collider(this.organisms, this.organisms, ()=> {\r\n        //     for (let org of this.organisms.getChildren()) {\r\n        //         this.randomMovement(org);\r\n        //     }\r\n        // });\r\n\r\n        this.updateOutput = [];\r\n        this.timedUpdate = this.time.addEvent({\r\n            delay: 3000,\r\n            callback: () => {this.updateOutput.shift()},\r\n            callbackScope: this,\r\n            loop: true\r\n        });\r\n\r\n        this.graphUpdate = this.time.addEvent({\r\n            delay: 30000,\r\n            callback: this.pushGraph,\r\n            callbackScope: this,\r\n            loop: true\r\n        })\r\n\r\n        // Specify property\r\n        //this.treeLayer.setCollisionByProperty({collide:true});\r\n        //waterLayer.setCollisionByProperty({collide:true});\r\n        \r\n        // Map events \r\n            //by index\r\n        // this.treeLayer.setTileIndexCallback([96], (Sprite) => {\r\n        //     //console.log(Sprite.x, Sprite.y)\r\n        //     Sprite.hp += 10\r\n        // }, this)\r\n\r\n\r\n\r\n            //treeLayer.removeTileAt(tile.x, tile.y)\r\n\r\n        //this.treeLayer.renderDebug(this.add.graphics)\r\n         /*\r\n        gameobject events:\r\n            animationstart\r\n            animationrepeat\r\n            animationupdate\r\n            animationcomplete\r\n        */\r\n        //    slime.on(\"animationupdate\", () => {\r\n        //        console.log(\"ahhhhh\")\r\n        //    });\r\n        //    slime.on(\"animationupdate\", () => {\r\n        //     console.log(\"LEVELUP\")\r\n        // });\r\n        \r\n\r\n    }\r\n    update(time, delta) { //delta 16.666 @ 60fps -- delta is fps in milliseconds\r\n        // this.physics.world.collide(slime, slime, (slime) => {\r\n        //     slime.destroy();\r\n        // })\r\n        this.seconds = new Date().getUTCSeconds();\r\n        this.slimeOutput = [];\r\n\r\n\r\n        this.timerText;\r\n        // this.movementAnim(slime);\r\n        // this.randomMovement(slime);\r\n\r\n        let organisms = this.organisms.getChildren();\r\n        // apply collision to group\r\n        //this.physics.world.collide(organisms)\r\n\r\n        // apply collision to group & slime\r\n        // this.physics.world.collide(organisms, slime, (organisms, slime)=>{\r\n        //     organisms.destroy()\r\n        //     slime.destroy()\r\n        // })\r\n\r\n        //console.log(slime.hp)\r\n        let numOrganisms = organisms.length;\r\n    \r\n        for (let i = 0; i < numOrganisms; i++) {\r\n            \r\n            if (organisms[i].hp <= 50) {\r\n                organisms[i].setScale(0.5);\r\n            } else if (organisms[i].hp > 50 && organisms[i].hp <= 75 ) {\r\n                organisms[i].setScale(0.75);\r\n            } else if (organisms[i].hp > 75 && organisms[i].hp <= 100 ) {\r\n                organisms[i].setScale(1.0);\r\n            } else if (organisms[i].hp > 100 && organisms[i].hp <= 125) {\r\n                organisms[i].setScale(1.25);\r\n            } else if (organisms[i].hp > 125 && organisms[i].hp <= 150) {\r\n                organisms[i].setScale(1.50);\r\n            }\r\n            \r\n            // if (slime.active === true) {\r\n            //     //this.physics.accelerateToObject(organisms[i], slime)\r\n            // }\r\n            //console.log(organisms[i].hp)\r\n\r\n            // movement\r\n            this.movementAnim(organisms[i]);\r\n            organisms[i].metabolise(2, this.gameTime)\r\n            organisms[i].senescense(this.gameTime)\r\n            this.cloneSprite(organisms[i])\r\n\r\n\r\n            if (organisms[i].body.velocity.x === 0 && organisms[i].body.velocity.y === 0 ) {\r\n                this.randomMovement(organisms[i]);\r\n            } else {\r\n                for (let tree of this.trees.getChildren()) {\r\n                    if (this.distanceToObject(organisms[i], tree) <= organisms[i].vision && tree.visible) {\r\n                        //organisms[i].setVelocity(0, 0)\r\n                        //console.log(this.distanceToObject(organisms[i], tree))\r\n                        //console.log(organisms[i].vision)\r\n                        this.physics.accelerateToObject(organisms[i], tree, 60, 25+organisms[i].speed, 25+organisms[i].speed)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        // Death loop\r\n        for (let org of this.organisms.getChildren()) {\r\n            if (org.hp <= 0) {\r\n                //console.log(org.name + \" is dead :( at age \" + org.age + \"| Vision: \" + org.vision + \"| Speed: \" + org.speed)\r\n                this.updateOutput.push(org.name + \" died at age \" + org.age)\r\n                org.destroy()\r\n                numOrganisms = organisms.length\r\n            }\r\n        };\r\n\r\n        // Update Organism list\r\n        for (let org of this.organisms.getChildren()) {\r\n            this.slimeOutput.push(org.name + ' Age: ' + org.age  + ' Gen: ' + org.generation + ' HP: ' + Math.round(org.hp) + ' Vision: ' + org.vision + ' Speed: ' + org.speed)\r\n        }\r\n        this.orgText.setText(this.slimeOutput);\r\n        this.updateText.setText(this.updateOutput);\r\n        if(this.updateOutput.length > 8) {\r\n            this.updateOutput.shift()\r\n        }\r\n        this.colorSlimes()\r\n\r\n    }\r\n\r\n    onObjectClicked(pointer, gameObject) {\r\n        gameObject.setScale(1.5);\r\n    }\r\n\r\n    movementAnim(obj) {\r\n        if (obj.active === true) {\r\n            if(obj.body.velocity.y > 0) {\r\n                obj.anims.play('south', true);\r\n            } else if (obj.body.velocity.y < 0) {\r\n                obj.anims.play('north', true);\r\n            } else if (obj.body.velocity.x < 0) {\r\n                obj.anims.play('west', true);\r\n                obj.flipX = false;\r\n            } else if (obj.body.velocity.x > 0) {\r\n                obj.anims.play('west', true);\r\n                obj.flipX = true;\r\n            } else {\r\n                obj.anims.play('idle', true);\r\n            }\r\n        }\r\n    }\r\n\r\n    randomMovement(obj) {\r\n            if (obj.active === true) {\r\n                const d = Phaser.Math.Between(0, 500)\r\n                if (d < 100 && d > 95) {\r\n                    obj.setVelocityY(35+obj.speed);\r\n                } else if (d < 95 && d > 90) {\r\n                    obj.setVelocityY(-35)-obj.speed;\r\n                } else if (d < 90 && d > 85) {\r\n                    obj.setVelocityX(35+obj.speed);\r\n                } else if (d < 85 && d > 80) {\r\n                    obj.setVelocityX(-35-obj.speed);\r\n                } else if (d < 80 && d > 75) {\r\n                    obj.setVelocity(0,0);\r\n                }\r\n            }\r\n    }\r\n\r\n    collectTree(sprite, tree) {\r\n        tree.disableBody(true, true);\r\n        sprite.hp += 10;\r\n        if (sprite.hp > 150) {\r\n            sprite.hp = 150;\r\n        }\r\n    };\r\n\r\n    regrowTrees() {\r\n        let trees = this.trees.getChildren()\r\n        let numtrees = trees.length\r\n\r\n        for (let i = 0; i < numtrees; i++) {\r\n            if (this.seconds < 20 && i <= Math.ceil(this.treeCount / 3)) {\r\n                trees[i].enableBody(false, trees[i].x, trees[i].y, true, true);\r\n            } else if (this.seconds > 20 && this.seconds < 40 && i > Math.ceil(this.treeCount/3) && i < Math.ceil(this.treeCount/1.5)) {\r\n                trees[i].enableBody(false, trees[i].x, trees[i].y, true, true);\r\n            } else if (this.seconds > 40 && i > Math.ceil(this.treeCount/1.5)) {\r\n                trees[i].enableBody(false, trees[i].x, trees[i].y, true, true);\r\n            }\r\n\r\n            //console.log(\"**Spring has sprung**\")\r\n        }\r\n    };\r\n\r\n    distanceToObject(obj1, obj2) {\r\n        let distanceX = Math.abs(obj1.x - obj2.x)\r\n        let distanceY = Math.abs(obj1.y - obj2.y)\r\n\r\n        return distanceX + distanceY\r\n    };\r\n\r\n    colorSlimes() {\r\n        for (let org of this.organisms.getChildren()) {\r\n            if (org.speed > 9 && org.speed < 20) {\r\n                org.setTint(0xff0000,0xffe600,0xffe600,0xffe600);\r\n            } else if (org.speed > 19) {\r\n                org.setTint(0xf75482)\r\n            }\r\n        }\r\n    }\r\n\r\n    cloneSprite(org) {\r\n        if (org.age >= 2 && org.hp > 100) {\r\n            let offspring = this.organisms.create(org.x, org.y, 'slime')\r\n            org.hp = org.hp / 2;\r\n            offspring.hp = org.hp / 2;\r\n            offspring.name = \"Org\" + this.nameCounter;\r\n            offspring.age = 0;\r\n            offspring.vision = org.vision\r\n            offspring.generation = org.generation + 1;\r\n            this.updateOutput.push(offspring.name + \" was born\")\r\n            let mutate = Math.random()\r\n            if ( mutate < (this.mutationRate*0.01)) { // 20% chance of mutation\r\n                if (mutate < 0.10) {\r\n                    offspring.vision -= 3;\r\n                    //console.log(\"**Vision Mutation -3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' vision mutation -3');\r\n                } else if (mutate > 0.10 && mutate < 0.21) {\r\n                    offspring.vision += 3;\r\n                    //console.log(\"**Vision Mutation +3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' vision mutation +3')\r\n                }\r\n            };\r\n            offspring.speed = org.speed\r\n            mutate = Math.random()\r\n            if ( mutate < (this.mutationRate*0.01)) { // Chance of mutation\r\n                if (mutate < 0.10) {\r\n                    offspring.speed -= 3;\r\n                    //console.log(\"**Speed Mutation -3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' speed mutation -3');\r\n                } else if (mutate > 0.10 && mutate < 0.21) {\r\n                    offspring.speed += 3;\r\n                    //console.log(\"**Speed Mutation +3 for \" + offspring.name);\r\n                    this.updateOutput.push(offspring.name + ' speed mutation +3');\r\n                }\r\n            };\r\n            if (offspring.speed < 0) {\r\n                offspring.speed = 0;\r\n            }\r\n            if (offspring.vision < 0) {\r\n                offspring.vision = 0;\r\n            }\r\n            this.nameCounter++;\r\n            offspring.setInteractive()\r\n            offspring.setCollideWorldBounds(true);\r\n        }\r\n    }\r\n\r\n    pushGraph() {\r\n        let orgArray = this.organisms.getChildren()\r\n        let visionArray = [];\r\n        let speedArray = [];\r\n        for (let org of orgArray) {\r\n            visionArray.push(org.vision)\r\n            speedArray.push(org.speed)\r\n        }\r\n        //console.log(orgArray.length)\r\n        //console.log(visionArray)\r\n        //console.log(speedArray)\r\n        window.dataPacket.avgVision.push(Math.round(visionArray.reduce((a,b)=>{return a+b})/visionArray.length))\r\n        window.dataPacket.avgSpeed.push(Math.round(speedArray.reduce((a,b)=>{return a+b})/speedArray.length))\r\n        window.dataPacket.creatures.push(orgArray.length)\r\n        window.dataPacket.time.push(this.gameTime)\r\n        if (window.dataPacket.time.length > 20) {\r\n            window.dataPacket.avgVision.shift()\r\n            window.dataPacket.avgSpeed.shift()\r\n            window.dataPacket.creatures.shift()\r\n            window.dataPacket.time.shift()\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n\r\n}\r\n","/** @types {import(\"../typings/phaser\")} */\nimport {LoadScene} from \"./scenes/LoadScene\";\nimport {MenuScene} from \"./scenes/MenuScene\";\nimport {PlayScene} from \"./scenes/PlayScene\";\n\nlet game = new Phaser.Game({\n    parent: 'phaser-tag',\n    width: 800,\n    height: 600,\n    dom: {\n        createContainer: true\n    },\n    scene:[\n        LoadScene,\n        MenuScene,\n        PlayScene\n    ],\n    physics: {\n        default: \"arcade\",\n        arcade: {\n            debug: true\n        }\n    }\n});\n\n\n\n\n/*\n//import Life from './life.js';\nconst gameState = {}\nconst config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    backgroundColor: '#ababab',\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: 100,\n            debug: true\n        }\n    },\n\n    scene: {\n        preload,\n        create,\n        update\n    }\n\n\n};\nconst game = new Phaser.Game(config);\n\nlet slime = \"\";\nlet timer = 0;\nconst healthbar = 100;\n\nfunction preload () {\n    // preload images, sounds & other assets\n    //this.load.json('map', 'assets/grass.json')\n    this.load.image('tileset', 'assets/TilesetGrass/overworld_tileset_grass.png');\n    this.load.tilemapTiledJSON('map', 'assets/TilesetGrass/evo-tileset.json');\n    //this.load.spritesheet('tiles', 'assets/grass.png', {frameWidth: 64, frameHeight: 64})\n    this.load.multiatlas('slime', 'assets/slime.json', 'assets')\n    this.load.spritesheet('slime_back', 'assets/slime1_back.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_front', 'assets/slime1_front.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_side', 'assets/slime1_side.png', {frameWidth: 16, frameHeight: 16})\n    this.load.spritesheet('slime_explode', 'assets/slime_explode.png', {frameWidth: 16, frameHeight: 16})\n};\nfunction create () {\n\n\n    // Layers\n\n\n    // Add organism to scene (full spritesheet) -- .setBounce(10).setFriction(0)\n    this.slime = this.physics.add.sprite(400, 330,'slime', 'slime-05.png');\n    // label(this.slime)\n\n    // Create animations\n    this.anims.create({\n        key: 'idle',\n        frames: this.anims.generateFrameNames('slime', {prefix: 'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:5,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'north',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 1, end: 4, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'south',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'west',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-', start: 9, end: 12, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n\n    //Group of organisms\n    this.organisms = this.physics.add.group({\n        key: 'slime',\n        repeat: 4,\n        setXY: {\n            x: 400,\n            y: 300,\n            stepX: 80,\n            stepY: 20\n        }\n    });\n\n    //scale organism\n    // Phaser.Actions.ScaleXY(this.organisms.getChildren(), -0.10,-0.10);\n\n    // Takes an array of objects and passes each of them to the given callback.\n    Phaser.Actions.Call(this.organisms.getChildren(), function(organism) {\n        organism.speed = Math.random() * 2 + 1;\n        // make item interactive\n        organism.setInteractive();\n\n    }, this);\n\n    let locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n    this.orgLocations = this.add.group({\n        //\n    })\n\n    this.slime.speed = 2;\n    this.physics.world.bounds.width = map.widthInPixels-10;\n    this.physics.world.bounds.height = map.heightInPixels-10;\n    this.slime.setCollideWorldBounds(true);\n\n\n    \n\n\n    // Collision debugging (remove in production)\n    // const debugGraphics = this.add.graphics().setAlpha(0.75);\n    // treeLayer.renderDebug(debugGraphics, {\n    //     tileColor: null,\n    //     collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255),\n    //     faceColor: new Phaser.Display.Color(40, 39, 37, 255)\n    // });\n    \n    \n    \n};\nfunction update () {\n\n    // Slime movement\n    this.slime.setVelocityX(-64)\n    movementAnim(this.slime)\n\n        // Organism movement\n        let organisms = this.organisms.getChildren();\n        let numOrganisms = organisms.length;\n    \n        for (let i = 0; i < numOrganisms; i++) {\n\n            // movement\n            movementAnim(organisms[i]);\n  \n            if (timer < 10) {\n                if (i === 0 || i === 1) {\n                    organisms[i].setVelocityY(64);  \n                } else if (i === 2 || i === 3) {\n                    organisms[i].setVelocityX(64)\n                } else if (i === 5) {\n                    organisms[i].setVelocity(0,0)\n                }\n            }\n\n\n                if (organisms[i].y >= 599) {\n                    organisms[i].setVelocityY(-64)\n                    //organisms[i].anims.play('north', true);\n                } else if (organisms[i].y <= 1) {\n                    organisms[i].setVelocityY(64);\n                    //organisms[i].anims.play('south', true);\n                } else if (organisms[i].x >= 799) {\n                    organisms[i].setVelocityX(-64);\n                    //organisms[i].anims.play('west', true)\n                } else if (organisms[i].x <= 1) {\n                    organisms[i].setVelocityX(64);\n                    //organisms[i].anims.play('west', true)\n                    //organisms[i].flipX = true;\n                } else {\n                    randomMovement(organisms[i])\n                }\n                \n    // if (organisms[i].x >= this.organismMaxX && organisms[i].speed > 0) {\n            //     organisms[i].speed *= -0.25;\n            // } else if (organisms[i].x <= this.organismMinX && organisms[i].speed < 0) {\n            //     organisms[i].speed *= -0.25;\n            // }\n            timer++\n        };\n\n    //this.slime.y -= this.slime.speed\n    //this.slime.anims.play('north', true);\n\n}; \n\n\n\n\n\n\n// function label(obj) {\n//     const style = { font: \"10px Arial\", fill: \"#ffffff\"};\n//     obj.label_score = this.add.text(20, 20, \"0\", style);\n//     obj.hello_sprite.addChild(this.label_score)\n// }\n\n//locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n\n*/"]}