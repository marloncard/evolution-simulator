{"version":3,"sources":["src/CST.js","src/scenes/LoadScene.js","src/scenes/MenuScene.js","src/Sprite.js","src/scenes/PlayScene.js","src/main.js"],"names":["CST","SCENES","LOAD","MENU","PLAY","IMAGE","START","TITLE","AUDIO","SPRITE","SLIME","LoadScene","key","load","setPath","prop","image","audio","frameConfig","spritesheet","atlas","tilemapTiledJSON","loadSprites","frameHeight","frameWidth","loadImages","loadingBar","add","graphics","fillStyle","color","on","percent","fillRect","game","renderer","height","width","console","log","file","src","scene","start","Phaser","Scene","MenuScene","setOrigin","playButton","setDepth","setScale","alpha","setInteractive","clearAlpha","Sprite","x","y","texture","frame","sys","updateList","displayList","physics","world","enableBody","hp","speed","age","loss","mutationRate","food","rate","Physics","Arcade","PlayScene","anims","create","frames","generateFrameNames","prefix","end","suffix","frameRate","repeat","gameTime","slime","window","setAlpha","input","onObjectClicked","organisms","group","classType","setXY","stepX","stepY","Actions","Call","getChildren","organism","setCollideWorldBounds","timer","time","addEvent","delay","callback","callbackScope","delta","movementAnim","randomMovement","collide","destroy","numOrganisms","length","i","metabolise","pointer","gameObject","obj","active","body","velocity","play","flipX","d","Math","Between","setVelocityY","setVelocityX","setVelocity","Game","default","arcade","debug"],"mappings":";;AKCA;;AACA;;ALFO,AKGP,ILHaA,GAAG,GAAG;AACfC,ACDJ,ACAA,AEAA,EJCIA,MAAM,EAAE;AACJC,AKFR,ILEQA,IAAI,EAAE,MADF;AAEJC,AKER,ADJA,IJEQA,AKEJ+B,ILFQ,AKEJ,ELFM,CKEH,IAAIU,CLJH,KKIS,CAACsF,IAAX,CAAgB;ALDnB9H,AKEJiC,EAAAA,ELFIjC,GKEC,CLFG,CKED,CLFG,EKCa;ALJf,AKMRgC,EAAAA,CLPe,KKOT,EAAE,GAFe;ALCvB/B,AKEAqC,ELFArC,AKEAqC,KLFK,AKEA,ELFE,AKED,CACF/B,oBADE,EAEFmC,oBAFE,EAGF4B,oBAHE,CAHiB;ALEnBpE,AKMJwD,EAAAA,ELNIxD,KAAK,AKMF,ELNI,AKMF,WLPF;AAEHC,AKMA4H,ILNA5H,AKMA4H,KLNK,EAAE,AKMA,EAAE,QADJ;ALPF,AKSHC,GLfW,CKeXA,MAAM,EAAE;ALLZ5H,AKMQ6H,ELNR7H,IKMQ6H,CLNH,EAAE,EKMM,EAAE;ALLX9H,AKIQ,ILJRA,KAAK,EAAE;AADJ,AKGE,GLbM;AAafE,AKRuB,CAAhB,CLQPA,AKRJ,MLQU,EAAE;AACJC,AKUR,ILVQA,KAAK,EAAE;AADH;AAbO,CAAZ;;;IGAM4C;;IFEA3C,ACAAmC;;IECA4B;ADFT;;AFEA,ACAA,uBDAc,ACAA;ACCd,AFDc,ACAA,kBCCFhC,KAAZ,EAAmBa,CAAnB,EAAsBC,CAAtB,EAAyBC,OAAzB,EAAkCC,KAAlC,EAAyC;AAAA,ACCzC,uBAAc;AHFA,ACAA,AEEA,kFHDJ,ACAA;ACA+B,AFCjC9C,ACAAA,MDAAA,ACAAA,GDAG,ACAA,EDAEZ,ACAAA,SDAIC,ACAAA,MDAJ,ACAA,CDAWC,ACAAC;ADDd,ACAA,AECI,KHFA,ACAA,6EEGJ;ADDN,AFEH,ACAA,AEAOS,MAAAA,GAAG,EAAEZ,SAAIC,MAAJ,CAAWG,qDDFdsC,KAAN,EAAaa,CAAb,EAAgBC,CAAhB,EAAmBC,OAAnB,EAA4BC,KAA5B;AACAhB,ACAM,IDANA,CCDU,IDCL,CAACiB,GAAN,CAAUC,UAAV,CAAqBjC,GAArB;AACAe,ACEH,IDFGA,KAAK,CAACiB,GAAN,CAAUE,WAAV,CAAsBlC,GAAtB;;AACA,UAAKuB,QAAL,CAAc,CAAd,OFAG,ACAA,CDEN,ACAA;;ACDG,UAAKH,SAAL,CAAe,CAAf,EAAkB,CAAlB,MCCM;AACV,6BFAS,IDAI;AEDTL,AFEA,ACDK,AECT,IDFIA,KAAK,CAACoB,CFEDjD,AGAJ8D,IHAD,CAAU7D,AGAd,CDFI,ACEO8D,CDFOb,KAAd,AFEA,AGAJ,CDFwBC,AFEF,AGAJ,UDFd,MFEA;AEAA,ACCApD,QAAAA,EDDKqD,CCCF,CDDH,CCCK,EDDK,IAAV,ACAc;ADCd,AFCA,ACFA,AEEAY,QAAAA,EDDKX,CFCA,ACFAvC,GAAL,AEEM,CDDN,AFCSZ,ACFAC,CEED,EDDK,CFCb,CEDA,ADDA,CAAe,AEEF2D,CFFb,CDEiB3E,CCFA,CAAjB,CEEQ,CFFYA,AEED8E,KHAEzE,ICFGA,CDExB,EAA4B,ECFR,CAAUE,GEEtB,CAA8B,CFFtC,EAAqCwC,IEE7B,EAAuC,GFF/C,CAA+C,CAA/C;ACEA,AFCI,ACDJ,AEAgDgC,UDA3CZ,ADADnB,AEA4C+B,GDAhD,AFCSlE,GEDE,ACA2C,CDAtD,AFCI,CAAUG,AGD0C,EFA1C,GDCV,ACDa,CDCGhB,GGD2B,CFAzB2B,GAAL,CAASX,CDCFX,ICDP,CDCG,ACDY,CDCFU,IAAV,ACDiBmB,CDCjC,EAAiClC,CCDL,CAAUmC,ODCD9B,CCDT,CAAmBgC,GDCd,CAAUtB,CCDf,GDCK,ACDsB,CDCvD,ACDa,EAA6C,KAAKmB,IAAL,CAAUC,QAAV,CAAmBC,MAAnB,GAA4B,CAA5B,GAAgC,EAA7E,EAAiFpC,SAAIK,KAAJ,CAAUC,KAA3F,EAAkG2C,QAAlG,CAA2G,CAA3G,EAA8GC,QAA9G,CAAuH,IAAvH,CAAjB;ACVqC,AFYpC,ACDDF,AEDmEL,MFCnEK,IEDmEL,KAAK,CFC9D,CAACQ,AED+D,CAA3B,IFC/C,GAAmB,GAAnB,CAJK,CAML;ACDH,AFCA,ACCG,AEJ6E6B,UAAAA,GAAG,EAAE,CAAnC;AFK/C,AELqFC,UAAAA,MAAM,EAAE;AFM7F,AEN+C,SAAvC,CAFM;AFSd,AENAC,QAAAA,SAAS,EAAC,CAHI,YHMN;AACR,AGHAC,QAAAA,GHGKtE,GGHC,CHGN,CAAUC,AGHF,CAAC,MHGT,CAAkB,OEDfsD,MAAM,GFCT;AEAJ,ADKI,AEZc,OAAlB;ADQA,AFCI,AGHJ,WDEKD,AFCI,AGHJQ,GDEL,CFCa5D,CGHb,CAAW6D,CDEC,CAAZ,AFCI,IAAiB5E,AGHrB,CAAkB,QHGOQ,KAArB,EAA4B;AECnC,AFAW,AGHJI,QAAAA,GAAG,EHGMC,AGHJ,IHGD,CAAUI,EGJA,GHIV,CAAgBjB,SAAIQ,KAAJ,CAAUO,IAAV,CAAhB,EAAiCf,SAAIQ,KAAJ,CAAUO,IAAV,CAAjC;AACH,AGHD8D,QAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWG,kBAAX,CAA8B,OAA9B,EAAuC;AHIlD,AGJmDC,UAAAA,MAAM,EAAC,SAAR;AAAmBpC,UAAAA,KAAK,EAAE,CAA1B,YDI7C0B,cAAc,CACpB;AACH,ACNmFW,UAAAA,GAAG,EAAE,CAAlC;AAAqCC,UAAAA,MAAM,EAAE,cHKpF/D,aAAa;AACrB,ACOA8B,AEb+C,MFa/CA,GEbQ,CAFM,CHQTnC,IAAL,CAAUC,ACOA,CAACsC,MDPX,CAAkB,OCOlB,UDPA;ACSAJ,AEdAkC,MFcAlC,EEdAkC,QFcU,CAACnD,AEdF,EFcT,AEdU,CFcI,CEjBA,ODUduC,KDOA,CCPM,CACV,ADMiC,YAAM;ACLvC,AFFI,ACQItB,AEdJmC,QFcInC,AEdJmC,GHMK,GGNC,CHMGpE,CGND,CAAC,CFcK,CDRd,ACQemC,IDRElD,ICQb,CAAoB,IDRHS,ACQjB,MDRJ,EAA6B;AEGpC,AFFW,ACQAuC,AEnBU,OAAlB,CFmBQA,KDRKnC,IAAL,CAAUM,ACQA,CAACkC,UDRX,ACQA,CDRsBrD,SAAIS,MAAJ,CAAWM,IAAX,CAAtB,EAAwCf,SAAIS,MAAJ,CAAWM,IAAX,CAAxC,EAA0DG,WAA1D;AACH,ACQA,AEdL,OFWI,IEXCyD,KAAL,CAAWC,MAAX,CAAkB;AHOjB,ACSG5B,AEfApC,MFeAoC,EEfApC,GAAG,EAAE,GFeK,CAACmB,EAAX,CAAc,AEhBA,YFgBd,EAA4B,YAAM;AAC9BiB,AEfJ6B,QFeI7B,AEfJ6B,MAAM,EAAE,EFeM,CAAC3B,EEfFyB,KAAL,CFeJ,AEfeG,CFeK,GCRrBP,CDQC,KCRK,QCPD,CAA8B,OAA9B,EAAuC;ADQnD,ADQQvB,AEhB4C+B,QFgB5C/B,EEhB4C+B,MAAM,EFgBxC,AEhByC,CFgBxC5B,KAAX,GAAmB,AEhBwB,GFgB3C,CAF8B,CAG9B;ACRR,ADSK,AElBiER,OFclE,GEdkEA,KAAK,EAAE,CAA1B,YHMzC;AEIV,AFJU,ACcNK,AEpB4EgC,MFoB5EhC,IEpB4EgC,CDU3Ef,EAAL,ACVmF,EAAE,CDU3E,ADUI,AEpBqC,CFoBpClC,EAAX,CAAc,CCVHkC,EAAL,GAAUM,IAApB,CAHa,ADaT,CCTJ,CDS+B,YAAM;ACRxC,ADSW,AErBgFU,QFqBhF,EErBgFA,GFqB5E,CAACvC,EErBiF,EAAE,CFqBxF,CAAWC,KAAX,CAAiB3C,SAAIC,MAAJ,CAAWG,IAA5B;ADdJ,AGP+C,SAAvC,CAFM;AHUd,ACcI4C,AErBJkC,QFqBIlC,AErBJkC,SAAS,CFqBK,CAAChC,AErBL,EAHI,MFwBV,CAAoB,IAApB;ADbJ,ACcIF,AErBJmC,QFqBInC,AErBJmC,MAAM,EAAE,CAAC,CFqBK,CAAC9B,UAAX;ADbJ,ACcC,AE1Ba,EDxBMT,KD8CpB,AEtBJ,CDxB8B,CAAC4B,OAAP,CAAeC,MAAf,CAAsBnB;AFqC1C,ACcH,AErBD,WHOSzC,AGPJ8D,IHOD,CAAUvD,AGPd,CAAWwD,IHOP,CAAgB,CGPpB,CAAkB,KHOd,EAAyB,2BAAzB,EAAsD,4BAAtD;AACA,AGPAhE,QAAAA,GHOKC,AGPF,EAAE,EHOL,CAAUG,GGRI,EHQd,CAAgB,SAAhB,EAA2B,2CAA3B;AACA,AGPA6D,QAAAA,GHOKhE,GGPC,CHON,CAAUQ,AGPF,KAAKsD,KAAL,CAAWG,KHOnB,CAA2B,KAA3B,EAAkC,KGP1B,CAA8B,OAA9B,EAAuC,iBHO/C;AACA,AGRgDC,UAAAA,CHQ3CzD,KGRiD,EAAC,IHQvD,CAAiB,GGR8B;AHS3CC,AGT6DoB,EF9B1CC,MDuCnBrB,ACvCyB,CAACsB,CE8BmCF,KAAK,E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","file":"main.1e43358e.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENES: {\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        PLAY: \"PLAY\"\r\n    },\r\n    IMAGE: {\r\n        START: \"start.png\",\r\n        TITLE: \"title_bg800.jpg\"\r\n    },\r\n    AUDIO: {\r\n        TITLE: \"tbd.mp3\"\r\n    },\r\n    SPRITE: {\r\n        SLIME: \"slime.png\"\r\n\r\n    }\r\n}\r\n","import { CST } from \"../CST\";\r\n\r\nexport class LoadScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.LOAD\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n    loadImages() {\r\n        this.load.setPath(\"./assets/image\");\r\n\r\n        for (let prop in CST.IMAGE) {\r\n            this.load.image(CST.IMAGE[prop], CST.IMAGE[prop]);\r\n        }\r\n    }\r\n    loadAudio() {\r\n        this.load.setPath(\"./assets/audio\");\r\n\r\n        for (let prop in CST.AUDIO) {\r\n            this.load.audio(CST.AUDIO[prop], CST.AUDIO[prop]);\r\n        }\r\n    }\r\n    loadSprites(frameConfig) {\r\n        this.load.setPath(\"./assets/sprite\");\r\n\r\n        for (let prop in CST.SPRITE) {\r\n            this.load.spritesheet(CST.SPRITE[prop], CST.SPRITE[prop], frameConfig);\r\n        }\r\n    }\r\n    preload() {\r\n        // load image, spritesheet, sound\r\n        // this.loadAudio();\r\n        //this.load.spritesheet(\"slime\", \"./assets/sprite/slime.png\", {frameHeight: 16, frameWidth: 16});\r\n        //load atlases\r\n        this.load.atlas(\"slime\", \"./assets/sprite/slime.png\", \"./assets/sprite/slime.json\")\r\n        this.load.image('tileset', 'assets/sprite/overworld_tileset_grass.png');\r\n        this.load.tilemapTiledJSON('map', 'assets/sprite/evo-tileset.json');\r\n        this.loadSprites({\r\n            frameHeight: 16,\r\n            frameWidth: 16\r\n        });\r\n        this.loadImages();\r\n\r\n        // this.load.image(\"title_bg\", \"./assets/title_bg800.jpg\");\r\n        // this.load.image(\"play_button\", \"./assets/start.png\")\r\n\r\n        //this.load.audio(\"title_music\", \"./assets/some-song.mp3\")\r\n\r\n        // create loading bar\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff //white\r\n            }\r\n        })\r\n\r\n        /* \r\n        Loader Events:\r\n            complete - when done loading everything\r\n            progress - loader number progress in decimal\r\n        */\r\n\r\n        //simulate large load\r\n        /*\r\n        for (let i = 0; i < 100; i++) {\r\n            this.load.spritesheet(\"grass_tile\" + i, \"./assets/grass_tile.png\", {\r\n                frameHeight: 32,\r\n                frameWidth: 32\r\n            });\r\n        }\r\n        */\r\n        \r\n\r\n\r\n        this.load.on(\"progress\", (percent) => {\r\n            loadingBar.fillRect(0, this.game.renderer.height / 2, this.game.renderer.width * percent, 50);\r\n            console.log(percent);\r\n        })\r\n\r\n        this.load.on(\"complete\", () => {\r\n            //this.scene.start(CST.SCENES.MENU, \"Hello from Load Scene\")\r\n        });\r\n\r\n        this.load.on(\"load\", (file) => {\r\n            console.log(file.src)\r\n        })\r\n\r\n    }\r\n    create() {\r\n\r\n            this.scene.start(CST.SCENES.MENU)\r\n            \r\n    }\r\n\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class MenuScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.MENU\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n    create() {\r\n        this.add.image(0,0, CST.IMAGE.TITLE).setOrigin(0);\r\n        \r\n        let playButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2 + 20, CST.IMAGE.START).setDepth(1).setScale(0.15);\r\n        playButton.alpha = 0.9;\r\n\r\n        // // create audio\r\n        // this.sound.pauseOnBlur = false;\r\n        // this.sound.play(\"title_music\", {\r\n        //     loop: true\r\n        // })\r\n\r\n\r\n        /*\r\n            PointerEvents:\r\n                pointerover - hovering\r\n                pointerout - not hovering\r\n                pointerup - click and release\r\n                pointerdown - just  click\r\n\r\n        */\r\n\r\n        playButton.setInteractive();\r\n\r\n        playButton.on(\"pointerover\", () => {\r\n            playButton.setScale(0.17)\r\n            playButton.clearAlpha();\r\n        })\r\n\r\n        playButton.on(\"pointerout\", () => {\r\n            playButton.setScale(0.15)\r\n            playButton.alpha = 0.9;\r\n            //this.scene.start();\r\n        })\r\n\r\n        playButton.on(\"pointerup\", () => {\r\n            this.scene.start(CST.SCENES.PLAY)\r\n            playButton.setScale(0.15);\r\n            playButton.clearAlpha();\r\n        })\r\n    }\r\n\r\n}","export class Sprite extends Phaser.Physics.Arcade.Sprite {\r\n    /**\r\n     * \r\n     */\r\n    constructor(scene, x, y, texture, frame) {\r\n        super(scene, x, y, texture, frame);\r\n        scene.sys.updateList.add(this);\r\n        scene.sys.displayList.add(this);\r\n        this.setScale(1);\r\n        this.setOrigin(0, 0);\r\n        scene.physics.world.enableBody(this);\r\n        \r\n        this.hp = 1000;\r\n        this.speed = 10;\r\n        this.age = 0;\r\n\r\n    }\r\n\r\nsenescense(loss) {\r\n    // Organism aging; modifies life\r\n    this.age += 1\r\n\r\n}\r\n\r\nreproduce(mutationRate) {\r\n    // Modifies life; creates new instance of organism\r\n}\r\n\r\nconsume(food) {\r\n    // Restores health; chance increased by speed\r\n    // 80% base chance, each point of speed + 2%; 20% max\r\n}\r\n\r\nmetabolise(rate) {\r\n    // Daily process which lowers health\r\n    // Increased by speed\r\n    this.hp = this.hp - rate\r\n    //console.log(this.hp)\r\n}\r\n\r\n}","import { CST } from \"../CST\";\r\nimport { Sprite } from \"../Sprite\";\r\n\r\nexport class PlayScene extends Phaser.Scene {\r\n \r\n    constructor() {\r\n        super({ \r\n            key: CST.SCENES.PLAY,\r\n         });\r\n    }\r\n    preload() {\r\n    // Create animations\r\n    this.anims.create({\r\n        key: 'idle',\r\n        frames: this.anims.generateFrameNames('slime', {prefix: 'slime-0', start: 5, end: 8, suffix: '.png'}),\r\n        frameRate:5,\r\n        repeat: -1\r\n    })\r\n    this.anims.create({\r\n        key: 'north',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 1, end: 4, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    this.anims.create({\r\n        key: 'south',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 5, end: 8, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    this.anims.create({\r\n        key: 'west',\r\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-', start: 9, end: 12, suffix: '.png'}),\r\n        frameRate:15,\r\n        repeat: -1\r\n    })\r\n    }\r\n    create() {\r\n        \r\n        let gameTime = 0;\r\n        //let slime = this.physics.add.sprite(100, 330,'slime', 'slime-05.png');\r\n\r\n        let slime = new Sprite(this, 100, 100, CST.SPRITE.SLIME)\r\n        //this.physics.add.existing() //manual add\r\n        window.slime = slime; // Add slime to window object to access from console.\r\n        slime.setInteractive().setAlpha(0.5)\r\n        this.input.on(\"gameobjectdown\", this.onObjectClicked);\r\n        \r\n        this.organisms = this.physics.add.group({\r\n            classType: Sprite,\r\n            key: 'slime',\r\n            repeat: 8,\r\n            setXY: {\r\n                x: 200,\r\n                y: 300,\r\n                stepX: 40,\r\n                stepY: 0\r\n            }\r\n        });\r\n        // this.organisms = this.physics.add.group()\r\n        // this.organisms.add(slime)\r\n        // Takes an array of objects and passes each of them to the given callback.\r\n        Phaser.Actions.Call(this.organisms.getChildren(), function(organism) {\r\n        // make item interactive\r\n        organism.setInteractive();\r\n        organism.setCollideWorldBounds(true);\r\n        \r\n        }, this);\r\n\r\n\r\n        // this.physics.arcade.collide(this.organisms), (organism) => {\r\n        //     organism.destroy();\r\n        // }\r\n        slime.setCollideWorldBounds(true);\r\n\r\n        let timer = this.time.addEvent({\r\n            delay:1000,\r\n            callback: () => {gameTime++; console.log(gameTime);},\r\n            callbackScope: this,\r\n            repeat: -1\r\n        })\r\n         /*\r\n        gameobject events:\r\n            animationstart\r\n            animationrepeat\r\n            animationupdate\r\n            animationcomplete\r\n        */\r\n    //    slime.on(\"animationupdate\", () => {\r\n    //        console.log(\"ahhhhh\")\r\n    //    });\r\n    //    slime.on(\"animationupdate\", () => {\r\n    //     console.log(\"LEVELUP\")\r\n    // });\r\n\r\n\r\n    \r\n    }\r\n    update(time, delta) { //delta 16.666 @ 60fps -- delta is fps in milliseconds\r\n        // this.physics.world.collide(slime, slime, (slime) => {\r\n        //     slime.destroy();\r\n        // })\r\n\r\n        this.movementAnim(slime);\r\n        this.randomMovement(slime);\r\n\r\n        let organisms = this.organisms.getChildren();\r\n        // apply collision to group\r\n        this.physics.world.collide(organisms)\r\n\r\n        // apply collision to group & slime\r\n        this.physics.world.collide(organisms, slime, (organisms, slime)=>{\r\n            organisms.destroy()\r\n            slime.destroy()\r\n        })\r\n        //console.log(slime.hp)\r\n        let numOrganisms = organisms.length;\r\n    \r\n        for (let i = 0; i < numOrganisms; i++) {\r\n\r\n            // if (slime.active === true) {\r\n            //     //this.physics.accelerateToObject(organisms[i], slime)\r\n            // }\r\n            //console.log(organisms[i].hp)\r\n            // movement\r\n            this.movementAnim(organisms[i]);\r\n            organisms[i].metabolise(1)\r\n            this.randomMovement(organisms[i]);\r\n            if (organisms[i].hp === 0) {\r\n                organisms[i].destroy()\r\n                numOrganisms = organisms.length\r\n            }\r\n        }\r\n\r\n    }\r\n    onObjectClicked(pointer, gameObject) {\r\n        gameObject.setScale(1.5);\r\n    }\r\n\r\n    movementAnim(obj) {\r\n        if (obj.active === true) {\r\n            if(obj.body.velocity.y > 0) {\r\n                obj.anims.play('south', true);\r\n            } else if (obj.body.velocity.y < 0) {\r\n                obj.anims.play('north', true);\r\n            } else if (obj.body.velocity.x < 0) {\r\n                obj.anims.play('west', true);\r\n                obj.flipX = false;\r\n            } else if (obj.body.velocity.x > 0) {\r\n                obj.anims.play('west', true);\r\n                obj.flipX = true;\r\n            } else {\r\n                obj.anims.play('idle', true);\r\n            }\r\n        }\r\n    }\r\n\r\n    randomMovement(obj) {\r\n            if (obj.active === true) {\r\n                const d = Phaser.Math.Between(0, 500)\r\n                if (d < 100 && d > 95) {\r\n                    obj.setVelocityY(64);\r\n                    //obj.anims.play('north', true);\r\n                } else if (d < 95 && d > 90) {\r\n                    obj.setVelocityY(-64);\r\n                    //obj.anims.play('south', true);\r\n                } else if (d < 90 && d > 85) {\r\n                    obj.setVelocityX(64);\r\n                    //obj.anims.play('west', true);\r\n                    //obj.flipX = true;\r\n                } else if (d < 85 && d > 80) {\r\n                    obj.setVelocityX(-64);\r\n                    //obj.anims.play('west', true);\r\n                    //obj.flipX = false; \r\n                } else if (d < 80 && d > 75) {\r\n                    obj.setVelocity(0,0);\r\n                }\r\n            }\r\n\r\n    };\r\n\r\n\r\n}\r\n\r\n","/** @types {import(\"../typings/phaser\")} */\nimport {LoadScene} from \"./scenes/LoadScene\";\nimport {MenuScene} from \"./scenes/MenuScene\";\nimport {PlayScene} from \"./scenes/PlayScene\";\n\nlet game = new Phaser.Game({\n    width: 800,\n    height: 600,\n    scene:[\n        LoadScene,\n        MenuScene,\n        PlayScene\n    ],\n    physics: {\n        default: \"arcade\",\n        arcade: {\n            debug: true\n        }\n    }\n});\n\n\n\n\n/*\n//import Life from './life.js';\nconst gameState = {}\nconst config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    backgroundColor: '#ababab',\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: 100,\n            debug: true\n        }\n    },\n\n    scene: {\n        preload,\n        create,\n        update\n    }\n\n\n};\nconst game = new Phaser.Game(config);\n\nlet slime = \"\";\nlet timer = 0;\nconst healthbar = 100;\n\nfunction preload () {\n    // preload images, sounds & other assets\n    //this.load.json('map', 'assets/grass.json')\n    this.load.image('tileset', 'assets/TilesetGrass/overworld_tileset_grass.png');\n    this.load.tilemapTiledJSON('map', 'assets/TilesetGrass/evo-tileset.json');\n    //this.load.spritesheet('tiles', 'assets/grass.png', {frameWidth: 64, frameHeight: 64})\n    this.load.multiatlas('slime', 'assets/slime.json', 'assets')\n    this.load.spritesheet('slime_back', 'assets/slime1_back.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_front', 'assets/slime1_front.png', {frameWidth: 16, frameHeight: 16});\n    this.load.spritesheet('slime_side', 'assets/slime1_side.png', {frameWidth: 16, frameHeight: 16})\n    this.load.spritesheet('slime_explode', 'assets/slime_explode.png', {frameWidth: 16, frameHeight: 16})\n};\nfunction create () {\n    const map = this.make.tilemap({ key: 'map'});\n    const tileset = map.addTilesetImage('evo-default', 'tileset')\n\n    // Layers\n    const baseLayer = map.createStaticLayer(\"Base\", tileset, 0, 0);\n    const treeLayer = map.createStaticLayer(\"Trees\", tileset, 0, 0);\n    const waterLayer = map.createStaticLayer(\"Water\", tileset, 0, 0);\n    const structureLayer = map.createStaticLayer(\"Structures\", tileset, 0, 0);\n\n    // Add organism to scene (full spritesheet) -- .setBounce(10).setFriction(0)\n    this.slime = this.physics.add.sprite(400, 330,'slime', 'slime-05.png');\n    // label(this.slime)\n\n    // Create animations\n    this.anims.create({\n        key: 'idle',\n        frames: this.anims.generateFrameNames('slime', {prefix: 'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:5,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'north',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 1, end: 4, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'south',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-0', start: 5, end: 8, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n    this.anims.create({\n        key: 'west',\n        frames: this.anims.generateFrameNames('slime', {prefix:'slime-', start: 9, end: 12, suffix: '.png'}),\n        frameRate:15,\n        repeat: -1\n    })\n\n    //Group of organisms\n    this.organisms = this.physics.add.group({\n        key: 'slime',\n        repeat: 4,\n        setXY: {\n            x: 400,\n            y: 300,\n            stepX: 80,\n            stepY: 20\n        }\n    });\n\n    //scale organism\n    // Phaser.Actions.ScaleXY(this.organisms.getChildren(), -0.10,-0.10);\n\n    // Takes an array of objects and passes each of them to the given callback.\n    Phaser.Actions.Call(this.organisms.getChildren(), function(organism) {\n        organism.speed = Math.random() * 2 + 1;\n        // make item interactive\n        organism.setInteractive();\n\n    }, this);\n\n    let locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n    this.orgLocations = this.add.group({\n        //\n    })\n\n    this.slime.speed = 2;\n    this.physics.world.bounds.width = map.widthInPixels-10;\n    this.physics.world.bounds.height = map.heightInPixels-10;\n    this.slime.setCollideWorldBounds(true);\n\n    // Map Collisions\n    this.physics.add.collider(this.slime, treeLayer);\n    this.physics.add.collider(this.slime, waterLayer);\n\n    this.physics.add.collider(this.organisms, treeLayer);\n    this.physics.add.collider(this.organisms, waterLayer);\n    this.physics.add.collider(this.organisms);\n    \n    // Specify property\n    treeLayer.setCollisionByProperty({collide:true});\n    waterLayer.setCollisionByProperty({collide:true});\n\n    // Collision debugging (remove in production)\n    // const debugGraphics = this.add.graphics().setAlpha(0.75);\n    // treeLayer.renderDebug(debugGraphics, {\n    //     tileColor: null,\n    //     collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255),\n    //     faceColor: new Phaser.Display.Color(40, 39, 37, 255)\n    // });\n    \n    \n    \n};\nfunction update () {\n\n    // Slime movement\n    this.slime.setVelocityX(-64)\n    movementAnim(this.slime)\n\n        // Organism movement\n        let organisms = this.organisms.getChildren();\n        let numOrganisms = organisms.length;\n    \n        for (let i = 0; i < numOrganisms; i++) {\n\n            // movement\n            movementAnim(organisms[i]);\n  \n            if (timer < 10) {\n                if (i === 0 || i === 1) {\n                    organisms[i].setVelocityY(64);  \n                } else if (i === 2 || i === 3) {\n                    organisms[i].setVelocityX(64)\n                } else if (i === 5) {\n                    organisms[i].setVelocity(0,0)\n                }\n            }\n\n\n                if (organisms[i].y >= 599) {\n                    organisms[i].setVelocityY(-64)\n                    //organisms[i].anims.play('north', true);\n                } else if (organisms[i].y <= 1) {\n                    organisms[i].setVelocityY(64);\n                    //organisms[i].anims.play('south', true);\n                } else if (organisms[i].x >= 799) {\n                    organisms[i].setVelocityX(-64);\n                    //organisms[i].anims.play('west', true)\n                } else if (organisms[i].x <= 1) {\n                    organisms[i].setVelocityX(64);\n                    //organisms[i].anims.play('west', true)\n                    //organisms[i].flipX = true;\n                } else {\n                    randomMovement(organisms[i])\n                }\n                \n    // if (organisms[i].x >= this.organismMaxX && organisms[i].speed > 0) {\n            //     organisms[i].speed *= -0.25;\n            // } else if (organisms[i].x <= this.organismMinX && organisms[i].speed < 0) {\n            //     organisms[i].speed *= -0.25;\n            // }\n            timer++\n        };\n\n    //this.slime.y -= this.slime.speed\n    //this.slime.anims.play('north', true);\n\n}; \n\n\n\n\n\n\n// function label(obj) {\n//     const style = { font: \"10px Arial\", fill: \"#ffffff\"};\n//     obj.label_score = this.add.text(20, 20, \"0\", style);\n//     obj.hello_sprite.addChild(this.label_score)\n// }\n\n//locations = this.add.text(16, 16, 'location: 0, 0', { fontSize: '10px', fill: '#000' })\n\n*/"]}